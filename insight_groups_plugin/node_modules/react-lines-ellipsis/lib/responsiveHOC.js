var React = require('react');
var debounce = require('lodash/debounce');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var debounce__default = /*#__PURE__*/_interopDefaultLegacy(debounce);

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var _excluded = ["innerRef"];
var isBrowser = typeof window !== 'undefined';
function responsiveHOC(wait, debounceOptions) {
  if (wait === void 0) {
    wait = 150;
  }

  return function (Component) {
    var Responsive = /*#__PURE__*/function (_React$Component) {
      _inheritsLoose(Responsive, _React$Component);

      function Responsive(props) {
        var _this;

        _this = _React$Component.call(this, props) || this;
        _this.state = {
          winWidth: isBrowser ? window.innerWidth : 0
        };
        _this.onResize = debounce__default["default"](_this.onResize.bind(_assertThisInitialized(_this)), wait, debounceOptions);
        return _this;
      }

      var _proto = Responsive.prototype;

      _proto.componentDidMount = function componentDidMount() {
        window.addEventListener('resize', this.onResize);
      };

      _proto.componentWillUnmount = function componentWillUnmount() {
        window.removeEventListener('resize', this.onResize);
        this.onResize.cancel();
      };

      _proto.onResize = function onResize() {
        this.setState({
          winWidth: window.innerWidth
        });
      };

      _proto.render = function render() {
        var _this$props = this.props,
            innerRef = _this$props.innerRef,
            rest = _objectWithoutPropertiesLoose(_this$props, _excluded);

        return /*#__PURE__*/React__default["default"].createElement(Component, _extends({
          ref: innerRef
        }, rest, this.state));
      };

      return Responsive;
    }(React__default["default"].Component);

    Responsive.displayName = "Responsive(" + (Component.displayName || Component.name) + ")";
    Responsive.defaultProps = {
      innerRef: function innerRef() {}
    };
    return Responsive;
  };
}

module.exports = responsiveHOC;
