import React from 'react';
import debounce from 'lodash/debounce';

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

const _excluded = ["innerRef"];
const isBrowser = typeof window !== 'undefined';
function responsiveHOC(wait = 150, debounceOptions) {
  return Component => {
    class Responsive extends React.Component {
      constructor(props) {
        super(props);
        this.state = {
          winWidth: isBrowser ? window.innerWidth : 0
        };
        this.onResize = debounce(this.onResize.bind(this), wait, debounceOptions);
      }

      componentDidMount() {
        window.addEventListener('resize', this.onResize);
      }

      componentWillUnmount() {
        window.removeEventListener('resize', this.onResize);
        this.onResize.cancel();
      }

      onResize() {
        this.setState({
          winWidth: window.innerWidth
        });
      }

      render() {
        const _this$props = this.props,
              {
          innerRef
        } = _this$props,
              rest = _objectWithoutPropertiesLoose(_this$props, _excluded);

        return /*#__PURE__*/React.createElement(Component, _extends({
          ref: innerRef
        }, rest, this.state));
      }

    }

    Responsive.displayName = `Responsive(${Component.displayName || Component.name})`;
    Responsive.defaultProps = {
      innerRef() {}

    };
    return Responsive;
  };
}

export { responsiveHOC as default };
