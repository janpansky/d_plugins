// (C) 2023 GoodData Corporation
import { __assign, __awaiter, __extends, __generator } from "tslib";
import globalAxios from "axios";
// Some imports not used depending on template conditions, we also need prettier-ignore so that the import does not get split and ts-ignore still works
// prettier-ignore
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, toPathString, createRequestFunction } from './common';
// Some imports not used depending on template conditions, we also need prettier-ignore so that the import does not get split and ts-ignore still works
// prettier-ignore
// @ts-ignore
import { BASE_PATH, BaseAPI } from './base';
export var TabularExportRequestFormatEnum = {
    CSV: "CSV",
    XLSX: "XLSX",
};
/**
 * ActionsApi - axios parameter creator
 * @export
 */
export var ActionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * An visual export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
         * @summary Create visual - pdf export request
         * @param {string} workspaceId
         * @param {PdfExportRequest} pdfExportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPdfExport: function (workspaceId, pdfExportRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("createPdfExport", "workspaceId", workspaceId);
                    // verify required parameter 'pdfExportRequest' is not null or undefined
                    assertParamExists("createPdfExport", "pdfExportRequest", pdfExportRequest);
                    localVarPath = "/api/v1/actions/workspaces/{workspaceId}/export/visual".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof pdfExportRequest !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(pdfExportRequest !== undefined ? pdfExportRequest : {})
                        : pdfExportRequest || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
         * @summary Create tabular export request
         * @param {string} workspaceId
         * @param {TabularExportRequest} tabularExportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTabularExport: function (workspaceId, tabularExportRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("createTabularExport", "workspaceId", workspaceId);
                    // verify required parameter 'tabularExportRequest' is not null or undefined
                    assertParamExists("createTabularExport", "tabularExportRequest", tabularExportRequest);
                    localVarPath = "/api/v1/actions/workspaces/{workspaceId}/export/tabular".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof tabularExportRequest !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(tabularExportRequest !== undefined ? tabularExportRequest : {})
                        : tabularExportRequest || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns 202 until original POST export request is not processed.Returns 200 with exported data once the export is done.
         * @summary Retrieve exported files
         * @param {string} workspaceId
         * @param {string} exportId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExportedFile: function (workspaceId, exportId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getExportedFile", "workspaceId", workspaceId);
                    // verify required parameter 'exportId' is not null or undefined
                    assertParamExists("getExportedFile", "exportId", exportId);
                    localVarPath = "/api/v1/actions/workspaces/{workspaceId}/export/visual/{exportId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "exportId" + "}", encodeURIComponent(String(exportId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * This endpoints serves as a cache for user defined metadata for the front end ui to retrieve them, if one was created using the POST ../export/visual endpoint. The metadata structure is not verified. If metadata for given {exportId} has been found, endpoint returns the value 200 else 404.
         * @summary Retrieve metadata context
         * @param {string} workspaceId
         * @param {string} exportId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata: function (workspaceId, exportId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getMetadata", "workspaceId", workspaceId);
                    // verify required parameter 'exportId' is not null or undefined
                    assertParamExists("getMetadata", "exportId", exportId);
                    localVarPath = "/api/v1/actions/workspaces/{workspaceId}/export/visual/{exportId}/metadata"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "exportId" + "}", encodeURIComponent(String(exportId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
         * @summary Retrieve exported files
         * @param {string} workspaceId
         * @param {string} exportId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTabularExport: function (workspaceId, exportId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getTabularExport", "workspaceId", workspaceId);
                    // verify required parameter 'exportId' is not null or undefined
                    assertParamExists("getTabularExport", "exportId", exportId);
                    localVarPath = "/api/v1/actions/workspaces/{workspaceId}/export/tabular/{exportId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "exportId" + "}", encodeURIComponent(String(exportId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * ActionsApi - functional programming interface
 * @export
 */
export var ActionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = ActionsApiAxiosParamCreator(configuration);
    return {
        /**
         * An visual export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
         * @summary Create visual - pdf export request
         * @param {string} workspaceId
         * @param {PdfExportRequest} pdfExportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPdfExport: function (workspaceId, pdfExportRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createPdfExport(workspaceId, pdfExportRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
         * @summary Create tabular export request
         * @param {string} workspaceId
         * @param {TabularExportRequest} tabularExportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTabularExport: function (workspaceId, tabularExportRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createTabularExport(workspaceId, tabularExportRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns 202 until original POST export request is not processed.Returns 200 with exported data once the export is done.
         * @summary Retrieve exported files
         * @param {string} workspaceId
         * @param {string} exportId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExportedFile: function (workspaceId, exportId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getExportedFile(workspaceId, exportId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoints serves as a cache for user defined metadata for the front end ui to retrieve them, if one was created using the POST ../export/visual endpoint. The metadata structure is not verified. If metadata for given {exportId} has been found, endpoint returns the value 200 else 404.
         * @summary Retrieve metadata context
         * @param {string} workspaceId
         * @param {string} exportId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata: function (workspaceId, exportId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMetadata(workspaceId, exportId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
         * @summary Retrieve exported files
         * @param {string} workspaceId
         * @param {string} exportId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTabularExport: function (workspaceId, exportId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTabularExport(workspaceId, exportId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * ActionsApi - factory interface
 * @export
 */
export var ActionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = ActionsApiFp(configuration);
    return {
        /**
         * An visual export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
         * @summary Create visual - pdf export request
         * @param {ActionsApiCreatePdfExportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPdfExport: function (requestParameters, options) {
            return localVarFp
                .createPdfExport(requestParameters.workspaceId, requestParameters.pdfExportRequest, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
         * @summary Create tabular export request
         * @param {ActionsApiCreateTabularExportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTabularExport: function (requestParameters, options) {
            return localVarFp
                .createTabularExport(requestParameters.workspaceId, requestParameters.tabularExportRequest, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns 202 until original POST export request is not processed.Returns 200 with exported data once the export is done.
         * @summary Retrieve exported files
         * @param {ActionsApiGetExportedFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExportedFile: function (requestParameters, options) {
            return localVarFp
                .getExportedFile(requestParameters.workspaceId, requestParameters.exportId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoints serves as a cache for user defined metadata for the front end ui to retrieve them, if one was created using the POST ../export/visual endpoint. The metadata structure is not verified. If metadata for given {exportId} has been found, endpoint returns the value 200 else 404.
         * @summary Retrieve metadata context
         * @param {ActionsApiGetMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata: function (requestParameters, options) {
            return localVarFp
                .getMetadata(requestParameters.workspaceId, requestParameters.exportId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
         * @summary Retrieve exported files
         * @param {ActionsApiGetTabularExportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTabularExport: function (requestParameters, options) {
            return localVarFp
                .getTabularExport(requestParameters.workspaceId, requestParameters.exportId, options)
                .then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ActionsApi - object-oriented interface
 * @export
 * @class ActionsApi
 * @extends {BaseAPI}
 */
var ActionsApi = /** @class */ (function (_super) {
    __extends(ActionsApi, _super);
    function ActionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * An visual export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create visual - pdf export request
     * @param {ActionsApiCreatePdfExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.createPdfExport = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .createPdfExport(requestParameters.workspaceId, requestParameters.pdfExportRequest, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create tabular export request
     * @param {ActionsApiCreateTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.createTabularExport = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .createTabularExport(requestParameters.workspaceId, requestParameters.tabularExportRequest, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns 202 until original POST export request is not processed.Returns 200 with exported data once the export is done.
     * @summary Retrieve exported files
     * @param {ActionsApiGetExportedFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.getExportedFile = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .getExportedFile(requestParameters.workspaceId, requestParameters.exportId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoints serves as a cache for user defined metadata for the front end ui to retrieve them, if one was created using the POST ../export/visual endpoint. The metadata structure is not verified. If metadata for given {exportId} has been found, endpoint returns the value 200 else 404.
     * @summary Retrieve metadata context
     * @param {ActionsApiGetMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.getMetadata = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .getMetadata(requestParameters.workspaceId, requestParameters.exportId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
     * @summary Retrieve exported files
     * @param {ActionsApiGetTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.getTabularExport = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .getTabularExport(requestParameters.workspaceId, requestParameters.exportId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ActionsApi;
}(BaseAPI));
export { ActionsApi };
//# sourceMappingURL=api.js.map