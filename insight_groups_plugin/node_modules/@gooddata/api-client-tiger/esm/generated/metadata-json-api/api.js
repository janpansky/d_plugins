// (C) 2023 GoodData Corporation
import { __assign, __awaiter, __extends, __generator } from "tslib";
import globalAxios from "axios";
// Some imports not used depending on template conditions, we also need prettier-ignore so that the import does not get split and ts-ignore still works
// prettier-ignore
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, toPathString, createRequestFunction } from './common';
// Some imports not used depending on template conditions, we also need prettier-ignore so that the import does not get split and ts-ignore still works
// prettier-ignore
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI } from './base';
export var ApiEntitlementNameEnum = {
    CONTRACT: "Contract",
    CUSTOM_THEMING: "CustomTheming",
    PDF_EXPORTS: "PdfExports",
    MANAGED_OIDC: "ManagedOIDC",
    UI_LOCALIZATION: "UiLocalization",
    TIER: "Tier",
    USER_COUNT: "UserCount",
    UNLIMITED_USERS: "UnlimitedUsers",
    UNLIMITED_WORKSPACES: "UnlimitedWorkspaces",
    WHITE_LABELING: "WhiteLabeling",
    WORKSPACE_COUNT: "WorkspaceCount",
};
export var AssigneeIdentifierTypeEnum = {
    USER: "user",
    USER_GROUP: "userGroup",
};
export var DataSourceTableIdentifierTypeEnum = {
    DATA_SOURCE: "dataSource",
};
export var DatasetReferenceIdentifierTypeEnum = {
    DATASET: "dataset",
};
export var DeclarativeAnalyticalDashboardPermissionNameEnum = {
    EDIT: "EDIT",
    SHARE: "SHARE",
    VIEW: "VIEW",
};
export var DeclarativeAttributeSortDirectionEnum = {
    ASC: "ASC",
    DESC: "DESC",
};
export var DeclarativeAttributeSourceColumnDataTypeEnum = {
    INT: "INT",
    STRING: "STRING",
    DATE: "DATE",
    NUMERIC: "NUMERIC",
    TIMESTAMP: "TIMESTAMP",
    TIMESTAMP_TZ: "TIMESTAMP_TZ",
    BOOLEAN: "BOOLEAN",
};
export var DeclarativeColumnDataTypeEnum = {
    INT: "INT",
    STRING: "STRING",
    DATE: "DATE",
    NUMERIC: "NUMERIC",
    TIMESTAMP: "TIMESTAMP",
    TIMESTAMP_TZ: "TIMESTAMP_TZ",
    BOOLEAN: "BOOLEAN",
};
export var DeclarativeDataSourceTypeEnum = {
    POSTGRESQL: "POSTGRESQL",
    REDSHIFT: "REDSHIFT",
    VERTICA: "VERTICA",
    SNOWFLAKE: "SNOWFLAKE",
    ADS: "ADS",
    BIGQUERY: "BIGQUERY",
    MSSQL: "MSSQL",
    PRESTO: "PRESTO",
    DREMIO: "DREMIO",
    DRILL: "DRILL",
    GREENPLUM: "GREENPLUM",
    AZURESQL: "AZURESQL",
    SYNAPSESQL: "SYNAPSESQL",
    DATABRICKS: "DATABRICKS",
};
export var DeclarativeDataSourcePermissionNameEnum = {
    MANAGE: "MANAGE",
    USE: "USE",
};
export var DeclarativeDateDatasetGranularitiesEnum = {
    MINUTE: "MINUTE",
    HOUR: "HOUR",
    DAY: "DAY",
    WEEK: "WEEK",
    MONTH: "MONTH",
    QUARTER: "QUARTER",
    YEAR: "YEAR",
    MINUTE_OF_HOUR: "MINUTE_OF_HOUR",
    HOUR_OF_DAY: "HOUR_OF_DAY",
    DAY_OF_WEEK: "DAY_OF_WEEK",
    DAY_OF_MONTH: "DAY_OF_MONTH",
    DAY_OF_YEAR: "DAY_OF_YEAR",
    WEEK_OF_YEAR: "WEEK_OF_YEAR",
    MONTH_OF_YEAR: "MONTH_OF_YEAR",
    QUARTER_OF_YEAR: "QUARTER_OF_YEAR",
};
export var DeclarativeFactSourceColumnDataTypeEnum = {
    INT: "INT",
    STRING: "STRING",
    DATE: "DATE",
    NUMERIC: "NUMERIC",
    TIMESTAMP: "TIMESTAMP",
    TIMESTAMP_TZ: "TIMESTAMP_TZ",
    BOOLEAN: "BOOLEAN",
};
export var DeclarativeLabelSourceColumnDataTypeEnum = {
    INT: "INT",
    STRING: "STRING",
    DATE: "DATE",
    NUMERIC: "NUMERIC",
    TIMESTAMP: "TIMESTAMP",
    TIMESTAMP_TZ: "TIMESTAMP_TZ",
    BOOLEAN: "BOOLEAN",
};
export var DeclarativeLabelValueTypeEnum = {
    TEXT: "TEXT",
    HYPERLINK: "HYPERLINK",
    GEO: "GEO",
    GEO_LONGITUDE: "GEO_LONGITUDE",
    GEO_LATITUDE: "GEO_LATITUDE",
};
export var DeclarativeOrganizationPermissionNameEnum = {
    MANAGE: "MANAGE",
};
export var DeclarativeSettingTypeEnum = {
    TIMEZONE: "TIMEZONE",
    ACTIVE_THEME: "ACTIVE_THEME",
    ACTIVE_COLOR_PALETTE: "ACTIVE_COLOR_PALETTE",
    WHITE_LABELING: "WHITE_LABELING",
    LOCALE: "LOCALE",
    FORMAT_LOCALE: "FORMAT_LOCALE",
    MAPBOX_TOKEN: "MAPBOX_TOKEN",
};
export var DeclarativeSingleWorkspacePermissionNameEnum = {
    MANAGE: "MANAGE",
    ANALYZE: "ANALYZE",
    EXPORT: "EXPORT",
    EXPORT_TABULAR: "EXPORT_TABULAR",
    EXPORT_PDF: "EXPORT_PDF",
    VIEW: "VIEW",
};
export var DeclarativeUserGroupPermissionNameEnum = {
    SEE: "SEE",
};
export var DeclarativeUserPermissionNameEnum = {
    SEE: "SEE",
};
export var DeclarativeWorkspaceHierarchyPermissionNameEnum = {
    MANAGE: "MANAGE",
    ANALYZE: "ANALYZE",
    EXPORT: "EXPORT",
    EXPORT_TABULAR: "EXPORT_TABULAR",
    EXPORT_PDF: "EXPORT_PDF",
    VIEW: "VIEW",
};
export var EntitlementsRequestEntitlementsNameEnum = {
    CONTRACT: "Contract",
    CUSTOM_THEMING: "CustomTheming",
    PDF_EXPORTS: "PdfExports",
    MANAGED_OIDC: "ManagedOIDC",
    UI_LOCALIZATION: "UiLocalization",
    TIER: "Tier",
    USER_COUNT: "UserCount",
    UNLIMITED_USERS: "UnlimitedUsers",
    UNLIMITED_WORKSPACES: "UnlimitedWorkspaces",
    WHITE_LABELING: "WhiteLabeling",
    WORKSPACE_COUNT: "WorkspaceCount",
};
export var GrainIdentifierTypeEnum = {
    ATTRIBUTE: "attribute",
    DATASET: "dataset",
};
export var HierarchyObjectIdentificationTypeEnum = {
    ANALYTICAL_DASHBOARD: "analyticalDashboard",
    ATTRIBUTE: "attribute",
    DASHBOARD_PLUGIN: "dashboardPlugin",
    DATASET: "dataset",
    FACT: "fact",
    LABEL: "label",
    METRIC: "metric",
    PROMPT: "prompt",
    VISUALIZATION_OBJECT: "visualizationObject",
    FILTER_CONTEXT: "filterContext",
    WORKSPACE_DATA_FILTER: "workspaceDataFilter",
    WORKSPACE_DATA_FILTER_SETTINGS: "workspaceDataFilterSettings",
};
export var IdentifierDuplicationsTypeEnum = {
    ANALYTICAL_DASHBOARD: "analyticalDashboard",
    ATTRIBUTE: "attribute",
    DASHBOARD_PLUGIN: "dashboardPlugin",
    DATASET: "dataset",
    FACT: "fact",
    LABEL: "label",
    METRIC: "metric",
    PROMPT: "prompt",
    VISUALIZATION_OBJECT: "visualizationObject",
    FILTER_CONTEXT: "filterContext",
    WORKSPACE_DATA_FILTER: "workspaceDataFilter",
    WORKSPACE_DATA_FILTER_SETTINGS: "workspaceDataFilterSettings",
};
export var JsonApiAnalyticalDashboardInTypeEnum = {
    ANALYTICAL_DASHBOARD: "analyticalDashboard",
};
export var JsonApiAnalyticalDashboardLinkageTypeEnum = {
    ANALYTICAL_DASHBOARD: "analyticalDashboard",
};
export var JsonApiAnalyticalDashboardOutTypeEnum = {
    ANALYTICAL_DASHBOARD: "analyticalDashboard",
};
export var JsonApiAnalyticalDashboardOutMetaPermissionsEnum = {
    EDIT: "EDIT",
    SHARE: "SHARE",
    VIEW: "VIEW",
};
export var JsonApiAnalyticalDashboardOutMetaOriginOriginTypeEnum = {
    NATIVE: "NATIVE",
    PARENT: "PARENT",
};
export var JsonApiAnalyticalDashboardOutWithLinksTypeEnum = {
    ANALYTICAL_DASHBOARD: "analyticalDashboard",
};
export var JsonApiAnalyticalDashboardPatchTypeEnum = {
    ANALYTICAL_DASHBOARD: "analyticalDashboard",
};
export var JsonApiApiTokenInTypeEnum = {
    API_TOKEN: "apiToken",
};
export var JsonApiApiTokenOutTypeEnum = {
    API_TOKEN: "apiToken",
};
export var JsonApiApiTokenOutWithLinksTypeEnum = {
    API_TOKEN: "apiToken",
};
export var JsonApiAttributeLinkageTypeEnum = {
    ATTRIBUTE: "attribute",
};
export var JsonApiAttributeOutTypeEnum = {
    ATTRIBUTE: "attribute",
};
export var JsonApiAttributeOutAttributesGranularityEnum = {
    MINUTE: "MINUTE",
    HOUR: "HOUR",
    DAY: "DAY",
    WEEK: "WEEK",
    MONTH: "MONTH",
    QUARTER: "QUARTER",
    YEAR: "YEAR",
    MINUTE_OF_HOUR: "MINUTE_OF_HOUR",
    HOUR_OF_DAY: "HOUR_OF_DAY",
    DAY_OF_WEEK: "DAY_OF_WEEK",
    DAY_OF_MONTH: "DAY_OF_MONTH",
    DAY_OF_YEAR: "DAY_OF_YEAR",
    WEEK_OF_YEAR: "WEEK_OF_YEAR",
    MONTH_OF_YEAR: "MONTH_OF_YEAR",
    QUARTER_OF_YEAR: "QUARTER_OF_YEAR",
};
export var JsonApiAttributeOutAttributesSortDirectionEnum = {
    ASC: "ASC",
    DESC: "DESC",
};
export var JsonApiAttributeOutAttributesSourceColumnDataTypeEnum = {
    INT: "INT",
    STRING: "STRING",
    DATE: "DATE",
    NUMERIC: "NUMERIC",
    TIMESTAMP: "TIMESTAMP",
    TIMESTAMP_TZ: "TIMESTAMP_TZ",
    BOOLEAN: "BOOLEAN",
};
export var JsonApiAttributeOutWithLinksTypeEnum = {
    ATTRIBUTE: "attribute",
};
export var JsonApiColorPaletteInTypeEnum = {
    COLOR_PALETTE: "colorPalette",
};
export var JsonApiColorPaletteOutTypeEnum = {
    COLOR_PALETTE: "colorPalette",
};
export var JsonApiColorPaletteOutWithLinksTypeEnum = {
    COLOR_PALETTE: "colorPalette",
};
export var JsonApiColorPalettePatchTypeEnum = {
    COLOR_PALETTE: "colorPalette",
};
export var JsonApiCookieSecurityConfigurationInTypeEnum = {
    COOKIE_SECURITY_CONFIGURATION: "cookieSecurityConfiguration",
};
export var JsonApiCookieSecurityConfigurationOutTypeEnum = {
    COOKIE_SECURITY_CONFIGURATION: "cookieSecurityConfiguration",
};
export var JsonApiCookieSecurityConfigurationPatchTypeEnum = {
    COOKIE_SECURITY_CONFIGURATION: "cookieSecurityConfiguration",
};
export var JsonApiCspDirectiveInTypeEnum = {
    CSP_DIRECTIVE: "cspDirective",
};
export var JsonApiCspDirectiveOutTypeEnum = {
    CSP_DIRECTIVE: "cspDirective",
};
export var JsonApiCspDirectiveOutWithLinksTypeEnum = {
    CSP_DIRECTIVE: "cspDirective",
};
export var JsonApiCspDirectivePatchTypeEnum = {
    CSP_DIRECTIVE: "cspDirective",
};
export var JsonApiCustomApplicationSettingInTypeEnum = {
    CUSTOM_APPLICATION_SETTING: "customApplicationSetting",
};
export var JsonApiCustomApplicationSettingOutTypeEnum = {
    CUSTOM_APPLICATION_SETTING: "customApplicationSetting",
};
export var JsonApiCustomApplicationSettingOutWithLinksTypeEnum = {
    CUSTOM_APPLICATION_SETTING: "customApplicationSetting",
};
export var JsonApiCustomApplicationSettingPatchTypeEnum = {
    CUSTOM_APPLICATION_SETTING: "customApplicationSetting",
};
export var JsonApiDashboardPluginInTypeEnum = {
    DASHBOARD_PLUGIN: "dashboardPlugin",
};
export var JsonApiDashboardPluginLinkageTypeEnum = {
    DASHBOARD_PLUGIN: "dashboardPlugin",
};
export var JsonApiDashboardPluginOutTypeEnum = {
    DASHBOARD_PLUGIN: "dashboardPlugin",
};
export var JsonApiDashboardPluginOutWithLinksTypeEnum = {
    DASHBOARD_PLUGIN: "dashboardPlugin",
};
export var JsonApiDashboardPluginPatchTypeEnum = {
    DASHBOARD_PLUGIN: "dashboardPlugin",
};
export var JsonApiDataSourceIdentifierOutTypeEnum = {
    DATA_SOURCE_IDENTIFIER: "dataSourceIdentifier",
};
export var JsonApiDataSourceIdentifierOutAttributesTypeEnum = {
    POSTGRESQL: "POSTGRESQL",
    REDSHIFT: "REDSHIFT",
    VERTICA: "VERTICA",
    SNOWFLAKE: "SNOWFLAKE",
    ADS: "ADS",
    BIGQUERY: "BIGQUERY",
    MSSQL: "MSSQL",
    PRESTO: "PRESTO",
    DREMIO: "DREMIO",
    DRILL: "DRILL",
    GREENPLUM: "GREENPLUM",
    AZURESQL: "AZURESQL",
    SYNAPSESQL: "SYNAPSESQL",
    DATABRICKS: "DATABRICKS",
};
export var JsonApiDataSourceIdentifierOutMetaPermissionsEnum = {
    MANAGE: "MANAGE",
    USE: "USE",
};
export var JsonApiDataSourceIdentifierOutWithLinksTypeEnum = {
    DATA_SOURCE_IDENTIFIER: "dataSourceIdentifier",
};
export var JsonApiDataSourceInTypeEnum = {
    DATA_SOURCE: "dataSource",
};
export var JsonApiDataSourceInAttributesTypeEnum = {
    POSTGRESQL: "POSTGRESQL",
    REDSHIFT: "REDSHIFT",
    VERTICA: "VERTICA",
    SNOWFLAKE: "SNOWFLAKE",
    ADS: "ADS",
    BIGQUERY: "BIGQUERY",
    MSSQL: "MSSQL",
    PRESTO: "PRESTO",
    DREMIO: "DREMIO",
    DRILL: "DRILL",
    GREENPLUM: "GREENPLUM",
    AZURESQL: "AZURESQL",
    SYNAPSESQL: "SYNAPSESQL",
    DATABRICKS: "DATABRICKS",
};
export var JsonApiDataSourceOutTypeEnum = {
    DATA_SOURCE: "dataSource",
};
export var JsonApiDataSourceOutAttributesTypeEnum = {
    POSTGRESQL: "POSTGRESQL",
    REDSHIFT: "REDSHIFT",
    VERTICA: "VERTICA",
    SNOWFLAKE: "SNOWFLAKE",
    ADS: "ADS",
    BIGQUERY: "BIGQUERY",
    MSSQL: "MSSQL",
    PRESTO: "PRESTO",
    DREMIO: "DREMIO",
    DRILL: "DRILL",
    GREENPLUM: "GREENPLUM",
    AZURESQL: "AZURESQL",
    SYNAPSESQL: "SYNAPSESQL",
    DATABRICKS: "DATABRICKS",
};
export var JsonApiDataSourceOutWithLinksTypeEnum = {
    DATA_SOURCE: "dataSource",
};
export var JsonApiDataSourcePatchTypeEnum = {
    DATA_SOURCE: "dataSource",
};
export var JsonApiDataSourcePatchAttributesTypeEnum = {
    POSTGRESQL: "POSTGRESQL",
    REDSHIFT: "REDSHIFT",
    VERTICA: "VERTICA",
    SNOWFLAKE: "SNOWFLAKE",
    ADS: "ADS",
    BIGQUERY: "BIGQUERY",
    MSSQL: "MSSQL",
    PRESTO: "PRESTO",
    DREMIO: "DREMIO",
    DRILL: "DRILL",
    GREENPLUM: "GREENPLUM",
    AZURESQL: "AZURESQL",
    SYNAPSESQL: "SYNAPSESQL",
    DATABRICKS: "DATABRICKS",
};
export var JsonApiDataSourceTableOutTypeEnum = {
    DATA_SOURCE_TABLE: "dataSourceTable",
};
export var JsonApiDataSourceTableOutAttributesTypeEnum = {
    TABLE: "TABLE",
    VIEW: "VIEW",
};
export var JsonApiDataSourceTableOutAttributesColumnsDataTypeEnum = {
    INT: "INT",
    STRING: "STRING",
    DATE: "DATE",
    NUMERIC: "NUMERIC",
    TIMESTAMP: "TIMESTAMP",
    TIMESTAMP_TZ: "TIMESTAMP_TZ",
    BOOLEAN: "BOOLEAN",
};
export var JsonApiDataSourceTableOutWithLinksTypeEnum = {
    DATA_SOURCE_TABLE: "dataSourceTable",
};
export var JsonApiDatasetLinkageTypeEnum = {
    DATASET: "dataset",
};
export var JsonApiDatasetOutTypeEnum = {
    DATASET: "dataset",
};
export var JsonApiDatasetOutAttributesTypeEnum = {
    NORMAL: "NORMAL",
    DATE: "DATE",
};
export var JsonApiDatasetOutAttributesGrainTypeEnum = {
    ATTRIBUTE: "attribute",
    DATASET: "dataset",
};
export var JsonApiDatasetOutWithLinksTypeEnum = {
    DATASET: "dataset",
};
export var JsonApiEntitlementOutTypeEnum = {
    ENTITLEMENT: "entitlement",
};
export var JsonApiEntitlementOutWithLinksTypeEnum = {
    ENTITLEMENT: "entitlement",
};
export var JsonApiFactLinkageTypeEnum = {
    FACT: "fact",
};
export var JsonApiFactOutTypeEnum = {
    FACT: "fact",
};
export var JsonApiFactOutAttributesSourceColumnDataTypeEnum = {
    INT: "INT",
    STRING: "STRING",
    DATE: "DATE",
    NUMERIC: "NUMERIC",
    TIMESTAMP: "TIMESTAMP",
    TIMESTAMP_TZ: "TIMESTAMP_TZ",
    BOOLEAN: "BOOLEAN",
};
export var JsonApiFactOutWithLinksTypeEnum = {
    FACT: "fact",
};
export var JsonApiFilterContextInTypeEnum = {
    FILTER_CONTEXT: "filterContext",
};
export var JsonApiFilterContextLinkageTypeEnum = {
    FILTER_CONTEXT: "filterContext",
};
export var JsonApiFilterContextOutTypeEnum = {
    FILTER_CONTEXT: "filterContext",
};
export var JsonApiFilterContextOutWithLinksTypeEnum = {
    FILTER_CONTEXT: "filterContext",
};
export var JsonApiFilterContextPatchTypeEnum = {
    FILTER_CONTEXT: "filterContext",
};
export var JsonApiLabelLinkageTypeEnum = {
    LABEL: "label",
};
export var JsonApiLabelOutTypeEnum = {
    LABEL: "label",
};
export var JsonApiLabelOutAttributesSourceColumnDataTypeEnum = {
    INT: "INT",
    STRING: "STRING",
    DATE: "DATE",
    NUMERIC: "NUMERIC",
    TIMESTAMP: "TIMESTAMP",
    TIMESTAMP_TZ: "TIMESTAMP_TZ",
    BOOLEAN: "BOOLEAN",
};
export var JsonApiLabelOutAttributesValueTypeEnum = {
    TEXT: "TEXT",
    HYPERLINK: "HYPERLINK",
    GEO: "GEO",
    GEO_LONGITUDE: "GEO_LONGITUDE",
    GEO_LATITUDE: "GEO_LATITUDE",
};
export var JsonApiLabelOutWithLinksTypeEnum = {
    LABEL: "label",
};
export var JsonApiMetricInTypeEnum = {
    METRIC: "metric",
};
export var JsonApiMetricLinkageTypeEnum = {
    METRIC: "metric",
};
export var JsonApiMetricOutTypeEnum = {
    METRIC: "metric",
};
export var JsonApiMetricOutWithLinksTypeEnum = {
    METRIC: "metric",
};
export var JsonApiMetricPatchTypeEnum = {
    METRIC: "metric",
};
export var JsonApiOrganizationInTypeEnum = {
    ORGANIZATION: "organization",
};
export var JsonApiOrganizationOutTypeEnum = {
    ORGANIZATION: "organization",
};
export var JsonApiOrganizationOutMetaPermissionsEnum = {
    MANAGE: "MANAGE",
};
export var JsonApiOrganizationPatchTypeEnum = {
    ORGANIZATION: "organization",
};
export var JsonApiOrganizationSettingInTypeEnum = {
    ORGANIZATION_SETTING: "organizationSetting",
};
export var JsonApiOrganizationSettingOutTypeEnum = {
    ORGANIZATION_SETTING: "organizationSetting",
};
export var JsonApiOrganizationSettingOutWithLinksTypeEnum = {
    ORGANIZATION_SETTING: "organizationSetting",
};
export var JsonApiOrganizationSettingPatchTypeEnum = {
    ORGANIZATION_SETTING: "organizationSetting",
};
export var JsonApiThemeInTypeEnum = {
    THEME: "theme",
};
export var JsonApiThemeOutTypeEnum = {
    THEME: "theme",
};
export var JsonApiThemeOutWithLinksTypeEnum = {
    THEME: "theme",
};
export var JsonApiThemePatchTypeEnum = {
    THEME: "theme",
};
export var JsonApiUserGroupInTypeEnum = {
    USER_GROUP: "userGroup",
};
export var JsonApiUserGroupLinkageTypeEnum = {
    USER_GROUP: "userGroup",
};
export var JsonApiUserGroupOutTypeEnum = {
    USER_GROUP: "userGroup",
};
export var JsonApiUserGroupOutWithLinksTypeEnum = {
    USER_GROUP: "userGroup",
};
export var JsonApiUserGroupPatchTypeEnum = {
    USER_GROUP: "userGroup",
};
export var JsonApiUserInTypeEnum = {
    USER: "user",
};
export var JsonApiUserLinkageTypeEnum = {
    USER: "user",
};
export var JsonApiUserOutTypeEnum = {
    USER: "user",
};
export var JsonApiUserOutWithLinksTypeEnum = {
    USER: "user",
};
export var JsonApiUserPatchTypeEnum = {
    USER: "user",
};
export var JsonApiUserSettingInTypeEnum = {
    USER_SETTING: "userSetting",
};
export var JsonApiUserSettingInAttributesTypeEnum = {
    TIMEZONE: "TIMEZONE",
    ACTIVE_THEME: "ACTIVE_THEME",
    ACTIVE_COLOR_PALETTE: "ACTIVE_COLOR_PALETTE",
    WHITE_LABELING: "WHITE_LABELING",
    LOCALE: "LOCALE",
    FORMAT_LOCALE: "FORMAT_LOCALE",
    MAPBOX_TOKEN: "MAPBOX_TOKEN",
};
export var JsonApiUserSettingOutTypeEnum = {
    USER_SETTING: "userSetting",
};
export var JsonApiUserSettingOutWithLinksTypeEnum = {
    USER_SETTING: "userSetting",
};
export var JsonApiVisualizationObjectInTypeEnum = {
    VISUALIZATION_OBJECT: "visualizationObject",
};
export var JsonApiVisualizationObjectLinkageTypeEnum = {
    VISUALIZATION_OBJECT: "visualizationObject",
};
export var JsonApiVisualizationObjectOutTypeEnum = {
    VISUALIZATION_OBJECT: "visualizationObject",
};
export var JsonApiVisualizationObjectOutWithLinksTypeEnum = {
    VISUALIZATION_OBJECT: "visualizationObject",
};
export var JsonApiVisualizationObjectPatchTypeEnum = {
    VISUALIZATION_OBJECT: "visualizationObject",
};
export var JsonApiWorkspaceDataFilterInTypeEnum = {
    WORKSPACE_DATA_FILTER: "workspaceDataFilter",
};
export var JsonApiWorkspaceDataFilterLinkageTypeEnum = {
    WORKSPACE_DATA_FILTER: "workspaceDataFilter",
};
export var JsonApiWorkspaceDataFilterOutTypeEnum = {
    WORKSPACE_DATA_FILTER: "workspaceDataFilter",
};
export var JsonApiWorkspaceDataFilterOutWithLinksTypeEnum = {
    WORKSPACE_DATA_FILTER: "workspaceDataFilter",
};
export var JsonApiWorkspaceDataFilterPatchTypeEnum = {
    WORKSPACE_DATA_FILTER: "workspaceDataFilter",
};
export var JsonApiWorkspaceDataFilterSettingLinkageTypeEnum = {
    WORKSPACE_DATA_FILTER_SETTING: "workspaceDataFilterSetting",
};
export var JsonApiWorkspaceDataFilterSettingOutTypeEnum = {
    WORKSPACE_DATA_FILTER_SETTING: "workspaceDataFilterSetting",
};
export var JsonApiWorkspaceDataFilterSettingOutWithLinksTypeEnum = {
    WORKSPACE_DATA_FILTER_SETTING: "workspaceDataFilterSetting",
};
export var JsonApiWorkspaceInTypeEnum = {
    WORKSPACE: "workspace",
};
export var JsonApiWorkspaceLinkageTypeEnum = {
    WORKSPACE: "workspace",
};
export var JsonApiWorkspaceOutTypeEnum = {
    WORKSPACE: "workspace",
};
export var JsonApiWorkspaceOutMetaPermissionsEnum = {
    MANAGE: "MANAGE",
    ANALYZE: "ANALYZE",
    EXPORT: "EXPORT",
    EXPORT_TABULAR: "EXPORT_TABULAR",
    EXPORT_PDF: "EXPORT_PDF",
    VIEW: "VIEW",
};
export var JsonApiWorkspaceOutWithLinksTypeEnum = {
    WORKSPACE: "workspace",
};
export var JsonApiWorkspacePatchTypeEnum = {
    WORKSPACE: "workspace",
};
export var JsonApiWorkspaceSettingInTypeEnum = {
    WORKSPACE_SETTING: "workspaceSetting",
};
export var JsonApiWorkspaceSettingOutTypeEnum = {
    WORKSPACE_SETTING: "workspaceSetting",
};
export var JsonApiWorkspaceSettingOutWithLinksTypeEnum = {
    WORKSPACE_SETTING: "workspaceSetting",
};
export var JsonApiWorkspaceSettingPatchTypeEnum = {
    WORKSPACE_SETTING: "workspaceSetting",
};
export var LabelIdentifierTypeEnum = {
    LABEL: "label",
};
export var PermissionsForAssigneePermissionsEnum = {
    EDIT: "EDIT",
    SHARE: "SHARE",
    VIEW: "VIEW",
};
export var PlatformUsageNameEnum = {
    USER_COUNT: "UserCount",
    WORKSPACE_COUNT: "WorkspaceCount",
};
export var PlatformUsageRequestUsageItemNamesEnum = {
    USER_COUNT: "UserCount",
    WORKSPACE_COUNT: "WorkspaceCount",
};
export var ReferenceIdentifierTypeEnum = {
    DATASET: "dataset",
};
export var ResolvedSettingTypeEnum = {
    TIMEZONE: "TIMEZONE",
    ACTIVE_THEME: "ACTIVE_THEME",
    ACTIVE_COLOR_PALETTE: "ACTIVE_COLOR_PALETTE",
    WHITE_LABELING: "WHITE_LABELING",
    LOCALE: "LOCALE",
    FORMAT_LOCALE: "FORMAT_LOCALE",
    MAPBOX_TOKEN: "MAPBOX_TOKEN",
};
export var SqlColumnDataTypeEnum = {
    INT: "INT",
    STRING: "STRING",
    DATE: "DATE",
    NUMERIC: "NUMERIC",
    TIMESTAMP: "TIMESTAMP",
    TIMESTAMP_TZ: "TIMESTAMP_TZ",
    BOOLEAN: "BOOLEAN",
};
export var UserGroupIdentifierTypeEnum = {
    USER_GROUP: "userGroup",
};
export var WorkspaceIdentifierTypeEnum = {
    WORKSPACE: "workspace",
};
/**
 * ActionsApi - axios parameter creator
 * @export
 */
export var ActionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Provides information about platform usage, like amount of users, workspaces, ...
         * @summary Info about the platform usage.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allPlatformUsage: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/actions/collectUsage";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        availableAssignes: function (workspaceId, dashboardId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("availableAssignes", "workspaceId", workspaceId);
                    // verify required parameter 'dashboardId' is not null or undefined
                    assertParamExists("availableAssignes", "dashboardId", dashboardId);
                    localVarPath = "/api/v1/actions/workspaces/{workspaceId}/analyticalDashboards/{dashboardId}/availableAssignees"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "dashboardId" + "}", encodeURIComponent(String(dashboardId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Finds entities with given ID in hierarchy (e.g. to check possible future conflicts).
         * @summary Finds entities with given ID in hierarchy.
         * @param {string} workspaceId
         * @param {Array<HierarchyObjectIdentification>} hierarchyObjectIdentification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkEntityOverrides: function (workspaceId, hierarchyObjectIdentification, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("checkEntityOverrides", "workspaceId", workspaceId);
                    // verify required parameter 'hierarchyObjectIdentification' is not null or undefined
                    assertParamExists("checkEntityOverrides", "hierarchyObjectIdentification", hierarchyObjectIdentification);
                    localVarPath = "/api/v1/actions/workspaces/{workspaceId}/checkEntityOverrides".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof hierarchyObjectIdentification !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(hierarchyObjectIdentification !== undefined ? hierarchyObjectIdentification : {})
                        : hierarchyObjectIdentification || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Generate logical data model (LDM) from physical data model (PDM) stored in data source.
         * @summary Generate logical data model (LDM) from physical data model (PDM)
         * @param {string} dataSourceId
         * @param {GenerateLdmRequest} generateLdmRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateLogicalModel: function (dataSourceId, generateLdmRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'dataSourceId' is not null or undefined
                    assertParamExists("generateLogicalModel", "dataSourceId", dataSourceId);
                    // verify required parameter 'generateLdmRequest' is not null or undefined
                    assertParamExists("generateLogicalModel", "generateLdmRequest", generateLdmRequest);
                    localVarPath = "/api/v1/actions/dataSources/{dataSourceId}/generateLogicalModel".replace("{" + "dataSourceId" + "}", encodeURIComponent(String(dataSourceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof generateLdmRequest !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(generateLdmRequest !== undefined ? generateLdmRequest : {})
                        : generateLdmRequest || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Computes the dependent entities graph
         * @summary Computes the dependent entities graph
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDependentEntitiesGraph: function (workspaceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getDependentEntitiesGraph", "workspaceId", workspaceId);
                    localVarPath = "/api/v1/actions/workspaces/{workspaceId}/dependentEntitiesGraph".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Computes the dependent entities graph from given entry points
         * @summary Computes the dependent entities graph from given entry points
         * @param {string} workspaceId
         * @param {DependentEntitiesRequest} dependentEntitiesRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDependentEntitiesGraphFromEntryPoints: function (workspaceId, dependentEntitiesRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getDependentEntitiesGraphFromEntryPoints", "workspaceId", workspaceId);
                    // verify required parameter 'dependentEntitiesRequest' is not null or undefined
                    assertParamExists("getDependentEntitiesGraphFromEntryPoints", "dependentEntitiesRequest", dependentEntitiesRequest);
                    localVarPath = "/api/v1/actions/workspaces/{workspaceId}/dependentEntitiesGraph".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof dependentEntitiesRequest !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(dependentEntitiesRequest !== undefined ? dependentEntitiesRequest : {})
                        : dependentEntitiesRequest || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Finds API identifier conflicts in given workspace hierarchy.
         * @summary Finds API identifier conflicts in given workspace hierarchy.
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inheritedEntityConflicts: function (workspaceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("inheritedEntityConflicts", "workspaceId", workspaceId);
                    localVarPath = "/api/v1/actions/workspaces/{workspaceId}/inheritedEntityConflicts".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} dashboardId
         * @param {Array<PermissionsForAssignee>} permissionsForAssignee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managePermissions: function (workspaceId, dashboardId, permissionsForAssignee, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("managePermissions", "workspaceId", workspaceId);
                    // verify required parameter 'dashboardId' is not null or undefined
                    assertParamExists("managePermissions", "dashboardId", dashboardId);
                    // verify required parameter 'permissionsForAssignee' is not null or undefined
                    assertParamExists("managePermissions", "permissionsForAssignee", permissionsForAssignee);
                    localVarPath = "/api/v1/actions/workspaces/{workspaceId}/analyticalDashboards/{dashboardId}/managePermissions"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "dashboardId" + "}", encodeURIComponent(String(dashboardId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof permissionsForAssignee !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(permissionsForAssignee !== undefined ? permissionsForAssignee : {})
                        : permissionsForAssignee || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Finds API identifier overrides in given workspace hierarchy.
         * @summary Finds API identifier overrides in given workspace hierarchy.
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        overriddenChildEntities: function (workspaceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("overriddenChildEntities", "workspaceId", workspaceId);
                    localVarPath = "/api/v1/actions/workspaces/{workspaceId}/overriddenChildEntities".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Provides information about platform usage, like amount of users, workspaces, ...
         * @summary Info about the platform usage for particular items.
         * @param {PlatformUsageRequest} platformUsageRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        particularPlatformUsage: function (platformUsageRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'platformUsageRequest' is not null or undefined
                    assertParamExists("particularPlatformUsage", "platformUsageRequest", platformUsageRequest);
                    localVarPath = "/api/v1/actions/collectUsage";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof platformUsageRequest !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(platformUsageRequest !== undefined ? platformUsageRequest : {})
                        : platformUsageRequest || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissions: function (workspaceId, dashboardId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("permissions", "workspaceId", workspaceId);
                    // verify required parameter 'dashboardId' is not null or undefined
                    assertParamExists("permissions", "dashboardId", dashboardId);
                    localVarPath = "/api/v1/actions/workspaces/{workspaceId}/analyticalDashboards/{dashboardId}/permissions"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "dashboardId" + "}", encodeURIComponent(String(dashboardId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Notification sets up all reports to be computed again with new data.
         * @summary Register an upload notification
         * @param {string} dataSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUploadNotification: function (dataSourceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'dataSourceId' is not null or undefined
                    assertParamExists("registerUploadNotification", "dataSourceId", dataSourceId);
                    localVarPath = "/api/v1/actions/dataSources/{dataSourceId}/uploadNotification".replace("{" + "dataSourceId" + "}", encodeURIComponent(String(dataSourceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Resolves values of available entitlements for the organization.
         * @summary Values for all public entitlements.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveAllEntitlements: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/actions/resolveEntitlements";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Resolves values for all settings without workspace by current user, organization, or default settings.
         * @summary Values for all settings without workspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveAllSettingsWithoutWorkspace: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/actions/resolveSettings";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Resolves values for requested entitlements in the organization.
         * @summary Values for requested public entitlements.
         * @param {EntitlementsRequest} entitlementsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveRequestedEntitlements: function (entitlementsRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'entitlementsRequest' is not null or undefined
                    assertParamExists("resolveRequestedEntitlements", "entitlementsRequest", entitlementsRequest);
                    localVarPath = "/api/v1/actions/resolveEntitlements";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof entitlementsRequest !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(entitlementsRequest !== undefined ? entitlementsRequest : {})
                        : entitlementsRequest || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Resolves values for selected settings without workspace by current user, organization, or default settings.
         * @summary Values for selected settings without workspace.
         * @param {ResolveSettingsRequest} resolveSettingsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveSettingsWithoutWorkspace: function (resolveSettingsRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'resolveSettingsRequest' is not null or undefined
                    assertParamExists("resolveSettingsWithoutWorkspace", "resolveSettingsRequest", resolveSettingsRequest);
                    localVarPath = "/api/v1/actions/resolveSettings";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof resolveSettingsRequest !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(resolveSettingsRequest !== undefined ? resolveSettingsRequest : {})
                        : resolveSettingsRequest || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Resolves values for all settings in a workspace by current user, workspace, organization, or default settings.
         * @summary Values for all settings.
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceResolveAllSettings: function (workspaceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("workspaceResolveAllSettings", "workspaceId", workspaceId);
                    localVarPath = "/api/v1/actions/workspaces/{workspaceId}/resolveSettings".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Resolves value for selected settings in a workspace by current user, workspace, organization, or default settings.
         * @summary Values for selected settings.
         * @param {string} workspaceId
         * @param {ResolveSettingsRequest} resolveSettingsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceResolveSettings: function (workspaceId, resolveSettingsRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("workspaceResolveSettings", "workspaceId", workspaceId);
                    // verify required parameter 'resolveSettingsRequest' is not null or undefined
                    assertParamExists("workspaceResolveSettings", "resolveSettingsRequest", resolveSettingsRequest);
                    localVarPath = "/api/v1/actions/workspaces/{workspaceId}/resolveSettings".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof resolveSettingsRequest !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(resolveSettingsRequest !== undefined ? resolveSettingsRequest : {})
                        : resolveSettingsRequest || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * ActionsApi - functional programming interface
 * @export
 */
export var ActionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = ActionsApiAxiosParamCreator(configuration);
    return {
        /**
         * Provides information about platform usage, like amount of users, workspaces, ...
         * @summary Info about the platform usage.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allPlatformUsage: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.allPlatformUsage(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        availableAssignes: function (workspaceId, dashboardId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.availableAssignes(workspaceId, dashboardId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Finds entities with given ID in hierarchy (e.g. to check possible future conflicts).
         * @summary Finds entities with given ID in hierarchy.
         * @param {string} workspaceId
         * @param {Array<HierarchyObjectIdentification>} hierarchyObjectIdentification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkEntityOverrides: function (workspaceId, hierarchyObjectIdentification, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.checkEntityOverrides(workspaceId, hierarchyObjectIdentification, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Generate logical data model (LDM) from physical data model (PDM) stored in data source.
         * @summary Generate logical data model (LDM) from physical data model (PDM)
         * @param {string} dataSourceId
         * @param {GenerateLdmRequest} generateLdmRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateLogicalModel: function (dataSourceId, generateLdmRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.generateLogicalModel(dataSourceId, generateLdmRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Computes the dependent entities graph
         * @summary Computes the dependent entities graph
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDependentEntitiesGraph: function (workspaceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDependentEntitiesGraph(workspaceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Computes the dependent entities graph from given entry points
         * @summary Computes the dependent entities graph from given entry points
         * @param {string} workspaceId
         * @param {DependentEntitiesRequest} dependentEntitiesRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDependentEntitiesGraphFromEntryPoints: function (workspaceId, dependentEntitiesRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDependentEntitiesGraphFromEntryPoints(workspaceId, dependentEntitiesRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Finds API identifier conflicts in given workspace hierarchy.
         * @summary Finds API identifier conflicts in given workspace hierarchy.
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inheritedEntityConflicts: function (workspaceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.inheritedEntityConflicts(workspaceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} dashboardId
         * @param {Array<PermissionsForAssignee>} permissionsForAssignee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managePermissions: function (workspaceId, dashboardId, permissionsForAssignee, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.managePermissions(workspaceId, dashboardId, permissionsForAssignee, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Finds API identifier overrides in given workspace hierarchy.
         * @summary Finds API identifier overrides in given workspace hierarchy.
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        overriddenChildEntities: function (workspaceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.overriddenChildEntities(workspaceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Provides information about platform usage, like amount of users, workspaces, ...
         * @summary Info about the platform usage for particular items.
         * @param {PlatformUsageRequest} platformUsageRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        particularPlatformUsage: function (platformUsageRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.particularPlatformUsage(platformUsageRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} dashboardId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissions: function (workspaceId, dashboardId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.permissions(workspaceId, dashboardId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Notification sets up all reports to be computed again with new data.
         * @summary Register an upload notification
         * @param {string} dataSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUploadNotification: function (dataSourceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.registerUploadNotification(dataSourceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Resolves values of available entitlements for the organization.
         * @summary Values for all public entitlements.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveAllEntitlements: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.resolveAllEntitlements(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Resolves values for all settings without workspace by current user, organization, or default settings.
         * @summary Values for all settings without workspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveAllSettingsWithoutWorkspace: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.resolveAllSettingsWithoutWorkspace(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Resolves values for requested entitlements in the organization.
         * @summary Values for requested public entitlements.
         * @param {EntitlementsRequest} entitlementsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveRequestedEntitlements: function (entitlementsRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.resolveRequestedEntitlements(entitlementsRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Resolves values for selected settings without workspace by current user, organization, or default settings.
         * @summary Values for selected settings without workspace.
         * @param {ResolveSettingsRequest} resolveSettingsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveSettingsWithoutWorkspace: function (resolveSettingsRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.resolveSettingsWithoutWorkspace(resolveSettingsRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Resolves values for all settings in a workspace by current user, workspace, organization, or default settings.
         * @summary Values for all settings.
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceResolveAllSettings: function (workspaceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workspaceResolveAllSettings(workspaceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Resolves value for selected settings in a workspace by current user, workspace, organization, or default settings.
         * @summary Values for selected settings.
         * @param {string} workspaceId
         * @param {ResolveSettingsRequest} resolveSettingsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceResolveSettings: function (workspaceId, resolveSettingsRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workspaceResolveSettings(workspaceId, resolveSettingsRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * ActionsApi - factory interface
 * @export
 */
export var ActionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = ActionsApiFp(configuration);
    return {
        /**
         * Provides information about platform usage, like amount of users, workspaces, ...
         * @summary Info about the platform usage.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allPlatformUsage: function (options) {
            return localVarFp.allPlatformUsage(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {ActionsApiAvailableAssignesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        availableAssignes: function (requestParameters, options) {
            return localVarFp
                .availableAssignes(requestParameters.workspaceId, requestParameters.dashboardId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Finds entities with given ID in hierarchy (e.g. to check possible future conflicts).
         * @summary Finds entities with given ID in hierarchy.
         * @param {ActionsApiCheckEntityOverridesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkEntityOverrides: function (requestParameters, options) {
            return localVarFp
                .checkEntityOverrides(requestParameters.workspaceId, requestParameters.hierarchyObjectIdentification, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Generate logical data model (LDM) from physical data model (PDM) stored in data source.
         * @summary Generate logical data model (LDM) from physical data model (PDM)
         * @param {ActionsApiGenerateLogicalModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateLogicalModel: function (requestParameters, options) {
            return localVarFp
                .generateLogicalModel(requestParameters.dataSourceId, requestParameters.generateLdmRequest, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Computes the dependent entities graph
         * @summary Computes the dependent entities graph
         * @param {ActionsApiGetDependentEntitiesGraphRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDependentEntitiesGraph: function (requestParameters, options) {
            return localVarFp
                .getDependentEntitiesGraph(requestParameters.workspaceId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Computes the dependent entities graph from given entry points
         * @summary Computes the dependent entities graph from given entry points
         * @param {ActionsApiGetDependentEntitiesGraphFromEntryPointsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDependentEntitiesGraphFromEntryPoints: function (requestParameters, options) {
            return localVarFp
                .getDependentEntitiesGraphFromEntryPoints(requestParameters.workspaceId, requestParameters.dependentEntitiesRequest, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Finds API identifier conflicts in given workspace hierarchy.
         * @summary Finds API identifier conflicts in given workspace hierarchy.
         * @param {ActionsApiInheritedEntityConflictsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inheritedEntityConflicts: function (requestParameters, options) {
            return localVarFp
                .inheritedEntityConflicts(requestParameters.workspaceId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {ActionsApiManagePermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managePermissions: function (requestParameters, options) {
            return localVarFp
                .managePermissions(requestParameters.workspaceId, requestParameters.dashboardId, requestParameters.permissionsForAssignee, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Finds API identifier overrides in given workspace hierarchy.
         * @summary Finds API identifier overrides in given workspace hierarchy.
         * @param {ActionsApiOverriddenChildEntitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        overriddenChildEntities: function (requestParameters, options) {
            return localVarFp
                .overriddenChildEntities(requestParameters.workspaceId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provides information about platform usage, like amount of users, workspaces, ...
         * @summary Info about the platform usage for particular items.
         * @param {ActionsApiParticularPlatformUsageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        particularPlatformUsage: function (requestParameters, options) {
            return localVarFp
                .particularPlatformUsage(requestParameters.platformUsageRequest, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {ActionsApiPermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissions: function (requestParameters, options) {
            return localVarFp
                .permissions(requestParameters.workspaceId, requestParameters.dashboardId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Notification sets up all reports to be computed again with new data.
         * @summary Register an upload notification
         * @param {ActionsApiRegisterUploadNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUploadNotification: function (requestParameters, options) {
            return localVarFp
                .registerUploadNotification(requestParameters.dataSourceId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Resolves values of available entitlements for the organization.
         * @summary Values for all public entitlements.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveAllEntitlements: function (options) {
            return localVarFp.resolveAllEntitlements(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Resolves values for all settings without workspace by current user, organization, or default settings.
         * @summary Values for all settings without workspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveAllSettingsWithoutWorkspace: function (options) {
            return localVarFp
                .resolveAllSettingsWithoutWorkspace(options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Resolves values for requested entitlements in the organization.
         * @summary Values for requested public entitlements.
         * @param {ActionsApiResolveRequestedEntitlementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveRequestedEntitlements: function (requestParameters, options) {
            return localVarFp
                .resolveRequestedEntitlements(requestParameters.entitlementsRequest, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Resolves values for selected settings without workspace by current user, organization, or default settings.
         * @summary Values for selected settings without workspace.
         * @param {ActionsApiResolveSettingsWithoutWorkspaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveSettingsWithoutWorkspace: function (requestParameters, options) {
            return localVarFp
                .resolveSettingsWithoutWorkspace(requestParameters.resolveSettingsRequest, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Resolves values for all settings in a workspace by current user, workspace, organization, or default settings.
         * @summary Values for all settings.
         * @param {ActionsApiWorkspaceResolveAllSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceResolveAllSettings: function (requestParameters, options) {
            return localVarFp
                .workspaceResolveAllSettings(requestParameters.workspaceId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Resolves value for selected settings in a workspace by current user, workspace, organization, or default settings.
         * @summary Values for selected settings.
         * @param {ActionsApiWorkspaceResolveSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceResolveSettings: function (requestParameters, options) {
            return localVarFp
                .workspaceResolveSettings(requestParameters.workspaceId, requestParameters.resolveSettingsRequest, options)
                .then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ActionsApi - object-oriented interface
 * @export
 * @class ActionsApi
 * @extends {BaseAPI}
 */
var ActionsApi = /** @class */ (function (_super) {
    __extends(ActionsApi, _super);
    function ActionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.allPlatformUsage = function (options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .allPlatformUsage(options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {ActionsApiAvailableAssignesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.availableAssignes = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .availableAssignes(requestParameters.workspaceId, requestParameters.dashboardId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Finds entities with given ID in hierarchy (e.g. to check possible future conflicts).
     * @summary Finds entities with given ID in hierarchy.
     * @param {ActionsApiCheckEntityOverridesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.checkEntityOverrides = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .checkEntityOverrides(requestParameters.workspaceId, requestParameters.hierarchyObjectIdentification, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Generate logical data model (LDM) from physical data model (PDM) stored in data source.
     * @summary Generate logical data model (LDM) from physical data model (PDM)
     * @param {ActionsApiGenerateLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.generateLogicalModel = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .generateLogicalModel(requestParameters.dataSourceId, requestParameters.generateLdmRequest, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Computes the dependent entities graph
     * @summary Computes the dependent entities graph
     * @param {ActionsApiGetDependentEntitiesGraphRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.getDependentEntitiesGraph = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .getDependentEntitiesGraph(requestParameters.workspaceId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Computes the dependent entities graph from given entry points
     * @summary Computes the dependent entities graph from given entry points
     * @param {ActionsApiGetDependentEntitiesGraphFromEntryPointsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.getDependentEntitiesGraphFromEntryPoints = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .getDependentEntitiesGraphFromEntryPoints(requestParameters.workspaceId, requestParameters.dependentEntitiesRequest, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Finds API identifier conflicts in given workspace hierarchy.
     * @summary Finds API identifier conflicts in given workspace hierarchy.
     * @param {ActionsApiInheritedEntityConflictsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.inheritedEntityConflicts = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .inheritedEntityConflicts(requestParameters.workspaceId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {ActionsApiManagePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.managePermissions = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .managePermissions(requestParameters.workspaceId, requestParameters.dashboardId, requestParameters.permissionsForAssignee, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Finds API identifier overrides in given workspace hierarchy.
     * @summary Finds API identifier overrides in given workspace hierarchy.
     * @param {ActionsApiOverriddenChildEntitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.overriddenChildEntities = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .overriddenChildEntities(requestParameters.workspaceId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage for particular items.
     * @param {ActionsApiParticularPlatformUsageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.particularPlatformUsage = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .particularPlatformUsage(requestParameters.platformUsageRequest, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {ActionsApiPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.permissions = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .permissions(requestParameters.workspaceId, requestParameters.dashboardId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {ActionsApiRegisterUploadNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.registerUploadNotification = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .registerUploadNotification(requestParameters.dataSourceId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Resolves values of available entitlements for the organization.
     * @summary Values for all public entitlements.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.resolveAllEntitlements = function (options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .resolveAllEntitlements(options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Resolves values for all settings without workspace by current user, organization, or default settings.
     * @summary Values for all settings without workspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.resolveAllSettingsWithoutWorkspace = function (options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .resolveAllSettingsWithoutWorkspace(options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Resolves values for requested entitlements in the organization.
     * @summary Values for requested public entitlements.
     * @param {ActionsApiResolveRequestedEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.resolveRequestedEntitlements = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .resolveRequestedEntitlements(requestParameters.entitlementsRequest, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Resolves values for selected settings without workspace by current user, organization, or default settings.
     * @summary Values for selected settings without workspace.
     * @param {ActionsApiResolveSettingsWithoutWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.resolveSettingsWithoutWorkspace = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .resolveSettingsWithoutWorkspace(requestParameters.resolveSettingsRequest, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Resolves values for all settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for all settings.
     * @param {ActionsApiWorkspaceResolveAllSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.workspaceResolveAllSettings = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .workspaceResolveAllSettings(requestParameters.workspaceId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Resolves value for selected settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for selected settings.
     * @param {ActionsApiWorkspaceResolveSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.workspaceResolveSettings = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .workspaceResolveSettings(requestParameters.workspaceId, requestParameters.resolveSettingsRequest, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ActionsApi;
}(BaseAPI));
export { ActionsApi };
/**
 * EntitiesApi - axios parameter creator
 * @export
 */
export var EntitiesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAnalyticalDashboards: function (workspaceId, jsonApiAnalyticalDashboardInDocument, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("createEntityAnalyticalDashboards", "workspaceId", workspaceId);
                    // verify required parameter 'jsonApiAnalyticalDashboardInDocument' is not null or undefined
                    assertParamExists("createEntityAnalyticalDashboards", "jsonApiAnalyticalDashboardInDocument", jsonApiAnalyticalDashboardInDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/analyticalDashboards".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiAnalyticalDashboardInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiAnalyticalDashboardInDocument !== undefined
                            ? jsonApiAnalyticalDashboardInDocument
                            : {})
                        : jsonApiAnalyticalDashboardInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} userId
         * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityApiTokens: function (userId, jsonApiApiTokenInDocument, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    assertParamExists("createEntityApiTokens", "userId", userId);
                    // verify required parameter 'jsonApiApiTokenInDocument' is not null or undefined
                    assertParamExists("createEntityApiTokens", "jsonApiApiTokenInDocument", jsonApiApiTokenInDocument);
                    localVarPath = "/api/v1/entities/users/{userId}/apiTokens".replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiApiTokenInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiApiTokenInDocument !== undefined ? jsonApiApiTokenInDocument : {})
                        : jsonApiApiTokenInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {JsonApiColorPaletteInDocument} jsonApiColorPaletteInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityColorPalettes: function (jsonApiColorPaletteInDocument, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'jsonApiColorPaletteInDocument' is not null or undefined
                    assertParamExists("createEntityColorPalettes", "jsonApiColorPaletteInDocument", jsonApiColorPaletteInDocument);
                    localVarPath = "/api/v1/entities/colorPalettes";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiColorPaletteInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiColorPaletteInDocument !== undefined ? jsonApiColorPaletteInDocument : {})
                        : jsonApiColorPaletteInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {JsonApiCspDirectiveInDocument} jsonApiCspDirectiveInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityCspDirectives: function (jsonApiCspDirectiveInDocument, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'jsonApiCspDirectiveInDocument' is not null or undefined
                    assertParamExists("createEntityCspDirectives", "jsonApiCspDirectiveInDocument", jsonApiCspDirectiveInDocument);
                    localVarPath = "/api/v1/entities/cspDirectives";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiCspDirectiveInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiCspDirectiveInDocument !== undefined ? jsonApiCspDirectiveInDocument : {})
                        : jsonApiCspDirectiveInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiCustomApplicationSettingInDocument} jsonApiCustomApplicationSettingInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityCustomApplicationSettings: function (workspaceId, jsonApiCustomApplicationSettingInDocument, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("createEntityCustomApplicationSettings", "workspaceId", workspaceId);
                    // verify required parameter 'jsonApiCustomApplicationSettingInDocument' is not null or undefined
                    assertParamExists("createEntityCustomApplicationSettings", "jsonApiCustomApplicationSettingInDocument", jsonApiCustomApplicationSettingInDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/customApplicationSettings".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiCustomApplicationSettingInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiCustomApplicationSettingInDocument !== undefined
                            ? jsonApiCustomApplicationSettingInDocument
                            : {})
                        : jsonApiCustomApplicationSettingInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityDashboardPlugins: function (workspaceId, jsonApiDashboardPluginInDocument, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("createEntityDashboardPlugins", "workspaceId", workspaceId);
                    // verify required parameter 'jsonApiDashboardPluginInDocument' is not null or undefined
                    assertParamExists("createEntityDashboardPlugins", "jsonApiDashboardPluginInDocument", jsonApiDashboardPluginInDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/dashboardPlugins".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiDashboardPluginInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiDashboardPluginInDocument !== undefined ? jsonApiDashboardPluginInDocument : {})
                        : jsonApiDashboardPluginInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityDataSources: function (jsonApiDataSourceInDocument, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'jsonApiDataSourceInDocument' is not null or undefined
                    assertParamExists("createEntityDataSources", "jsonApiDataSourceInDocument", jsonApiDataSourceInDocument);
                    localVarPath = "/api/v1/entities/dataSources";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiDataSourceInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiDataSourceInDocument !== undefined ? jsonApiDataSourceInDocument : {})
                        : jsonApiDataSourceInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityFilterContexts: function (workspaceId, jsonApiFilterContextInDocument, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("createEntityFilterContexts", "workspaceId", workspaceId);
                    // verify required parameter 'jsonApiFilterContextInDocument' is not null or undefined
                    assertParamExists("createEntityFilterContexts", "jsonApiFilterContextInDocument", jsonApiFilterContextInDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/filterContexts".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiFilterContextInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiFilterContextInDocument !== undefined ? jsonApiFilterContextInDocument : {})
                        : jsonApiFilterContextInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityMetrics: function (workspaceId, jsonApiMetricInDocument, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("createEntityMetrics", "workspaceId", workspaceId);
                    // verify required parameter 'jsonApiMetricInDocument' is not null or undefined
                    assertParamExists("createEntityMetrics", "jsonApiMetricInDocument", jsonApiMetricInDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/metrics".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiMetricInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiMetricInDocument !== undefined ? jsonApiMetricInDocument : {})
                        : jsonApiMetricInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {JsonApiOrganizationSettingInDocument} jsonApiOrganizationSettingInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityOrganizationSettings: function (jsonApiOrganizationSettingInDocument, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'jsonApiOrganizationSettingInDocument' is not null or undefined
                    assertParamExists("createEntityOrganizationSettings", "jsonApiOrganizationSettingInDocument", jsonApiOrganizationSettingInDocument);
                    localVarPath = "/api/v1/entities/organizationSettings";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiOrganizationSettingInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiOrganizationSettingInDocument !== undefined
                            ? jsonApiOrganizationSettingInDocument
                            : {})
                        : jsonApiOrganizationSettingInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {JsonApiThemeInDocument} jsonApiThemeInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityThemes: function (jsonApiThemeInDocument, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'jsonApiThemeInDocument' is not null or undefined
                    assertParamExists("createEntityThemes", "jsonApiThemeInDocument", jsonApiThemeInDocument);
                    localVarPath = "/api/v1/entities/themes";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiThemeInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiThemeInDocument !== undefined ? jsonApiThemeInDocument : {})
                        : jsonApiThemeInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUserGroups: function (jsonApiUserGroupInDocument, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'jsonApiUserGroupInDocument' is not null or undefined
                    assertParamExists("createEntityUserGroups", "jsonApiUserGroupInDocument", jsonApiUserGroupInDocument);
                    localVarPath = "/api/v1/entities/userGroups";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiUserGroupInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiUserGroupInDocument !== undefined ? jsonApiUserGroupInDocument : {})
                        : jsonApiUserGroupInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} userId
         * @param {JsonApiUserSettingInDocument} jsonApiUserSettingInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUserSettings: function (userId, jsonApiUserSettingInDocument, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    assertParamExists("createEntityUserSettings", "userId", userId);
                    // verify required parameter 'jsonApiUserSettingInDocument' is not null or undefined
                    assertParamExists("createEntityUserSettings", "jsonApiUserSettingInDocument", jsonApiUserSettingInDocument);
                    localVarPath = "/api/v1/entities/users/{userId}/userSettings".replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiUserSettingInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiUserSettingInDocument !== undefined ? jsonApiUserSettingInDocument : {})
                        : jsonApiUserSettingInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUsers: function (jsonApiUserInDocument, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'jsonApiUserInDocument' is not null or undefined
                    assertParamExists("createEntityUsers", "jsonApiUserInDocument", jsonApiUserInDocument);
                    localVarPath = "/api/v1/entities/users";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiUserInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiUserInDocument !== undefined ? jsonApiUserInDocument : {})
                        : jsonApiUserInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityVisualizationObjects: function (workspaceId, jsonApiVisualizationObjectInDocument, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("createEntityVisualizationObjects", "workspaceId", workspaceId);
                    // verify required parameter 'jsonApiVisualizationObjectInDocument' is not null or undefined
                    assertParamExists("createEntityVisualizationObjects", "jsonApiVisualizationObjectInDocument", jsonApiVisualizationObjectInDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/visualizationObjects".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiVisualizationObjectInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiVisualizationObjectInDocument !== undefined
                            ? jsonApiVisualizationObjectInDocument
                            : {})
                        : jsonApiVisualizationObjectInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
         * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaceDataFilters: function (workspaceId, jsonApiWorkspaceDataFilterInDocument, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("createEntityWorkspaceDataFilters", "workspaceId", workspaceId);
                    // verify required parameter 'jsonApiWorkspaceDataFilterInDocument' is not null or undefined
                    assertParamExists("createEntityWorkspaceDataFilters", "jsonApiWorkspaceDataFilterInDocument", jsonApiWorkspaceDataFilterInDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilters".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiWorkspaceDataFilterInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiWorkspaceDataFilterInDocument !== undefined
                            ? jsonApiWorkspaceDataFilterInDocument
                            : {})
                        : jsonApiWorkspaceDataFilterInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiWorkspaceSettingInDocument} jsonApiWorkspaceSettingInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaceSettings: function (workspaceId, jsonApiWorkspaceSettingInDocument, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("createEntityWorkspaceSettings", "workspaceId", workspaceId);
                    // verify required parameter 'jsonApiWorkspaceSettingInDocument' is not null or undefined
                    assertParamExists("createEntityWorkspaceSettings", "jsonApiWorkspaceSettingInDocument", jsonApiWorkspaceSettingInDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/workspaceSettings".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiWorkspaceSettingInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiWorkspaceSettingInDocument !== undefined
                            ? jsonApiWorkspaceSettingInDocument
                            : {})
                        : jsonApiWorkspaceSettingInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaces: function (jsonApiWorkspaceInDocument, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'jsonApiWorkspaceInDocument' is not null or undefined
                    assertParamExists("createEntityWorkspaces", "jsonApiWorkspaceInDocument", jsonApiWorkspaceInDocument);
                    localVarPath = "/api/v1/entities/workspaces";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiWorkspaceInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiWorkspaceInDocument !== undefined ? jsonApiWorkspaceInDocument : {})
                        : jsonApiWorkspaceInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAnalyticalDashboards: function (workspaceId, objectId, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("deleteEntityAnalyticalDashboards", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("deleteEntityAnalyticalDashboards", "objectId", objectId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/analyticalDashboards/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityApiTokens: function (userId, id, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    assertParamExists("deleteEntityApiTokens", "userId", userId);
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("deleteEntityApiTokens", "id", id);
                    localVarPath = "/api/v1/entities/users/{userId}/apiTokens/{id}"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)))
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityColorPalettes: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("deleteEntityColorPalettes", "id", id);
                    localVarPath = "/api/v1/entities/colorPalettes/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityCspDirectives: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("deleteEntityCspDirectives", "id", id);
                    localVarPath = "/api/v1/entities/cspDirectives/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityCustomApplicationSettings: function (workspaceId, objectId, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("deleteEntityCustomApplicationSettings", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("deleteEntityCustomApplicationSettings", "objectId", objectId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/customApplicationSettings/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityDashboardPlugins: function (workspaceId, objectId, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("deleteEntityDashboardPlugins", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("deleteEntityDashboardPlugins", "objectId", objectId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/dashboardPlugins/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityDataSources: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("deleteEntityDataSources", "id", id);
                    localVarPath = "/api/v1/entities/dataSources/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityFilterContexts: function (workspaceId, objectId, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("deleteEntityFilterContexts", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("deleteEntityFilterContexts", "objectId", objectId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/filterContexts/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityMetrics: function (workspaceId, objectId, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("deleteEntityMetrics", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("deleteEntityMetrics", "objectId", objectId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/metrics/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityOrganizationSettings: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("deleteEntityOrganizationSettings", "id", id);
                    localVarPath = "/api/v1/entities/organizationSettings/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityThemes: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("deleteEntityThemes", "id", id);
                    localVarPath = "/api/v1/entities/themes/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUserGroups: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("deleteEntityUserGroups", "id", id);
                    localVarPath = "/api/v1/entities/userGroups/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUserSettings: function (userId, id, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    assertParamExists("deleteEntityUserSettings", "userId", userId);
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("deleteEntityUserSettings", "id", id);
                    localVarPath = "/api/v1/entities/users/{userId}/userSettings/{id}"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)))
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUsers: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("deleteEntityUsers", "id", id);
                    localVarPath = "/api/v1/entities/users/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityVisualizationObjects: function (workspaceId, objectId, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("deleteEntityVisualizationObjects", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("deleteEntityVisualizationObjects", "objectId", objectId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/visualizationObjects/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaceDataFilters: function (workspaceId, objectId, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("deleteEntityWorkspaceDataFilters", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("deleteEntityWorkspaceDataFilters", "objectId", objectId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilters/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaceSettings: function (workspaceId, objectId, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("deleteEntityWorkspaceSettings", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("deleteEntityWorkspaceSettings", "objectId", objectId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/workspaceSettings/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaces: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("deleteEntityWorkspaces", "id", id);
                    localVarPath = "/api/v1/entities/workspaces/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAnalyticalDashboards: function (workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getAllEntitiesAnalyticalDashboards", "workspaceId", workspaceId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/analyticalDashboards".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (origin !== undefined) {
                        localVarQueryParameter["origin"] = origin;
                    }
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary List all api tokens for a user
         * @param {string} userId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesApiTokens: function (userId, filter, page, size, sort, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    assertParamExists("getAllEntitiesApiTokens", "userId", userId);
                    localVarPath = "/api/v1/entities/users/{userId}/apiTokens".replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'datasets' | 'labels' | 'dataset' | 'defaultView' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAttributes: function (workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getAllEntitiesAttributes", "workspaceId", workspaceId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/attributes".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (origin !== undefined) {
                        localVarQueryParameter["origin"] = origin;
                    }
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesColorPalettes: function (filter, page, size, sort, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/entities/colorPalettes";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesCspDirectives: function (filter, page, size, sort, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/entities/cspDirectives";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesCustomApplicationSettings: function (workspaceId, origin, filter, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getAllEntitiesCustomApplicationSettings", "workspaceId", workspaceId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/customApplicationSettings".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (origin !== undefined) {
                        localVarQueryParameter["origin"] = origin;
                    }
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDashboardPlugins: function (workspaceId, origin, filter, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getAllEntitiesDashboardPlugins", "workspaceId", workspaceId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/dashboardPlugins".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (origin !== undefined) {
                        localVarQueryParameter["origin"] = origin;
                    }
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSourceIdentifiers: function (filter, page, size, sort, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/entities/dataSourceIdentifiers";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} dataSourceId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSourceTables: function (dataSourceId, filter, page, size, sort, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'dataSourceId' is not null or undefined
                    assertParamExists("getAllEntitiesDataSourceTables", "dataSourceId", dataSourceId);
                    localVarPath = "/api/v1/entities/dataSources/{dataSourceId}/dataSourceTables".replace("{" + "dataSourceId" + "}", encodeURIComponent(String(dataSourceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSources: function (filter, page, size, sort, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/entities/dataSources";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDatasets: function (workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getAllEntitiesDatasets", "workspaceId", workspaceId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/datasets".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (origin !== undefined) {
                        localVarQueryParameter["origin"] = origin;
                    }
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesEntitlements: function (filter, page, size, sort, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/entities/entitlements";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesFacts: function (workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getAllEntitiesFacts", "workspaceId", workspaceId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/facts".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (origin !== undefined) {
                        localVarQueryParameter["origin"] = origin;
                    }
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesFilterContexts: function (workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getAllEntitiesFilterContexts", "workspaceId", workspaceId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/filterContexts".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (origin !== undefined) {
                        localVarQueryParameter["origin"] = origin;
                    }
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesLabels: function (workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getAllEntitiesLabels", "workspaceId", workspaceId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/labels".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (origin !== undefined) {
                        localVarQueryParameter["origin"] = origin;
                    }
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesMetrics: function (workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getAllEntitiesMetrics", "workspaceId", workspaceId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/metrics".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (origin !== undefined) {
                        localVarQueryParameter["origin"] = origin;
                    }
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesOrganizationSettings: function (filter, page, size, sort, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/entities/organizationSettings";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesThemes: function (filter, page, size, sort, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/entities/themes";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUserGroups: function (filter, include, page, size, sort, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/entities/userGroups";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary List all settings for a user
         * @param {string} userId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUserSettings: function (userId, filter, page, size, sort, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    assertParamExists("getAllEntitiesUserSettings", "userId", userId);
                    localVarPath = "/api/v1/entities/users/{userId}/userSettings".replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUsers: function (filter, include, page, size, sort, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/entities/users";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesVisualizationObjects: function (workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getAllEntitiesVisualizationObjects", "workspaceId", workspaceId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/visualizationObjects".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (origin !== undefined) {
                        localVarQueryParameter["origin"] = origin;
                    }
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaceDataFilterSettings: function (workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getAllEntitiesWorkspaceDataFilterSettings", "workspaceId", workspaceId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilterSettings".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (origin !== undefined) {
                        localVarQueryParameter["origin"] = origin;
                    }
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaceDataFilters: function (workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getAllEntitiesWorkspaceDataFilters", "workspaceId", workspaceId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilters".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (origin !== undefined) {
                        localVarQueryParameter["origin"] = origin;
                    }
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaceSettings: function (workspaceId, origin, filter, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getAllEntitiesWorkspaceSettings", "workspaceId", workspaceId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/workspaceSettings".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (origin !== undefined) {
                        localVarQueryParameter["origin"] = origin;
                    }
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaces: function (filter, include, page, size, sort, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/entities/workspaces";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (page !== undefined) {
                        localVarQueryParameter["page"] = page;
                    }
                    if (size !== undefined) {
                        localVarQueryParameter["size"] = size;
                    }
                    if (sort) {
                        localVarQueryParameter["sort"] = sort;
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves links for all options for different configurations.
         * @summary Links for all configuration options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOptions: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/options";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieves a list of all supported data sources along with information about the used drivers.
         * @summary Get all available data source drivers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourceDrivers: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/options/availableDrivers";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAnalyticalDashboards: function (workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getEntityAnalyticalDashboards", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("getEntityAnalyticalDashboards", "objectId", objectId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/analyticalDashboards/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityApiTokens: function (userId, id, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    assertParamExists("getEntityApiTokens", "userId", userId);
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("getEntityApiTokens", "id", id);
                    localVarPath = "/api/v1/entities/users/{userId}/apiTokens/{id}"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)))
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'datasets' | 'labels' | 'dataset' | 'defaultView' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAttributes: function (workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getEntityAttributes", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("getEntityAttributes", "objectId", objectId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/attributes/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityColorPalettes: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("getEntityColorPalettes", "id", id);
                    localVarPath = "/api/v1/entities/colorPalettes/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityCookieSecurityConfigurations: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("getEntityCookieSecurityConfigurations", "id", id);
                    localVarPath = "/api/v1/entities/admin/cookieSecurityConfigurations/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityCspDirectives: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("getEntityCspDirectives", "id", id);
                    localVarPath = "/api/v1/entities/cspDirectives/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityCustomApplicationSettings: function (workspaceId, objectId, filter, xGDCVALIDATERELATIONS, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getEntityCustomApplicationSettings", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("getEntityCustomApplicationSettings", "objectId", objectId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/customApplicationSettings/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDashboardPlugins: function (workspaceId, objectId, filter, xGDCVALIDATERELATIONS, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getEntityDashboardPlugins", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("getEntityDashboardPlugins", "objectId", objectId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/dashboardPlugins/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSourceIdentifiers: function (id, filter, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("getEntityDataSourceIdentifiers", "id", id);
                    localVarPath = "/api/v1/entities/dataSourceIdentifiers/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} dataSourceId
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSourceTables: function (dataSourceId, id, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'dataSourceId' is not null or undefined
                    assertParamExists("getEntityDataSourceTables", "dataSourceId", dataSourceId);
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("getEntityDataSourceTables", "id", id);
                    localVarPath = "/api/v1/entities/dataSources/{dataSourceId}/dataSourceTables/{id}"
                        .replace("{" + "dataSourceId" + "}", encodeURIComponent(String(dataSourceId)))
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSources: function (id, filter, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("getEntityDataSources", "id", id);
                    localVarPath = "/api/v1/entities/dataSources/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDatasets: function (workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getEntityDatasets", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("getEntityDatasets", "objectId", objectId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/datasets/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityEntitlements: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("getEntityEntitlements", "id", id);
                    localVarPath = "/api/v1/entities/entitlements/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFacts: function (workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getEntityFacts", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("getEntityFacts", "objectId", objectId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/facts/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFilterContexts: function (workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getEntityFilterContexts", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("getEntityFilterContexts", "objectId", objectId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/filterContexts/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityLabels: function (workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getEntityLabels", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("getEntityLabels", "objectId", objectId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/labels/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityMetrics: function (workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getEntityMetrics", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("getEntityMetrics", "objectId", objectId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/metrics/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityOrganizationSettings: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("getEntityOrganizationSettings", "id", id);
                    localVarPath = "/api/v1/entities/organizationSettings/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityOrganizations: function (id, filter, include, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("getEntityOrganizations", "id", id);
                    localVarPath = "/api/v1/entities/admin/organizations/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityThemes: function (id, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("getEntityThemes", "id", id);
                    localVarPath = "/api/v1/entities/themes/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUserGroups: function (id, filter, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("getEntityUserGroups", "id", id);
                    localVarPath = "/api/v1/entities/userGroups/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUserSettings: function (userId, id, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    assertParamExists("getEntityUserSettings", "userId", userId);
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("getEntityUserSettings", "id", id);
                    localVarPath = "/api/v1/entities/users/{userId}/userSettings/{id}"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)))
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUsers: function (id, filter, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("getEntityUsers", "id", id);
                    localVarPath = "/api/v1/entities/users/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityVisualizationObjects: function (workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getEntityVisualizationObjects", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("getEntityVisualizationObjects", "objectId", objectId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/visualizationObjects/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceDataFilterSettings: function (workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getEntityWorkspaceDataFilterSettings", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("getEntityWorkspaceDataFilterSettings", "objectId", objectId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilterSettings/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceDataFilters: function (workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getEntityWorkspaceDataFilters", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("getEntityWorkspaceDataFilters", "objectId", objectId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilters/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceSettings: function (workspaceId, objectId, filter, xGDCVALIDATERELATIONS, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getEntityWorkspaceSettings", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("getEntityWorkspaceSettings", "objectId", objectId);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/workspaceSettings/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    if (xGDCVALIDATERELATIONS !== undefined && xGDCVALIDATERELATIONS !== null) {
                        localVarHeaderParameter["X-GDC-VALIDATE-RELATIONS"] = String(JSON.stringify(xGDCVALIDATERELATIONS));
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaces: function (id, filter, include, metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("getEntityWorkspaces", "id", id);
                    localVarPath = "/api/v1/entities/workspaces/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Gets a basic information about organization.
         * @summary Get current organization info
         * @param {Array<'permissions' | 'all'>} [metaInclude] Return list of permissions available to logged user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: function (metaInclude, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/entities/organization";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (metaInclude) {
                        localVarQueryParameter["metaInclude"] = Array.from(metaInclude).join(COLLECTION_FORMATS.csv);
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiAnalyticalDashboardPatchDocument} jsonApiAnalyticalDashboardPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityAnalyticalDashboards: function (workspaceId, objectId, jsonApiAnalyticalDashboardPatchDocument, filter, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("patchEntityAnalyticalDashboards", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("patchEntityAnalyticalDashboards", "objectId", objectId);
                    // verify required parameter 'jsonApiAnalyticalDashboardPatchDocument' is not null or undefined
                    assertParamExists("patchEntityAnalyticalDashboards", "jsonApiAnalyticalDashboardPatchDocument", jsonApiAnalyticalDashboardPatchDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/analyticalDashboards/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiAnalyticalDashboardPatchDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiAnalyticalDashboardPatchDocument !== undefined
                            ? jsonApiAnalyticalDashboardPatchDocument
                            : {})
                        : jsonApiAnalyticalDashboardPatchDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiColorPalettePatchDocument} jsonApiColorPalettePatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityColorPalettes: function (id, jsonApiColorPalettePatchDocument, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("patchEntityColorPalettes", "id", id);
                    // verify required parameter 'jsonApiColorPalettePatchDocument' is not null or undefined
                    assertParamExists("patchEntityColorPalettes", "jsonApiColorPalettePatchDocument", jsonApiColorPalettePatchDocument);
                    localVarPath = "/api/v1/entities/colorPalettes/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiColorPalettePatchDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiColorPalettePatchDocument !== undefined ? jsonApiColorPalettePatchDocument : {})
                        : jsonApiColorPalettePatchDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiCookieSecurityConfigurationPatchDocument} jsonApiCookieSecurityConfigurationPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityCookieSecurityConfigurations: function (id, jsonApiCookieSecurityConfigurationPatchDocument, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("patchEntityCookieSecurityConfigurations", "id", id);
                    // verify required parameter 'jsonApiCookieSecurityConfigurationPatchDocument' is not null or undefined
                    assertParamExists("patchEntityCookieSecurityConfigurations", "jsonApiCookieSecurityConfigurationPatchDocument", jsonApiCookieSecurityConfigurationPatchDocument);
                    localVarPath = "/api/v1/entities/admin/cookieSecurityConfigurations/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiCookieSecurityConfigurationPatchDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiCookieSecurityConfigurationPatchDocument !== undefined
                            ? jsonApiCookieSecurityConfigurationPatchDocument
                            : {})
                        : jsonApiCookieSecurityConfigurationPatchDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiCspDirectivePatchDocument} jsonApiCspDirectivePatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityCspDirectives: function (id, jsonApiCspDirectivePatchDocument, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("patchEntityCspDirectives", "id", id);
                    // verify required parameter 'jsonApiCspDirectivePatchDocument' is not null or undefined
                    assertParamExists("patchEntityCspDirectives", "jsonApiCspDirectivePatchDocument", jsonApiCspDirectivePatchDocument);
                    localVarPath = "/api/v1/entities/cspDirectives/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiCspDirectivePatchDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiCspDirectivePatchDocument !== undefined ? jsonApiCspDirectivePatchDocument : {})
                        : jsonApiCspDirectivePatchDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiCustomApplicationSettingPatchDocument} jsonApiCustomApplicationSettingPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityCustomApplicationSettings: function (workspaceId, objectId, jsonApiCustomApplicationSettingPatchDocument, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("patchEntityCustomApplicationSettings", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("patchEntityCustomApplicationSettings", "objectId", objectId);
                    // verify required parameter 'jsonApiCustomApplicationSettingPatchDocument' is not null or undefined
                    assertParamExists("patchEntityCustomApplicationSettings", "jsonApiCustomApplicationSettingPatchDocument", jsonApiCustomApplicationSettingPatchDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/customApplicationSettings/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiCustomApplicationSettingPatchDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiCustomApplicationSettingPatchDocument !== undefined
                            ? jsonApiCustomApplicationSettingPatchDocument
                            : {})
                        : jsonApiCustomApplicationSettingPatchDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiDashboardPluginPatchDocument} jsonApiDashboardPluginPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityDashboardPlugins: function (workspaceId, objectId, jsonApiDashboardPluginPatchDocument, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("patchEntityDashboardPlugins", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("patchEntityDashboardPlugins", "objectId", objectId);
                    // verify required parameter 'jsonApiDashboardPluginPatchDocument' is not null or undefined
                    assertParamExists("patchEntityDashboardPlugins", "jsonApiDashboardPluginPatchDocument", jsonApiDashboardPluginPatchDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/dashboardPlugins/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiDashboardPluginPatchDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiDashboardPluginPatchDocument !== undefined
                            ? jsonApiDashboardPluginPatchDocument
                            : {})
                        : jsonApiDashboardPluginPatchDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiDataSourcePatchDocument} jsonApiDataSourcePatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityDataSources: function (id, jsonApiDataSourcePatchDocument, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("patchEntityDataSources", "id", id);
                    // verify required parameter 'jsonApiDataSourcePatchDocument' is not null or undefined
                    assertParamExists("patchEntityDataSources", "jsonApiDataSourcePatchDocument", jsonApiDataSourcePatchDocument);
                    localVarPath = "/api/v1/entities/dataSources/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiDataSourcePatchDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiDataSourcePatchDocument !== undefined ? jsonApiDataSourcePatchDocument : {})
                        : jsonApiDataSourcePatchDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiFilterContextPatchDocument} jsonApiFilterContextPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityFilterContexts: function (workspaceId, objectId, jsonApiFilterContextPatchDocument, filter, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("patchEntityFilterContexts", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("patchEntityFilterContexts", "objectId", objectId);
                    // verify required parameter 'jsonApiFilterContextPatchDocument' is not null or undefined
                    assertParamExists("patchEntityFilterContexts", "jsonApiFilterContextPatchDocument", jsonApiFilterContextPatchDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/filterContexts/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiFilterContextPatchDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiFilterContextPatchDocument !== undefined
                            ? jsonApiFilterContextPatchDocument
                            : {})
                        : jsonApiFilterContextPatchDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiMetricPatchDocument} jsonApiMetricPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityMetrics: function (workspaceId, objectId, jsonApiMetricPatchDocument, filter, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("patchEntityMetrics", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("patchEntityMetrics", "objectId", objectId);
                    // verify required parameter 'jsonApiMetricPatchDocument' is not null or undefined
                    assertParamExists("patchEntityMetrics", "jsonApiMetricPatchDocument", jsonApiMetricPatchDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/metrics/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiMetricPatchDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiMetricPatchDocument !== undefined ? jsonApiMetricPatchDocument : {})
                        : jsonApiMetricPatchDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationSettingPatchDocument} jsonApiOrganizationSettingPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityOrganizationSettings: function (id, jsonApiOrganizationSettingPatchDocument, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("patchEntityOrganizationSettings", "id", id);
                    // verify required parameter 'jsonApiOrganizationSettingPatchDocument' is not null or undefined
                    assertParamExists("patchEntityOrganizationSettings", "jsonApiOrganizationSettingPatchDocument", jsonApiOrganizationSettingPatchDocument);
                    localVarPath = "/api/v1/entities/organizationSettings/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiOrganizationSettingPatchDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiOrganizationSettingPatchDocument !== undefined
                            ? jsonApiOrganizationSettingPatchDocument
                            : {})
                        : jsonApiOrganizationSettingPatchDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationPatchDocument} jsonApiOrganizationPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityOrganizations: function (id, jsonApiOrganizationPatchDocument, filter, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("patchEntityOrganizations", "id", id);
                    // verify required parameter 'jsonApiOrganizationPatchDocument' is not null or undefined
                    assertParamExists("patchEntityOrganizations", "jsonApiOrganizationPatchDocument", jsonApiOrganizationPatchDocument);
                    localVarPath = "/api/v1/entities/admin/organizations/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiOrganizationPatchDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiOrganizationPatchDocument !== undefined ? jsonApiOrganizationPatchDocument : {})
                        : jsonApiOrganizationPatchDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiThemePatchDocument} jsonApiThemePatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityThemes: function (id, jsonApiThemePatchDocument, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("patchEntityThemes", "id", id);
                    // verify required parameter 'jsonApiThemePatchDocument' is not null or undefined
                    assertParamExists("patchEntityThemes", "jsonApiThemePatchDocument", jsonApiThemePatchDocument);
                    localVarPath = "/api/v1/entities/themes/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiThemePatchDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiThemePatchDocument !== undefined ? jsonApiThemePatchDocument : {})
                        : jsonApiThemePatchDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserGroupPatchDocument} jsonApiUserGroupPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityUserGroups: function (id, jsonApiUserGroupPatchDocument, filter, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("patchEntityUserGroups", "id", id);
                    // verify required parameter 'jsonApiUserGroupPatchDocument' is not null or undefined
                    assertParamExists("patchEntityUserGroups", "jsonApiUserGroupPatchDocument", jsonApiUserGroupPatchDocument);
                    localVarPath = "/api/v1/entities/userGroups/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiUserGroupPatchDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiUserGroupPatchDocument !== undefined ? jsonApiUserGroupPatchDocument : {})
                        : jsonApiUserGroupPatchDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserPatchDocument} jsonApiUserPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityUsers: function (id, jsonApiUserPatchDocument, filter, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("patchEntityUsers", "id", id);
                    // verify required parameter 'jsonApiUserPatchDocument' is not null or undefined
                    assertParamExists("patchEntityUsers", "jsonApiUserPatchDocument", jsonApiUserPatchDocument);
                    localVarPath = "/api/v1/entities/users/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiUserPatchDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiUserPatchDocument !== undefined ? jsonApiUserPatchDocument : {})
                        : jsonApiUserPatchDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiVisualizationObjectPatchDocument} jsonApiVisualizationObjectPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityVisualizationObjects: function (workspaceId, objectId, jsonApiVisualizationObjectPatchDocument, filter, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("patchEntityVisualizationObjects", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("patchEntityVisualizationObjects", "objectId", objectId);
                    // verify required parameter 'jsonApiVisualizationObjectPatchDocument' is not null or undefined
                    assertParamExists("patchEntityVisualizationObjects", "jsonApiVisualizationObjectPatchDocument", jsonApiVisualizationObjectPatchDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/visualizationObjects/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiVisualizationObjectPatchDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiVisualizationObjectPatchDocument !== undefined
                            ? jsonApiVisualizationObjectPatchDocument
                            : {})
                        : jsonApiVisualizationObjectPatchDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiWorkspaceDataFilterPatchDocument} jsonApiWorkspaceDataFilterPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityWorkspaceDataFilters: function (workspaceId, objectId, jsonApiWorkspaceDataFilterPatchDocument, filter, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("patchEntityWorkspaceDataFilters", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("patchEntityWorkspaceDataFilters", "objectId", objectId);
                    // verify required parameter 'jsonApiWorkspaceDataFilterPatchDocument' is not null or undefined
                    assertParamExists("patchEntityWorkspaceDataFilters", "jsonApiWorkspaceDataFilterPatchDocument", jsonApiWorkspaceDataFilterPatchDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilters/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiWorkspaceDataFilterPatchDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiWorkspaceDataFilterPatchDocument !== undefined
                            ? jsonApiWorkspaceDataFilterPatchDocument
                            : {})
                        : jsonApiWorkspaceDataFilterPatchDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiWorkspaceSettingPatchDocument} jsonApiWorkspaceSettingPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityWorkspaceSettings: function (workspaceId, objectId, jsonApiWorkspaceSettingPatchDocument, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("patchEntityWorkspaceSettings", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("patchEntityWorkspaceSettings", "objectId", objectId);
                    // verify required parameter 'jsonApiWorkspaceSettingPatchDocument' is not null or undefined
                    assertParamExists("patchEntityWorkspaceSettings", "jsonApiWorkspaceSettingPatchDocument", jsonApiWorkspaceSettingPatchDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/workspaceSettings/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiWorkspaceSettingPatchDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiWorkspaceSettingPatchDocument !== undefined
                            ? jsonApiWorkspaceSettingPatchDocument
                            : {})
                        : jsonApiWorkspaceSettingPatchDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiWorkspacePatchDocument} jsonApiWorkspacePatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityWorkspaces: function (id, jsonApiWorkspacePatchDocument, filter, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("patchEntityWorkspaces", "id", id);
                    // verify required parameter 'jsonApiWorkspacePatchDocument' is not null or undefined
                    assertParamExists("patchEntityWorkspaces", "jsonApiWorkspacePatchDocument", jsonApiWorkspacePatchDocument);
                    localVarPath = "/api/v1/entities/workspaces/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiWorkspacePatchDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiWorkspacePatchDocument !== undefined ? jsonApiWorkspacePatchDocument : {})
                        : jsonApiWorkspacePatchDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAnalyticalDashboards: function (workspaceId, objectId, jsonApiAnalyticalDashboardInDocument, filter, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("updateEntityAnalyticalDashboards", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("updateEntityAnalyticalDashboards", "objectId", objectId);
                    // verify required parameter 'jsonApiAnalyticalDashboardInDocument' is not null or undefined
                    assertParamExists("updateEntityAnalyticalDashboards", "jsonApiAnalyticalDashboardInDocument", jsonApiAnalyticalDashboardInDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/analyticalDashboards/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiAnalyticalDashboardInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiAnalyticalDashboardInDocument !== undefined
                            ? jsonApiAnalyticalDashboardInDocument
                            : {})
                        : jsonApiAnalyticalDashboardInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityApiTokens: function (userId, id, jsonApiApiTokenInDocument, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    assertParamExists("updateEntityApiTokens", "userId", userId);
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("updateEntityApiTokens", "id", id);
                    // verify required parameter 'jsonApiApiTokenInDocument' is not null or undefined
                    assertParamExists("updateEntityApiTokens", "jsonApiApiTokenInDocument", jsonApiApiTokenInDocument);
                    localVarPath = "/api/v1/entities/users/{userId}/apiTokens/{id}"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)))
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiApiTokenInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiApiTokenInDocument !== undefined ? jsonApiApiTokenInDocument : {})
                        : jsonApiApiTokenInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiColorPaletteInDocument} jsonApiColorPaletteInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityColorPalettes: function (id, jsonApiColorPaletteInDocument, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("updateEntityColorPalettes", "id", id);
                    // verify required parameter 'jsonApiColorPaletteInDocument' is not null or undefined
                    assertParamExists("updateEntityColorPalettes", "jsonApiColorPaletteInDocument", jsonApiColorPaletteInDocument);
                    localVarPath = "/api/v1/entities/colorPalettes/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiColorPaletteInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiColorPaletteInDocument !== undefined ? jsonApiColorPaletteInDocument : {})
                        : jsonApiColorPaletteInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiCookieSecurityConfigurationInDocument} jsonApiCookieSecurityConfigurationInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityCookieSecurityConfigurations: function (id, jsonApiCookieSecurityConfigurationInDocument, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("updateEntityCookieSecurityConfigurations", "id", id);
                    // verify required parameter 'jsonApiCookieSecurityConfigurationInDocument' is not null or undefined
                    assertParamExists("updateEntityCookieSecurityConfigurations", "jsonApiCookieSecurityConfigurationInDocument", jsonApiCookieSecurityConfigurationInDocument);
                    localVarPath = "/api/v1/entities/admin/cookieSecurityConfigurations/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiCookieSecurityConfigurationInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiCookieSecurityConfigurationInDocument !== undefined
                            ? jsonApiCookieSecurityConfigurationInDocument
                            : {})
                        : jsonApiCookieSecurityConfigurationInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiCspDirectiveInDocument} jsonApiCspDirectiveInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityCspDirectives: function (id, jsonApiCspDirectiveInDocument, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("updateEntityCspDirectives", "id", id);
                    // verify required parameter 'jsonApiCspDirectiveInDocument' is not null or undefined
                    assertParamExists("updateEntityCspDirectives", "jsonApiCspDirectiveInDocument", jsonApiCspDirectiveInDocument);
                    localVarPath = "/api/v1/entities/cspDirectives/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiCspDirectiveInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiCspDirectiveInDocument !== undefined ? jsonApiCspDirectiveInDocument : {})
                        : jsonApiCspDirectiveInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiCustomApplicationSettingInDocument} jsonApiCustomApplicationSettingInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityCustomApplicationSettings: function (workspaceId, objectId, jsonApiCustomApplicationSettingInDocument, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("updateEntityCustomApplicationSettings", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("updateEntityCustomApplicationSettings", "objectId", objectId);
                    // verify required parameter 'jsonApiCustomApplicationSettingInDocument' is not null or undefined
                    assertParamExists("updateEntityCustomApplicationSettings", "jsonApiCustomApplicationSettingInDocument", jsonApiCustomApplicationSettingInDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/customApplicationSettings/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiCustomApplicationSettingInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiCustomApplicationSettingInDocument !== undefined
                            ? jsonApiCustomApplicationSettingInDocument
                            : {})
                        : jsonApiCustomApplicationSettingInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityDashboardPlugins: function (workspaceId, objectId, jsonApiDashboardPluginInDocument, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("updateEntityDashboardPlugins", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("updateEntityDashboardPlugins", "objectId", objectId);
                    // verify required parameter 'jsonApiDashboardPluginInDocument' is not null or undefined
                    assertParamExists("updateEntityDashboardPlugins", "jsonApiDashboardPluginInDocument", jsonApiDashboardPluginInDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/dashboardPlugins/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiDashboardPluginInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiDashboardPluginInDocument !== undefined ? jsonApiDashboardPluginInDocument : {})
                        : jsonApiDashboardPluginInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityDataSources: function (id, jsonApiDataSourceInDocument, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("updateEntityDataSources", "id", id);
                    // verify required parameter 'jsonApiDataSourceInDocument' is not null or undefined
                    assertParamExists("updateEntityDataSources", "jsonApiDataSourceInDocument", jsonApiDataSourceInDocument);
                    localVarPath = "/api/v1/entities/dataSources/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiDataSourceInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiDataSourceInDocument !== undefined ? jsonApiDataSourceInDocument : {})
                        : jsonApiDataSourceInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityFilterContexts: function (workspaceId, objectId, jsonApiFilterContextInDocument, filter, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("updateEntityFilterContexts", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("updateEntityFilterContexts", "objectId", objectId);
                    // verify required parameter 'jsonApiFilterContextInDocument' is not null or undefined
                    assertParamExists("updateEntityFilterContexts", "jsonApiFilterContextInDocument", jsonApiFilterContextInDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/filterContexts/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiFilterContextInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiFilterContextInDocument !== undefined ? jsonApiFilterContextInDocument : {})
                        : jsonApiFilterContextInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityMetrics: function (workspaceId, objectId, jsonApiMetricInDocument, filter, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("updateEntityMetrics", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("updateEntityMetrics", "objectId", objectId);
                    // verify required parameter 'jsonApiMetricInDocument' is not null or undefined
                    assertParamExists("updateEntityMetrics", "jsonApiMetricInDocument", jsonApiMetricInDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/metrics/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiMetricInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiMetricInDocument !== undefined ? jsonApiMetricInDocument : {})
                        : jsonApiMetricInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationSettingInDocument} jsonApiOrganizationSettingInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityOrganizationSettings: function (id, jsonApiOrganizationSettingInDocument, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("updateEntityOrganizationSettings", "id", id);
                    // verify required parameter 'jsonApiOrganizationSettingInDocument' is not null or undefined
                    assertParamExists("updateEntityOrganizationSettings", "jsonApiOrganizationSettingInDocument", jsonApiOrganizationSettingInDocument);
                    localVarPath = "/api/v1/entities/organizationSettings/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiOrganizationSettingInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiOrganizationSettingInDocument !== undefined
                            ? jsonApiOrganizationSettingInDocument
                            : {})
                        : jsonApiOrganizationSettingInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityOrganizations: function (id, jsonApiOrganizationInDocument, filter, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("updateEntityOrganizations", "id", id);
                    // verify required parameter 'jsonApiOrganizationInDocument' is not null or undefined
                    assertParamExists("updateEntityOrganizations", "jsonApiOrganizationInDocument", jsonApiOrganizationInDocument);
                    localVarPath = "/api/v1/entities/admin/organizations/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiOrganizationInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiOrganizationInDocument !== undefined ? jsonApiOrganizationInDocument : {})
                        : jsonApiOrganizationInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiThemeInDocument} jsonApiThemeInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityThemes: function (id, jsonApiThemeInDocument, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("updateEntityThemes", "id", id);
                    // verify required parameter 'jsonApiThemeInDocument' is not null or undefined
                    assertParamExists("updateEntityThemes", "jsonApiThemeInDocument", jsonApiThemeInDocument);
                    localVarPath = "/api/v1/entities/themes/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiThemeInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiThemeInDocument !== undefined ? jsonApiThemeInDocument : {})
                        : jsonApiThemeInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUserGroups: function (id, jsonApiUserGroupInDocument, filter, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("updateEntityUserGroups", "id", id);
                    // verify required parameter 'jsonApiUserGroupInDocument' is not null or undefined
                    assertParamExists("updateEntityUserGroups", "jsonApiUserGroupInDocument", jsonApiUserGroupInDocument);
                    localVarPath = "/api/v1/entities/userGroups/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiUserGroupInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiUserGroupInDocument !== undefined ? jsonApiUserGroupInDocument : {})
                        : jsonApiUserGroupInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {JsonApiUserSettingInDocument} jsonApiUserSettingInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUserSettings: function (userId, id, jsonApiUserSettingInDocument, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    assertParamExists("updateEntityUserSettings", "userId", userId);
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("updateEntityUserSettings", "id", id);
                    // verify required parameter 'jsonApiUserSettingInDocument' is not null or undefined
                    assertParamExists("updateEntityUserSettings", "jsonApiUserSettingInDocument", jsonApiUserSettingInDocument);
                    localVarPath = "/api/v1/entities/users/{userId}/userSettings/{id}"
                        .replace("{" + "userId" + "}", encodeURIComponent(String(userId)))
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiUserSettingInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiUserSettingInDocument !== undefined ? jsonApiUserSettingInDocument : {})
                        : jsonApiUserSettingInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUsers: function (id, jsonApiUserInDocument, filter, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("updateEntityUsers", "id", id);
                    // verify required parameter 'jsonApiUserInDocument' is not null or undefined
                    assertParamExists("updateEntityUsers", "jsonApiUserInDocument", jsonApiUserInDocument);
                    localVarPath = "/api/v1/entities/users/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiUserInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiUserInDocument !== undefined ? jsonApiUserInDocument : {})
                        : jsonApiUserInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityVisualizationObjects: function (workspaceId, objectId, jsonApiVisualizationObjectInDocument, filter, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("updateEntityVisualizationObjects", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("updateEntityVisualizationObjects", "objectId", objectId);
                    // verify required parameter 'jsonApiVisualizationObjectInDocument' is not null or undefined
                    assertParamExists("updateEntityVisualizationObjects", "jsonApiVisualizationObjectInDocument", jsonApiVisualizationObjectInDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/visualizationObjects/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiVisualizationObjectInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiVisualizationObjectInDocument !== undefined
                            ? jsonApiVisualizationObjectInDocument
                            : {})
                        : jsonApiVisualizationObjectInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaceDataFilters: function (workspaceId, objectId, jsonApiWorkspaceDataFilterInDocument, filter, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("updateEntityWorkspaceDataFilters", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("updateEntityWorkspaceDataFilters", "objectId", objectId);
                    // verify required parameter 'jsonApiWorkspaceDataFilterInDocument' is not null or undefined
                    assertParamExists("updateEntityWorkspaceDataFilters", "jsonApiWorkspaceDataFilterInDocument", jsonApiWorkspaceDataFilterInDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilters/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiWorkspaceDataFilterInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiWorkspaceDataFilterInDocument !== undefined
                            ? jsonApiWorkspaceDataFilterInDocument
                            : {})
                        : jsonApiWorkspaceDataFilterInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiWorkspaceSettingInDocument} jsonApiWorkspaceSettingInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaceSettings: function (workspaceId, objectId, jsonApiWorkspaceSettingInDocument, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("updateEntityWorkspaceSettings", "workspaceId", workspaceId);
                    // verify required parameter 'objectId' is not null or undefined
                    assertParamExists("updateEntityWorkspaceSettings", "objectId", objectId);
                    // verify required parameter 'jsonApiWorkspaceSettingInDocument' is not null or undefined
                    assertParamExists("updateEntityWorkspaceSettings", "jsonApiWorkspaceSettingInDocument", jsonApiWorkspaceSettingInDocument);
                    localVarPath = "/api/v1/entities/workspaces/{workspaceId}/workspaceSettings/{objectId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiWorkspaceSettingInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiWorkspaceSettingInDocument !== undefined
                            ? jsonApiWorkspaceSettingInDocument
                            : {})
                        : jsonApiWorkspaceSettingInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaces: function (id, jsonApiWorkspaceInDocument, filter, include, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    assertParamExists("updateEntityWorkspaces", "id", id);
                    // verify required parameter 'jsonApiWorkspaceInDocument' is not null or undefined
                    assertParamExists("updateEntityWorkspaces", "jsonApiWorkspaceInDocument", jsonApiWorkspaceInDocument);
                    localVarPath = "/api/v1/entities/workspaces/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (filter !== undefined) {
                        localVarQueryParameter["filter"] = filter;
                    }
                    if (include) {
                        localVarQueryParameter["include"] = include.join(COLLECTION_FORMATS.csv);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof jsonApiWorkspaceInDocument !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(jsonApiWorkspaceInDocument !== undefined ? jsonApiWorkspaceInDocument : {})
                        : jsonApiWorkspaceInDocument || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * EntitiesApi - functional programming interface
 * @export
 */
export var EntitiesApiFp = function (configuration) {
    var localVarAxiosParamCreator = EntitiesApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAnalyticalDashboards: function (workspaceId, jsonApiAnalyticalDashboardInDocument, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createEntityAnalyticalDashboards(workspaceId, jsonApiAnalyticalDashboardInDocument, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} userId
         * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityApiTokens: function (userId, jsonApiApiTokenInDocument, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createEntityApiTokens(userId, jsonApiApiTokenInDocument, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {JsonApiColorPaletteInDocument} jsonApiColorPaletteInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityColorPalettes: function (jsonApiColorPaletteInDocument, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createEntityColorPalettes(jsonApiColorPaletteInDocument, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {JsonApiCspDirectiveInDocument} jsonApiCspDirectiveInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityCspDirectives: function (jsonApiCspDirectiveInDocument, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createEntityCspDirectives(jsonApiCspDirectiveInDocument, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiCustomApplicationSettingInDocument} jsonApiCustomApplicationSettingInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityCustomApplicationSettings: function (workspaceId, jsonApiCustomApplicationSettingInDocument, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createEntityCustomApplicationSettings(workspaceId, jsonApiCustomApplicationSettingInDocument, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityDashboardPlugins: function (workspaceId, jsonApiDashboardPluginInDocument, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createEntityDashboardPlugins(workspaceId, jsonApiDashboardPluginInDocument, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityDataSources: function (jsonApiDataSourceInDocument, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createEntityDataSources(jsonApiDataSourceInDocument, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityFilterContexts: function (workspaceId, jsonApiFilterContextInDocument, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createEntityFilterContexts(workspaceId, jsonApiFilterContextInDocument, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityMetrics: function (workspaceId, jsonApiMetricInDocument, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createEntityMetrics(workspaceId, jsonApiMetricInDocument, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {JsonApiOrganizationSettingInDocument} jsonApiOrganizationSettingInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityOrganizationSettings: function (jsonApiOrganizationSettingInDocument, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createEntityOrganizationSettings(jsonApiOrganizationSettingInDocument, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {JsonApiThemeInDocument} jsonApiThemeInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityThemes: function (jsonApiThemeInDocument, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createEntityThemes(jsonApiThemeInDocument, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUserGroups: function (jsonApiUserGroupInDocument, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createEntityUserGroups(jsonApiUserGroupInDocument, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} userId
         * @param {JsonApiUserSettingInDocument} jsonApiUserSettingInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUserSettings: function (userId, jsonApiUserSettingInDocument, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createEntityUserSettings(userId, jsonApiUserSettingInDocument, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUsers: function (jsonApiUserInDocument, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createEntityUsers(jsonApiUserInDocument, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityVisualizationObjects: function (workspaceId, jsonApiVisualizationObjectInDocument, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createEntityVisualizationObjects(workspaceId, jsonApiVisualizationObjectInDocument, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
         * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaceDataFilters: function (workspaceId, jsonApiWorkspaceDataFilterInDocument, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createEntityWorkspaceDataFilters(workspaceId, jsonApiWorkspaceDataFilterInDocument, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiWorkspaceSettingInDocument} jsonApiWorkspaceSettingInDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaceSettings: function (workspaceId, jsonApiWorkspaceSettingInDocument, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createEntityWorkspaceSettings(workspaceId, jsonApiWorkspaceSettingInDocument, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaces: function (jsonApiWorkspaceInDocument, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createEntityWorkspaces(jsonApiWorkspaceInDocument, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAnalyticalDashboards: function (workspaceId, objectId, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteEntityAnalyticalDashboards(workspaceId, objectId, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityApiTokens: function (userId, id, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteEntityApiTokens(userId, id, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityColorPalettes: function (id, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteEntityColorPalettes(id, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityCspDirectives: function (id, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteEntityCspDirectives(id, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityCustomApplicationSettings: function (workspaceId, objectId, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteEntityCustomApplicationSettings(workspaceId, objectId, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityDashboardPlugins: function (workspaceId, objectId, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteEntityDashboardPlugins(workspaceId, objectId, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityDataSources: function (id, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteEntityDataSources(id, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityFilterContexts: function (workspaceId, objectId, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteEntityFilterContexts(workspaceId, objectId, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityMetrics: function (workspaceId, objectId, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteEntityMetrics(workspaceId, objectId, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityOrganizationSettings: function (id, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteEntityOrganizationSettings(id, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityThemes: function (id, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteEntityThemes(id, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUserGroups: function (id, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteEntityUserGroups(id, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUserSettings: function (userId, id, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteEntityUserSettings(userId, id, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUsers: function (id, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteEntityUsers(id, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityVisualizationObjects: function (workspaceId, objectId, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteEntityVisualizationObjects(workspaceId, objectId, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaceDataFilters: function (workspaceId, objectId, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteEntityWorkspaceDataFilters(workspaceId, objectId, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaceSettings: function (workspaceId, objectId, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteEntityWorkspaceSettings(workspaceId, objectId, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaces: function (id, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteEntityWorkspaces(id, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAnalyticalDashboards: function (workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesAnalyticalDashboards(workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List all api tokens for a user
         * @param {string} userId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesApiTokens: function (userId, filter, page, size, sort, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesApiTokens(userId, filter, page, size, sort, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'datasets' | 'labels' | 'dataset' | 'defaultView' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAttributes: function (workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesAttributes(workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesColorPalettes: function (filter, page, size, sort, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesColorPalettes(filter, page, size, sort, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesCspDirectives: function (filter, page, size, sort, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesCspDirectives(filter, page, size, sort, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesCustomApplicationSettings: function (workspaceId, origin, filter, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesCustomApplicationSettings(workspaceId, origin, filter, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDashboardPlugins: function (workspaceId, origin, filter, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesDashboardPlugins(workspaceId, origin, filter, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSourceIdentifiers: function (filter, page, size, sort, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesDataSourceIdentifiers(filter, page, size, sort, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} dataSourceId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSourceTables: function (dataSourceId, filter, page, size, sort, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesDataSourceTables(dataSourceId, filter, page, size, sort, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSources: function (filter, page, size, sort, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesDataSources(filter, page, size, sort, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDatasets: function (workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesDatasets(workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesEntitlements: function (filter, page, size, sort, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesEntitlements(filter, page, size, sort, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesFacts: function (workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesFacts(workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesFilterContexts: function (workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesFilterContexts(workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesLabels: function (workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesLabels(workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesMetrics: function (workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesMetrics(workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesOrganizationSettings: function (filter, page, size, sort, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesOrganizationSettings(filter, page, size, sort, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesThemes: function (filter, page, size, sort, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesThemes(filter, page, size, sort, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUserGroups: function (filter, include, page, size, sort, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesUserGroups(filter, include, page, size, sort, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary List all settings for a user
         * @param {string} userId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUserSettings: function (userId, filter, page, size, sort, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesUserSettings(userId, filter, page, size, sort, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUsers: function (filter, include, page, size, sort, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesUsers(filter, include, page, size, sort, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesVisualizationObjects: function (workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesVisualizationObjects(workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaceDataFilterSettings: function (workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesWorkspaceDataFilterSettings(workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaceDataFilters: function (workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesWorkspaceDataFilters(workspaceId, origin, filter, include, page, size, sort, xGDCVALIDATERELATIONS, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaceSettings: function (workspaceId, origin, filter, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesWorkspaceSettings(workspaceId, origin, filter, page, size, sort, xGDCVALIDATERELATIONS, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaces: function (filter, include, page, size, sort, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllEntitiesWorkspaces(filter, include, page, size, sort, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves links for all options for different configurations.
         * @summary Links for all configuration options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOptions: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllOptions(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves a list of all supported data sources along with information about the used drivers.
         * @summary Get all available data source drivers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourceDrivers: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDataSourceDrivers(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAnalyticalDashboards: function (workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityAnalyticalDashboards(workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityApiTokens: function (userId, id, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityApiTokens(userId, id, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'datasets' | 'labels' | 'dataset' | 'defaultView' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAttributes: function (workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityAttributes(workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityColorPalettes: function (id, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityColorPalettes(id, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityCookieSecurityConfigurations: function (id, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityCookieSecurityConfigurations(id, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityCspDirectives: function (id, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityCspDirectives(id, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityCustomApplicationSettings: function (workspaceId, objectId, filter, xGDCVALIDATERELATIONS, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityCustomApplicationSettings(workspaceId, objectId, filter, xGDCVALIDATERELATIONS, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDashboardPlugins: function (workspaceId, objectId, filter, xGDCVALIDATERELATIONS, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityDashboardPlugins(workspaceId, objectId, filter, xGDCVALIDATERELATIONS, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSourceIdentifiers: function (id, filter, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityDataSourceIdentifiers(id, filter, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} dataSourceId
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSourceTables: function (dataSourceId, id, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityDataSourceTables(dataSourceId, id, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSources: function (id, filter, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityDataSources(id, filter, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDatasets: function (workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityDatasets(workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityEntitlements: function (id, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityEntitlements(id, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFacts: function (workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityFacts(workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFilterContexts: function (workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityFilterContexts(workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityLabels: function (workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityLabels(workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityMetrics: function (workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityMetrics(workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityOrganizationSettings: function (id, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityOrganizationSettings(id, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityOrganizations: function (id, filter, include, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityOrganizations(id, filter, include, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityThemes: function (id, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityThemes(id, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUserGroups: function (id, filter, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityUserGroups(id, filter, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUserSettings: function (userId, id, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityUserSettings(userId, id, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUsers: function (id, filter, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityUsers(id, filter, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityVisualizationObjects: function (workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityVisualizationObjects(workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceDataFilterSettings: function (workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityWorkspaceDataFilterSettings(workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceDataFilters: function (workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityWorkspaceDataFilters(workspaceId, objectId, filter, include, xGDCVALIDATERELATIONS, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {boolean} [xGDCVALIDATERELATIONS]
         * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceSettings: function (workspaceId, objectId, filter, xGDCVALIDATERELATIONS, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityWorkspaceSettings(workspaceId, objectId, filter, xGDCVALIDATERELATIONS, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaces: function (id, filter, include, metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntityWorkspaces(id, filter, include, metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Gets a basic information about organization.
         * @summary Get current organization info
         * @param {Array<'permissions' | 'all'>} [metaInclude] Return list of permissions available to logged user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: function (metaInclude, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getOrganization(metaInclude, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiAnalyticalDashboardPatchDocument} jsonApiAnalyticalDashboardPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityAnalyticalDashboards: function (workspaceId, objectId, jsonApiAnalyticalDashboardPatchDocument, filter, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchEntityAnalyticalDashboards(workspaceId, objectId, jsonApiAnalyticalDashboardPatchDocument, filter, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiColorPalettePatchDocument} jsonApiColorPalettePatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityColorPalettes: function (id, jsonApiColorPalettePatchDocument, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchEntityColorPalettes(id, jsonApiColorPalettePatchDocument, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiCookieSecurityConfigurationPatchDocument} jsonApiCookieSecurityConfigurationPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityCookieSecurityConfigurations: function (id, jsonApiCookieSecurityConfigurationPatchDocument, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchEntityCookieSecurityConfigurations(id, jsonApiCookieSecurityConfigurationPatchDocument, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiCspDirectivePatchDocument} jsonApiCspDirectivePatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityCspDirectives: function (id, jsonApiCspDirectivePatchDocument, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchEntityCspDirectives(id, jsonApiCspDirectivePatchDocument, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiCustomApplicationSettingPatchDocument} jsonApiCustomApplicationSettingPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityCustomApplicationSettings: function (workspaceId, objectId, jsonApiCustomApplicationSettingPatchDocument, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchEntityCustomApplicationSettings(workspaceId, objectId, jsonApiCustomApplicationSettingPatchDocument, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiDashboardPluginPatchDocument} jsonApiDashboardPluginPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityDashboardPlugins: function (workspaceId, objectId, jsonApiDashboardPluginPatchDocument, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchEntityDashboardPlugins(workspaceId, objectId, jsonApiDashboardPluginPatchDocument, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiDataSourcePatchDocument} jsonApiDataSourcePatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityDataSources: function (id, jsonApiDataSourcePatchDocument, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchEntityDataSources(id, jsonApiDataSourcePatchDocument, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiFilterContextPatchDocument} jsonApiFilterContextPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityFilterContexts: function (workspaceId, objectId, jsonApiFilterContextPatchDocument, filter, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchEntityFilterContexts(workspaceId, objectId, jsonApiFilterContextPatchDocument, filter, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiMetricPatchDocument} jsonApiMetricPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityMetrics: function (workspaceId, objectId, jsonApiMetricPatchDocument, filter, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchEntityMetrics(workspaceId, objectId, jsonApiMetricPatchDocument, filter, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationSettingPatchDocument} jsonApiOrganizationSettingPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityOrganizationSettings: function (id, jsonApiOrganizationSettingPatchDocument, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchEntityOrganizationSettings(id, jsonApiOrganizationSettingPatchDocument, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationPatchDocument} jsonApiOrganizationPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityOrganizations: function (id, jsonApiOrganizationPatchDocument, filter, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchEntityOrganizations(id, jsonApiOrganizationPatchDocument, filter, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiThemePatchDocument} jsonApiThemePatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityThemes: function (id, jsonApiThemePatchDocument, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchEntityThemes(id, jsonApiThemePatchDocument, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserGroupPatchDocument} jsonApiUserGroupPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityUserGroups: function (id, jsonApiUserGroupPatchDocument, filter, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchEntityUserGroups(id, jsonApiUserGroupPatchDocument, filter, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserPatchDocument} jsonApiUserPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityUsers: function (id, jsonApiUserPatchDocument, filter, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchEntityUsers(id, jsonApiUserPatchDocument, filter, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiVisualizationObjectPatchDocument} jsonApiVisualizationObjectPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityVisualizationObjects: function (workspaceId, objectId, jsonApiVisualizationObjectPatchDocument, filter, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchEntityVisualizationObjects(workspaceId, objectId, jsonApiVisualizationObjectPatchDocument, filter, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiWorkspaceDataFilterPatchDocument} jsonApiWorkspaceDataFilterPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityWorkspaceDataFilters: function (workspaceId, objectId, jsonApiWorkspaceDataFilterPatchDocument, filter, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchEntityWorkspaceDataFilters(workspaceId, objectId, jsonApiWorkspaceDataFilterPatchDocument, filter, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiWorkspaceSettingPatchDocument} jsonApiWorkspaceSettingPatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityWorkspaceSettings: function (workspaceId, objectId, jsonApiWorkspaceSettingPatchDocument, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchEntityWorkspaceSettings(workspaceId, objectId, jsonApiWorkspaceSettingPatchDocument, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiWorkspacePatchDocument} jsonApiWorkspacePatchDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityWorkspaces: function (id, jsonApiWorkspacePatchDocument, filter, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchEntityWorkspaces(id, jsonApiWorkspacePatchDocument, filter, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAnalyticalDashboards: function (workspaceId, objectId, jsonApiAnalyticalDashboardInDocument, filter, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEntityAnalyticalDashboards(workspaceId, objectId, jsonApiAnalyticalDashboardInDocument, filter, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityApiTokens: function (userId, id, jsonApiApiTokenInDocument, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEntityApiTokens(userId, id, jsonApiApiTokenInDocument, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiColorPaletteInDocument} jsonApiColorPaletteInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityColorPalettes: function (id, jsonApiColorPaletteInDocument, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEntityColorPalettes(id, jsonApiColorPaletteInDocument, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiCookieSecurityConfigurationInDocument} jsonApiCookieSecurityConfigurationInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityCookieSecurityConfigurations: function (id, jsonApiCookieSecurityConfigurationInDocument, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEntityCookieSecurityConfigurations(id, jsonApiCookieSecurityConfigurationInDocument, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiCspDirectiveInDocument} jsonApiCspDirectiveInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityCspDirectives: function (id, jsonApiCspDirectiveInDocument, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEntityCspDirectives(id, jsonApiCspDirectiveInDocument, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiCustomApplicationSettingInDocument} jsonApiCustomApplicationSettingInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityCustomApplicationSettings: function (workspaceId, objectId, jsonApiCustomApplicationSettingInDocument, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEntityCustomApplicationSettings(workspaceId, objectId, jsonApiCustomApplicationSettingInDocument, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityDashboardPlugins: function (workspaceId, objectId, jsonApiDashboardPluginInDocument, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEntityDashboardPlugins(workspaceId, objectId, jsonApiDashboardPluginInDocument, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityDataSources: function (id, jsonApiDataSourceInDocument, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEntityDataSources(id, jsonApiDataSourceInDocument, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityFilterContexts: function (workspaceId, objectId, jsonApiFilterContextInDocument, filter, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEntityFilterContexts(workspaceId, objectId, jsonApiFilterContextInDocument, filter, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityMetrics: function (workspaceId, objectId, jsonApiMetricInDocument, filter, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEntityMetrics(workspaceId, objectId, jsonApiMetricInDocument, filter, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationSettingInDocument} jsonApiOrganizationSettingInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityOrganizationSettings: function (id, jsonApiOrganizationSettingInDocument, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEntityOrganizationSettings(id, jsonApiOrganizationSettingInDocument, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityOrganizations: function (id, jsonApiOrganizationInDocument, filter, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEntityOrganizations(id, jsonApiOrganizationInDocument, filter, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiThemeInDocument} jsonApiThemeInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityThemes: function (id, jsonApiThemeInDocument, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEntityThemes(id, jsonApiThemeInDocument, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUserGroups: function (id, jsonApiUserGroupInDocument, filter, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEntityUserGroups(id, jsonApiUserGroupInDocument, filter, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {JsonApiUserSettingInDocument} jsonApiUserSettingInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUserSettings: function (userId, id, jsonApiUserSettingInDocument, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEntityUserSettings(userId, id, jsonApiUserSettingInDocument, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserInDocument} jsonApiUserInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUsers: function (id, jsonApiUserInDocument, filter, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEntityUsers(id, jsonApiUserInDocument, filter, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityVisualizationObjects: function (workspaceId, objectId, jsonApiVisualizationObjectInDocument, filter, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEntityVisualizationObjects(workspaceId, objectId, jsonApiVisualizationObjectInDocument, filter, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaceDataFilters: function (workspaceId, objectId, jsonApiWorkspaceDataFilterInDocument, filter, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEntityWorkspaceDataFilters(workspaceId, objectId, jsonApiWorkspaceDataFilterInDocument, filter, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiWorkspaceSettingInDocument} jsonApiWorkspaceSettingInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaceSettings: function (workspaceId, objectId, jsonApiWorkspaceSettingInDocument, filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEntityWorkspaceSettings(workspaceId, objectId, jsonApiWorkspaceSettingInDocument, filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
         * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
         * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaces: function (id, jsonApiWorkspaceInDocument, filter, include, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEntityWorkspaces(id, jsonApiWorkspaceInDocument, filter, include, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * EntitiesApi - factory interface
 * @export
 */
export var EntitiesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = EntitiesApiFp(configuration);
    return {
        /**
         *
         * @param {EntitiesApiCreateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAnalyticalDashboards: function (requestParameters, options) {
            return localVarFp
                .createEntityAnalyticalDashboards(requestParameters.workspaceId, requestParameters.jsonApiAnalyticalDashboardInDocument, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiCreateEntityApiTokensRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityApiTokens: function (requestParameters, options) {
            return localVarFp
                .createEntityApiTokens(requestParameters.userId, requestParameters.jsonApiApiTokenInDocument, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiCreateEntityColorPalettesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityColorPalettes: function (requestParameters, options) {
            return localVarFp
                .createEntityColorPalettes(requestParameters.jsonApiColorPaletteInDocument, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiCreateEntityCspDirectivesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityCspDirectives: function (requestParameters, options) {
            return localVarFp
                .createEntityCspDirectives(requestParameters.jsonApiCspDirectiveInDocument, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiCreateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityCustomApplicationSettings: function (requestParameters, options) {
            return localVarFp
                .createEntityCustomApplicationSettings(requestParameters.workspaceId, requestParameters.jsonApiCustomApplicationSettingInDocument, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiCreateEntityDashboardPluginsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityDashboardPlugins: function (requestParameters, options) {
            return localVarFp
                .createEntityDashboardPlugins(requestParameters.workspaceId, requestParameters.jsonApiDashboardPluginInDocument, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiCreateEntityDataSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityDataSources: function (requestParameters, options) {
            return localVarFp
                .createEntityDataSources(requestParameters.jsonApiDataSourceInDocument, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiCreateEntityFilterContextsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityFilterContexts: function (requestParameters, options) {
            return localVarFp
                .createEntityFilterContexts(requestParameters.workspaceId, requestParameters.jsonApiFilterContextInDocument, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiCreateEntityMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityMetrics: function (requestParameters, options) {
            return localVarFp
                .createEntityMetrics(requestParameters.workspaceId, requestParameters.jsonApiMetricInDocument, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiCreateEntityOrganizationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityOrganizationSettings: function (requestParameters, options) {
            return localVarFp
                .createEntityOrganizationSettings(requestParameters.jsonApiOrganizationSettingInDocument, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiCreateEntityThemesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityThemes: function (requestParameters, options) {
            return localVarFp
                .createEntityThemes(requestParameters.jsonApiThemeInDocument, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiCreateEntityUserGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUserGroups: function (requestParameters, options) {
            return localVarFp
                .createEntityUserGroups(requestParameters.jsonApiUserGroupInDocument, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiCreateEntityUserSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUserSettings: function (requestParameters, options) {
            return localVarFp
                .createEntityUserSettings(requestParameters.userId, requestParameters.jsonApiUserSettingInDocument, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiCreateEntityUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUsers: function (requestParameters, options) {
            return localVarFp
                .createEntityUsers(requestParameters.jsonApiUserInDocument, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiCreateEntityVisualizationObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityVisualizationObjects: function (requestParameters, options) {
            return localVarFp
                .createEntityVisualizationObjects(requestParameters.workspaceId, requestParameters.jsonApiVisualizationObjectInDocument, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiCreateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaceDataFilters: function (requestParameters, options) {
            return localVarFp
                .createEntityWorkspaceDataFilters(requestParameters.workspaceId, requestParameters.jsonApiWorkspaceDataFilterInDocument, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiCreateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaceSettings: function (requestParameters, options) {
            return localVarFp
                .createEntityWorkspaceSettings(requestParameters.workspaceId, requestParameters.jsonApiWorkspaceSettingInDocument, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiCreateEntityWorkspacesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaces: function (requestParameters, options) {
            return localVarFp
                .createEntityWorkspaces(requestParameters.jsonApiWorkspaceInDocument, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAnalyticalDashboards: function (requestParameters, options) {
            return localVarFp
                .deleteEntityAnalyticalDashboards(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityApiTokensRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityApiTokens: function (requestParameters, options) {
            return localVarFp
                .deleteEntityApiTokens(requestParameters.userId, requestParameters.id, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityColorPalettesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityColorPalettes: function (requestParameters, options) {
            return localVarFp
                .deleteEntityColorPalettes(requestParameters.id, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityCspDirectivesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityCspDirectives: function (requestParameters, options) {
            return localVarFp
                .deleteEntityCspDirectives(requestParameters.id, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityCustomApplicationSettings: function (requestParameters, options) {
            return localVarFp
                .deleteEntityCustomApplicationSettings(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityDashboardPluginsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityDashboardPlugins: function (requestParameters, options) {
            return localVarFp
                .deleteEntityDashboardPlugins(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityDataSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityDataSources: function (requestParameters, options) {
            return localVarFp
                .deleteEntityDataSources(requestParameters.id, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityFilterContextsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityFilterContexts: function (requestParameters, options) {
            return localVarFp
                .deleteEntityFilterContexts(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityMetrics: function (requestParameters, options) {
            return localVarFp
                .deleteEntityMetrics(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityOrganizationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityOrganizationSettings: function (requestParameters, options) {
            return localVarFp
                .deleteEntityOrganizationSettings(requestParameters.id, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityThemesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityThemes: function (requestParameters, options) {
            return localVarFp
                .deleteEntityThemes(requestParameters.id, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityUserGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUserGroups: function (requestParameters, options) {
            return localVarFp
                .deleteEntityUserGroups(requestParameters.id, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityUserSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUserSettings: function (requestParameters, options) {
            return localVarFp
                .deleteEntityUserSettings(requestParameters.userId, requestParameters.id, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUsers: function (requestParameters, options) {
            return localVarFp
                .deleteEntityUsers(requestParameters.id, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityVisualizationObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityVisualizationObjects: function (requestParameters, options) {
            return localVarFp
                .deleteEntityVisualizationObjects(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaceDataFilters: function (requestParameters, options) {
            return localVarFp
                .deleteEntityWorkspaceDataFilters(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityWorkspaceSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaceSettings: function (requestParameters, options) {
            return localVarFp
                .deleteEntityWorkspaceSettings(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiDeleteEntityWorkspacesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaces: function (requestParameters, options) {
            return localVarFp
                .deleteEntityWorkspaces(requestParameters.id, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesAnalyticalDashboardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAnalyticalDashboards: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesAnalyticalDashboards(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List all api tokens for a user
         * @param {EntitiesApiGetAllEntitiesApiTokensRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesApiTokens: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesApiTokens(requestParameters.userId, requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAttributes: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesAttributes(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesColorPalettesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesColorPalettes: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesColorPalettes(requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesCspDirectivesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesCspDirectives: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesCspDirectives(requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesCustomApplicationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesCustomApplicationSettings: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesCustomApplicationSettings(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesDashboardPluginsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDashboardPlugins: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesDashboardPlugins(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesDataSourceIdentifiersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSourceIdentifiers: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesDataSourceIdentifiers(requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesDataSourceTablesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSourceTables: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesDataSourceTables(requestParameters.dataSourceId, requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesDataSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSources: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesDataSources(requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesDatasetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDatasets: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesDatasets(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesEntitlementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesEntitlements: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesEntitlements(requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesFactsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesFacts: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesFacts(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesFilterContextsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesFilterContexts: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesFilterContexts(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesLabelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesLabels: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesLabels(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesMetrics: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesMetrics(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesOrganizationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesOrganizationSettings: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesOrganizationSettings(requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesThemesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesThemes: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesThemes(requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesUserGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUserGroups: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesUserGroups(requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary List all settings for a user
         * @param {EntitiesApiGetAllEntitiesUserSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUserSettings: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesUserSettings(requestParameters.userId, requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUsers: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesUsers(requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesVisualizationObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesVisualizationObjects: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesVisualizationObjects(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaceDataFilterSettings: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesWorkspaceDataFilterSettings(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesWorkspaceDataFiltersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaceDataFilters: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesWorkspaceDataFilters(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesWorkspaceSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaceSettings: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesWorkspaceSettings(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetAllEntitiesWorkspacesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaces: function (requestParameters, options) {
            return localVarFp
                .getAllEntitiesWorkspaces(requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves links for all options for different configurations.
         * @summary Links for all configuration options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOptions: function (options) {
            return localVarFp.getAllOptions(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves a list of all supported data sources along with information about the used drivers.
         * @summary Get all available data source drivers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourceDrivers: function (options) {
            return localVarFp.getDataSourceDrivers(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAnalyticalDashboards: function (requestParameters, options) {
            return localVarFp
                .getEntityAnalyticalDashboards(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.include, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityApiTokensRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityApiTokens: function (requestParameters, options) {
            return localVarFp
                .getEntityApiTokens(requestParameters.userId, requestParameters.id, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAttributes: function (requestParameters, options) {
            return localVarFp
                .getEntityAttributes(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.include, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityColorPalettesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityColorPalettes: function (requestParameters, options) {
            return localVarFp
                .getEntityColorPalettes(requestParameters.id, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityCookieSecurityConfigurations: function (requestParameters, options) {
            return localVarFp
                .getEntityCookieSecurityConfigurations(requestParameters.id, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityCspDirectivesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityCspDirectives: function (requestParameters, options) {
            return localVarFp
                .getEntityCspDirectives(requestParameters.id, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityCustomApplicationSettings: function (requestParameters, options) {
            return localVarFp
                .getEntityCustomApplicationSettings(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityDashboardPluginsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDashboardPlugins: function (requestParameters, options) {
            return localVarFp
                .getEntityDashboardPlugins(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityDataSourceIdentifiersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSourceIdentifiers: function (requestParameters, options) {
            return localVarFp
                .getEntityDataSourceIdentifiers(requestParameters.id, requestParameters.filter, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityDataSourceTablesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSourceTables: function (requestParameters, options) {
            return localVarFp
                .getEntityDataSourceTables(requestParameters.dataSourceId, requestParameters.id, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityDataSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSources: function (requestParameters, options) {
            return localVarFp
                .getEntityDataSources(requestParameters.id, requestParameters.filter, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityDatasetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDatasets: function (requestParameters, options) {
            return localVarFp
                .getEntityDatasets(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.include, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityEntitlementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityEntitlements: function (requestParameters, options) {
            return localVarFp
                .getEntityEntitlements(requestParameters.id, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityFactsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFacts: function (requestParameters, options) {
            return localVarFp
                .getEntityFacts(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.include, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityFilterContextsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFilterContexts: function (requestParameters, options) {
            return localVarFp
                .getEntityFilterContexts(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.include, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityLabelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityLabels: function (requestParameters, options) {
            return localVarFp
                .getEntityLabels(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.include, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityMetrics: function (requestParameters, options) {
            return localVarFp
                .getEntityMetrics(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.include, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityOrganizationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityOrganizationSettings: function (requestParameters, options) {
            return localVarFp
                .getEntityOrganizationSettings(requestParameters.id, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityOrganizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityOrganizations: function (requestParameters, options) {
            return localVarFp
                .getEntityOrganizations(requestParameters.id, requestParameters.filter, requestParameters.include, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityThemesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityThemes: function (requestParameters, options) {
            return localVarFp
                .getEntityThemes(requestParameters.id, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityUserGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUserGroups: function (requestParameters, options) {
            return localVarFp
                .getEntityUserGroups(requestParameters.id, requestParameters.filter, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityUserSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUserSettings: function (requestParameters, options) {
            return localVarFp
                .getEntityUserSettings(requestParameters.userId, requestParameters.id, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUsers: function (requestParameters, options) {
            return localVarFp
                .getEntityUsers(requestParameters.id, requestParameters.filter, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityVisualizationObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityVisualizationObjects: function (requestParameters, options) {
            return localVarFp
                .getEntityVisualizationObjects(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.include, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceDataFilterSettings: function (requestParameters, options) {
            return localVarFp
                .getEntityWorkspaceDataFilterSettings(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.include, requestParameters.xGDCVALIDATERELATIONS, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceDataFilters: function (requestParameters, options) {
            return localVarFp
                .getEntityWorkspaceDataFilters(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.include, requestParameters.xGDCVALIDATERELATIONS, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityWorkspaceSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaceSettings: function (requestParameters, options) {
            return localVarFp
                .getEntityWorkspaceSettings(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiGetEntityWorkspacesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaces: function (requestParameters, options) {
            return localVarFp
                .getEntityWorkspaces(requestParameters.id, requestParameters.filter, requestParameters.include, requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets a basic information about organization.
         * @summary Get current organization info
         * @param {EntitiesApiGetOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: function (requestParameters, options) {
            return localVarFp
                .getOrganization(requestParameters.metaInclude, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiPatchEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityAnalyticalDashboards: function (requestParameters, options) {
            return localVarFp
                .patchEntityAnalyticalDashboards(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiAnalyticalDashboardPatchDocument, requestParameters.filter, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiPatchEntityColorPalettesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityColorPalettes: function (requestParameters, options) {
            return localVarFp
                .patchEntityColorPalettes(requestParameters.id, requestParameters.jsonApiColorPalettePatchDocument, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiPatchEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityCookieSecurityConfigurations: function (requestParameters, options) {
            return localVarFp
                .patchEntityCookieSecurityConfigurations(requestParameters.id, requestParameters.jsonApiCookieSecurityConfigurationPatchDocument, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiPatchEntityCspDirectivesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityCspDirectives: function (requestParameters, options) {
            return localVarFp
                .patchEntityCspDirectives(requestParameters.id, requestParameters.jsonApiCspDirectivePatchDocument, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiPatchEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityCustomApplicationSettings: function (requestParameters, options) {
            return localVarFp
                .patchEntityCustomApplicationSettings(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiCustomApplicationSettingPatchDocument, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiPatchEntityDashboardPluginsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityDashboardPlugins: function (requestParameters, options) {
            return localVarFp
                .patchEntityDashboardPlugins(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiDashboardPluginPatchDocument, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiPatchEntityDataSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityDataSources: function (requestParameters, options) {
            return localVarFp
                .patchEntityDataSources(requestParameters.id, requestParameters.jsonApiDataSourcePatchDocument, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiPatchEntityFilterContextsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityFilterContexts: function (requestParameters, options) {
            return localVarFp
                .patchEntityFilterContexts(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiFilterContextPatchDocument, requestParameters.filter, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiPatchEntityMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityMetrics: function (requestParameters, options) {
            return localVarFp
                .patchEntityMetrics(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiMetricPatchDocument, requestParameters.filter, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiPatchEntityOrganizationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityOrganizationSettings: function (requestParameters, options) {
            return localVarFp
                .patchEntityOrganizationSettings(requestParameters.id, requestParameters.jsonApiOrganizationSettingPatchDocument, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiPatchEntityOrganizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityOrganizations: function (requestParameters, options) {
            return localVarFp
                .patchEntityOrganizations(requestParameters.id, requestParameters.jsonApiOrganizationPatchDocument, requestParameters.filter, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiPatchEntityThemesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityThemes: function (requestParameters, options) {
            return localVarFp
                .patchEntityThemes(requestParameters.id, requestParameters.jsonApiThemePatchDocument, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiPatchEntityUserGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityUserGroups: function (requestParameters, options) {
            return localVarFp
                .patchEntityUserGroups(requestParameters.id, requestParameters.jsonApiUserGroupPatchDocument, requestParameters.filter, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiPatchEntityUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityUsers: function (requestParameters, options) {
            return localVarFp
                .patchEntityUsers(requestParameters.id, requestParameters.jsonApiUserPatchDocument, requestParameters.filter, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiPatchEntityVisualizationObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityVisualizationObjects: function (requestParameters, options) {
            return localVarFp
                .patchEntityVisualizationObjects(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiVisualizationObjectPatchDocument, requestParameters.filter, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiPatchEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityWorkspaceDataFilters: function (requestParameters, options) {
            return localVarFp
                .patchEntityWorkspaceDataFilters(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiWorkspaceDataFilterPatchDocument, requestParameters.filter, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiPatchEntityWorkspaceSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityWorkspaceSettings: function (requestParameters, options) {
            return localVarFp
                .patchEntityWorkspaceSettings(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiWorkspaceSettingPatchDocument, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiPatchEntityWorkspacesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEntityWorkspaces: function (requestParameters, options) {
            return localVarFp
                .patchEntityWorkspaces(requestParameters.id, requestParameters.jsonApiWorkspacePatchDocument, requestParameters.filter, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAnalyticalDashboards: function (requestParameters, options) {
            return localVarFp
                .updateEntityAnalyticalDashboards(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiAnalyticalDashboardInDocument, requestParameters.filter, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityApiTokensRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityApiTokens: function (requestParameters, options) {
            return localVarFp
                .updateEntityApiTokens(requestParameters.userId, requestParameters.id, requestParameters.jsonApiApiTokenInDocument, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityColorPalettesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityColorPalettes: function (requestParameters, options) {
            return localVarFp
                .updateEntityColorPalettes(requestParameters.id, requestParameters.jsonApiColorPaletteInDocument, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityCookieSecurityConfigurations: function (requestParameters, options) {
            return localVarFp
                .updateEntityCookieSecurityConfigurations(requestParameters.id, requestParameters.jsonApiCookieSecurityConfigurationInDocument, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityCspDirectivesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityCspDirectives: function (requestParameters, options) {
            return localVarFp
                .updateEntityCspDirectives(requestParameters.id, requestParameters.jsonApiCspDirectiveInDocument, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityCustomApplicationSettings: function (requestParameters, options) {
            return localVarFp
                .updateEntityCustomApplicationSettings(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiCustomApplicationSettingInDocument, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityDashboardPluginsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityDashboardPlugins: function (requestParameters, options) {
            return localVarFp
                .updateEntityDashboardPlugins(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiDashboardPluginInDocument, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityDataSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityDataSources: function (requestParameters, options) {
            return localVarFp
                .updateEntityDataSources(requestParameters.id, requestParameters.jsonApiDataSourceInDocument, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityFilterContextsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityFilterContexts: function (requestParameters, options) {
            return localVarFp
                .updateEntityFilterContexts(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiFilterContextInDocument, requestParameters.filter, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityMetrics: function (requestParameters, options) {
            return localVarFp
                .updateEntityMetrics(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiMetricInDocument, requestParameters.filter, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityOrganizationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityOrganizationSettings: function (requestParameters, options) {
            return localVarFp
                .updateEntityOrganizationSettings(requestParameters.id, requestParameters.jsonApiOrganizationSettingInDocument, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityOrganizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityOrganizations: function (requestParameters, options) {
            return localVarFp
                .updateEntityOrganizations(requestParameters.id, requestParameters.jsonApiOrganizationInDocument, requestParameters.filter, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityThemesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityThemes: function (requestParameters, options) {
            return localVarFp
                .updateEntityThemes(requestParameters.id, requestParameters.jsonApiThemeInDocument, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityUserGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUserGroups: function (requestParameters, options) {
            return localVarFp
                .updateEntityUserGroups(requestParameters.id, requestParameters.jsonApiUserGroupInDocument, requestParameters.filter, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityUserSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUserSettings: function (requestParameters, options) {
            return localVarFp
                .updateEntityUserSettings(requestParameters.userId, requestParameters.id, requestParameters.jsonApiUserSettingInDocument, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUsers: function (requestParameters, options) {
            return localVarFp
                .updateEntityUsers(requestParameters.id, requestParameters.jsonApiUserInDocument, requestParameters.filter, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityVisualizationObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityVisualizationObjects: function (requestParameters, options) {
            return localVarFp
                .updateEntityVisualizationObjects(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiVisualizationObjectInDocument, requestParameters.filter, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaceDataFilters: function (requestParameters, options) {
            return localVarFp
                .updateEntityWorkspaceDataFilters(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiWorkspaceDataFilterInDocument, requestParameters.filter, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaceSettings: function (requestParameters, options) {
            return localVarFp
                .updateEntityWorkspaceSettings(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiWorkspaceSettingInDocument, requestParameters.filter, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {EntitiesApiUpdateEntityWorkspacesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaces: function (requestParameters, options) {
            return localVarFp
                .updateEntityWorkspaces(requestParameters.id, requestParameters.jsonApiWorkspaceInDocument, requestParameters.filter, requestParameters.include, options)
                .then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * EntitiesApi - object-oriented interface
 * @export
 * @class EntitiesApi
 * @extends {BaseAPI}
 */
var EntitiesApi = /** @class */ (function (_super) {
    __extends(EntitiesApi, _super);
    function EntitiesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {EntitiesApiCreateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.createEntityAnalyticalDashboards = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .createEntityAnalyticalDashboards(requestParameters.workspaceId, requestParameters.jsonApiAnalyticalDashboardInDocument, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiCreateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.createEntityApiTokens = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .createEntityApiTokens(requestParameters.userId, requestParameters.jsonApiApiTokenInDocument, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiCreateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.createEntityColorPalettes = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .createEntityColorPalettes(requestParameters.jsonApiColorPaletteInDocument, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiCreateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.createEntityCspDirectives = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .createEntityCspDirectives(requestParameters.jsonApiCspDirectiveInDocument, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiCreateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.createEntityCustomApplicationSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .createEntityCustomApplicationSettings(requestParameters.workspaceId, requestParameters.jsonApiCustomApplicationSettingInDocument, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiCreateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.createEntityDashboardPlugins = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .createEntityDashboardPlugins(requestParameters.workspaceId, requestParameters.jsonApiDashboardPluginInDocument, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiCreateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.createEntityDataSources = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .createEntityDataSources(requestParameters.jsonApiDataSourceInDocument, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiCreateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.createEntityFilterContexts = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .createEntityFilterContexts(requestParameters.workspaceId, requestParameters.jsonApiFilterContextInDocument, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiCreateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.createEntityMetrics = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .createEntityMetrics(requestParameters.workspaceId, requestParameters.jsonApiMetricInDocument, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiCreateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.createEntityOrganizationSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .createEntityOrganizationSettings(requestParameters.jsonApiOrganizationSettingInDocument, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiCreateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.createEntityThemes = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .createEntityThemes(requestParameters.jsonApiThemeInDocument, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiCreateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.createEntityUserGroups = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .createEntityUserGroups(requestParameters.jsonApiUserGroupInDocument, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiCreateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.createEntityUserSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .createEntityUserSettings(requestParameters.userId, requestParameters.jsonApiUserSettingInDocument, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiCreateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.createEntityUsers = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .createEntityUsers(requestParameters.jsonApiUserInDocument, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiCreateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.createEntityVisualizationObjects = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .createEntityVisualizationObjects(requestParameters.workspaceId, requestParameters.jsonApiVisualizationObjectInDocument, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiCreateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.createEntityWorkspaceDataFilters = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .createEntityWorkspaceDataFilters(requestParameters.workspaceId, requestParameters.jsonApiWorkspaceDataFilterInDocument, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiCreateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.createEntityWorkspaceSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .createEntityWorkspaceSettings(requestParameters.workspaceId, requestParameters.jsonApiWorkspaceSettingInDocument, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiCreateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.createEntityWorkspaces = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .createEntityWorkspaces(requestParameters.jsonApiWorkspaceInDocument, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiDeleteEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.deleteEntityAnalyticalDashboards = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .deleteEntityAnalyticalDashboards(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiDeleteEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.deleteEntityApiTokens = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .deleteEntityApiTokens(requestParameters.userId, requestParameters.id, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiDeleteEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.deleteEntityColorPalettes = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .deleteEntityColorPalettes(requestParameters.id, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiDeleteEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.deleteEntityCspDirectives = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .deleteEntityCspDirectives(requestParameters.id, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiDeleteEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.deleteEntityCustomApplicationSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .deleteEntityCustomApplicationSettings(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiDeleteEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.deleteEntityDashboardPlugins = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .deleteEntityDashboardPlugins(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiDeleteEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.deleteEntityDataSources = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .deleteEntityDataSources(requestParameters.id, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiDeleteEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.deleteEntityFilterContexts = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .deleteEntityFilterContexts(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiDeleteEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.deleteEntityMetrics = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .deleteEntityMetrics(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiDeleteEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.deleteEntityOrganizationSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .deleteEntityOrganizationSettings(requestParameters.id, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiDeleteEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.deleteEntityThemes = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .deleteEntityThemes(requestParameters.id, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiDeleteEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.deleteEntityUserGroups = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .deleteEntityUserGroups(requestParameters.id, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiDeleteEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.deleteEntityUserSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .deleteEntityUserSettings(requestParameters.userId, requestParameters.id, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiDeleteEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.deleteEntityUsers = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .deleteEntityUsers(requestParameters.id, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiDeleteEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.deleteEntityVisualizationObjects = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .deleteEntityVisualizationObjects(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiDeleteEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.deleteEntityWorkspaceDataFilters = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .deleteEntityWorkspaceDataFilters(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiDeleteEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.deleteEntityWorkspaceSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .deleteEntityWorkspaceSettings(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiDeleteEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.deleteEntityWorkspaces = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .deleteEntityWorkspaces(requestParameters.id, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesAnalyticalDashboards = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesAnalyticalDashboards(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List all api tokens for a user
     * @param {EntitiesApiGetAllEntitiesApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesApiTokens = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesApiTokens(requestParameters.userId, requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesAttributes = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesAttributes(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesColorPalettes = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesColorPalettes(requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesCspDirectives = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesCspDirectives(requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesCustomApplicationSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesCustomApplicationSettings(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesDashboardPlugins = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesDashboardPlugins(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesDataSourceIdentifiers = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesDataSourceIdentifiers(requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesDataSourceTables = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesDataSourceTables(requestParameters.dataSourceId, requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesDataSources = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesDataSources(requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesDatasets = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesDatasets(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesEntitlements = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesEntitlements(requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesFacts = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesFacts(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesFilterContexts = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesFilterContexts(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesLabels = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesLabels(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesMetrics = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesMetrics(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesOrganizationSettings = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesOrganizationSettings(requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesThemes = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesThemes(requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesUserGroups = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesUserGroups(requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary List all settings for a user
     * @param {EntitiesApiGetAllEntitiesUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesUserSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesUserSettings(requestParameters.userId, requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesUsers = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesUsers(requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesVisualizationObjects = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesVisualizationObjects(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesWorkspaceDataFilterSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesWorkspaceDataFilterSettings(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesWorkspaceDataFilters = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesWorkspaceDataFilters(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesWorkspaceSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesWorkspaceSettings(requestParameters.workspaceId, requestParameters.origin, requestParameters.filter, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetAllEntitiesWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllEntitiesWorkspaces = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return EntitiesApiFp(this.configuration)
            .getAllEntitiesWorkspaces(requestParameters.filter, requestParameters.include, requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getAllOptions = function (options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getAllOptions(options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getDataSourceDrivers = function (options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getDataSourceDrivers(options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityAnalyticalDashboards = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityAnalyticalDashboards(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.include, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityApiTokens = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityApiTokens(requestParameters.userId, requestParameters.id, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityAttributes = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityAttributes(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.include, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityColorPalettes = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityColorPalettes(requestParameters.id, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityCookieSecurityConfigurations = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityCookieSecurityConfigurations(requestParameters.id, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityCspDirectives = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityCspDirectives(requestParameters.id, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityCustomApplicationSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityCustomApplicationSettings(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityDashboardPlugins = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityDashboardPlugins(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityDataSourceIdentifiers = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityDataSourceIdentifiers(requestParameters.id, requestParameters.filter, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityDataSourceTables = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityDataSourceTables(requestParameters.dataSourceId, requestParameters.id, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityDataSources = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityDataSources(requestParameters.id, requestParameters.filter, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityDatasets = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityDatasets(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.include, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityEntitlements = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityEntitlements(requestParameters.id, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityFacts = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityFacts(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.include, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityFilterContexts = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityFilterContexts(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.include, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityLabels = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityLabels(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.include, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityMetrics = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityMetrics(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.include, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityOrganizationSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityOrganizationSettings(requestParameters.id, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityOrganizations = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityOrganizations(requestParameters.id, requestParameters.filter, requestParameters.include, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityThemes = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityThemes(requestParameters.id, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityUserGroups = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityUserGroups(requestParameters.id, requestParameters.filter, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityUserSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityUserSettings(requestParameters.userId, requestParameters.id, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityUsers = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityUsers(requestParameters.id, requestParameters.filter, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityVisualizationObjects = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityVisualizationObjects(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.include, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityWorkspaceDataFilterSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityWorkspaceDataFilterSettings(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.include, requestParameters.xGDCVALIDATERELATIONS, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityWorkspaceDataFilters = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityWorkspaceDataFilters(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.include, requestParameters.xGDCVALIDATERELATIONS, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityWorkspaceSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityWorkspaceSettings(requestParameters.workspaceId, requestParameters.objectId, requestParameters.filter, requestParameters.xGDCVALIDATERELATIONS, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiGetEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getEntityWorkspaces = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .getEntityWorkspaces(requestParameters.id, requestParameters.filter, requestParameters.include, requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets a basic information about organization.
     * @summary Get current organization info
     * @param {EntitiesApiGetOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.getOrganization = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return EntitiesApiFp(this.configuration)
            .getOrganization(requestParameters.metaInclude, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiPatchEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.patchEntityAnalyticalDashboards = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .patchEntityAnalyticalDashboards(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiAnalyticalDashboardPatchDocument, requestParameters.filter, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiPatchEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.patchEntityColorPalettes = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .patchEntityColorPalettes(requestParameters.id, requestParameters.jsonApiColorPalettePatchDocument, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiPatchEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.patchEntityCookieSecurityConfigurations = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .patchEntityCookieSecurityConfigurations(requestParameters.id, requestParameters.jsonApiCookieSecurityConfigurationPatchDocument, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiPatchEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.patchEntityCspDirectives = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .patchEntityCspDirectives(requestParameters.id, requestParameters.jsonApiCspDirectivePatchDocument, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiPatchEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.patchEntityCustomApplicationSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .patchEntityCustomApplicationSettings(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiCustomApplicationSettingPatchDocument, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiPatchEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.patchEntityDashboardPlugins = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .patchEntityDashboardPlugins(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiDashboardPluginPatchDocument, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiPatchEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.patchEntityDataSources = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .patchEntityDataSources(requestParameters.id, requestParameters.jsonApiDataSourcePatchDocument, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiPatchEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.patchEntityFilterContexts = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .patchEntityFilterContexts(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiFilterContextPatchDocument, requestParameters.filter, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiPatchEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.patchEntityMetrics = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .patchEntityMetrics(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiMetricPatchDocument, requestParameters.filter, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiPatchEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.patchEntityOrganizationSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .patchEntityOrganizationSettings(requestParameters.id, requestParameters.jsonApiOrganizationSettingPatchDocument, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiPatchEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.patchEntityOrganizations = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .patchEntityOrganizations(requestParameters.id, requestParameters.jsonApiOrganizationPatchDocument, requestParameters.filter, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiPatchEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.patchEntityThemes = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .patchEntityThemes(requestParameters.id, requestParameters.jsonApiThemePatchDocument, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiPatchEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.patchEntityUserGroups = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .patchEntityUserGroups(requestParameters.id, requestParameters.jsonApiUserGroupPatchDocument, requestParameters.filter, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiPatchEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.patchEntityUsers = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .patchEntityUsers(requestParameters.id, requestParameters.jsonApiUserPatchDocument, requestParameters.filter, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiPatchEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.patchEntityVisualizationObjects = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .patchEntityVisualizationObjects(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiVisualizationObjectPatchDocument, requestParameters.filter, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiPatchEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.patchEntityWorkspaceDataFilters = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .patchEntityWorkspaceDataFilters(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiWorkspaceDataFilterPatchDocument, requestParameters.filter, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiPatchEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.patchEntityWorkspaceSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .patchEntityWorkspaceSettings(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiWorkspaceSettingPatchDocument, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiPatchEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.patchEntityWorkspaces = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .patchEntityWorkspaces(requestParameters.id, requestParameters.jsonApiWorkspacePatchDocument, requestParameters.filter, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiUpdateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.updateEntityAnalyticalDashboards = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .updateEntityAnalyticalDashboards(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiAnalyticalDashboardInDocument, requestParameters.filter, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiUpdateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.updateEntityApiTokens = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .updateEntityApiTokens(requestParameters.userId, requestParameters.id, requestParameters.jsonApiApiTokenInDocument, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiUpdateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.updateEntityColorPalettes = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .updateEntityColorPalettes(requestParameters.id, requestParameters.jsonApiColorPaletteInDocument, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiUpdateEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.updateEntityCookieSecurityConfigurations = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .updateEntityCookieSecurityConfigurations(requestParameters.id, requestParameters.jsonApiCookieSecurityConfigurationInDocument, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiUpdateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.updateEntityCspDirectives = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .updateEntityCspDirectives(requestParameters.id, requestParameters.jsonApiCspDirectiveInDocument, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiUpdateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.updateEntityCustomApplicationSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .updateEntityCustomApplicationSettings(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiCustomApplicationSettingInDocument, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiUpdateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.updateEntityDashboardPlugins = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .updateEntityDashboardPlugins(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiDashboardPluginInDocument, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiUpdateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.updateEntityDataSources = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .updateEntityDataSources(requestParameters.id, requestParameters.jsonApiDataSourceInDocument, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiUpdateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.updateEntityFilterContexts = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .updateEntityFilterContexts(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiFilterContextInDocument, requestParameters.filter, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiUpdateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.updateEntityMetrics = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .updateEntityMetrics(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiMetricInDocument, requestParameters.filter, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiUpdateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.updateEntityOrganizationSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .updateEntityOrganizationSettings(requestParameters.id, requestParameters.jsonApiOrganizationSettingInDocument, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiUpdateEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.updateEntityOrganizations = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .updateEntityOrganizations(requestParameters.id, requestParameters.jsonApiOrganizationInDocument, requestParameters.filter, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiUpdateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.updateEntityThemes = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .updateEntityThemes(requestParameters.id, requestParameters.jsonApiThemeInDocument, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiUpdateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.updateEntityUserGroups = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .updateEntityUserGroups(requestParameters.id, requestParameters.jsonApiUserGroupInDocument, requestParameters.filter, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiUpdateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.updateEntityUserSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .updateEntityUserSettings(requestParameters.userId, requestParameters.id, requestParameters.jsonApiUserSettingInDocument, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiUpdateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.updateEntityUsers = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .updateEntityUsers(requestParameters.id, requestParameters.jsonApiUserInDocument, requestParameters.filter, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiUpdateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.updateEntityVisualizationObjects = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .updateEntityVisualizationObjects(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiVisualizationObjectInDocument, requestParameters.filter, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiUpdateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.updateEntityWorkspaceDataFilters = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .updateEntityWorkspaceDataFilters(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiWorkspaceDataFilterInDocument, requestParameters.filter, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiUpdateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.updateEntityWorkspaceSettings = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .updateEntityWorkspaceSettings(requestParameters.workspaceId, requestParameters.objectId, requestParameters.jsonApiWorkspaceSettingInDocument, requestParameters.filter, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {EntitiesApiUpdateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    EntitiesApi.prototype.updateEntityWorkspaces = function (requestParameters, options) {
        var _this = this;
        return EntitiesApiFp(this.configuration)
            .updateEntityWorkspaces(requestParameters.id, requestParameters.jsonApiWorkspaceInDocument, requestParameters.filter, requestParameters.include, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return EntitiesApi;
}(BaseAPI));
export { EntitiesApi };
/**
 * LayoutApi - axios parameter creator
 * @export
 */
export var LayoutApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Retrieve current analytics model of the workspace.
         * @summary Get analytics model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyticsModel: function (workspaceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getAnalyticsModel", "workspaceId", workspaceId);
                    localVarPath = "/api/v1/layout/workspaces/{workspaceId}/analyticsModel".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieve all data sources including related physical model.
         * @summary Get all data sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourcesLayout: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/layout/dataSources";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieve current logical model of the workspace in declarative form.
         * @summary Get logical model
         * @param {string} workspaceId
         * @param {boolean} [includeParents]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogicalModel: function (workspaceId, includeParents, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getLogicalModel", "workspaceId", workspaceId);
                    localVarPath = "/api/v1/layout/workspaces/{workspaceId}/logicalModel".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (includeParents !== undefined) {
                        localVarQueryParameter["includeParents"] = includeParents;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieve complete layout of organization, workspaces, user-groups, etc.
         * @summary Get organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationLayout: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/layout/organization";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieve complete layout of tables with their columns
         * @summary Get data source physical model layout
         * @param {string} dataSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdmLayout: function (dataSourceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'dataSourceId' is not null or undefined
                    assertParamExists("getPdmLayout", "dataSourceId", dataSourceId);
                    localVarPath = "/api/v1/layout/dataSources/{dataSourceId}/physicalModel".replace("{" + "dataSourceId" + "}", encodeURIComponent(String(dataSourceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieve current set of permissions of the user-group in a declarative form.
         * @summary Get permissions for the user-group
         * @param {string} userGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGroupPermissions: function (userGroupId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userGroupId' is not null or undefined
                    assertParamExists("getUserGroupPermissions", "userGroupId", userGroupId);
                    localVarPath = "/api/v1/layout/userGroups/{userGroupId}/permissions".replace("{" + "userGroupId" + "}", encodeURIComponent(String(userGroupId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieve all user-groups eventually with parent group.
         * @summary Get all user groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGroupsLayout: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/layout/userGroups";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieve current set of permissions of the user in a declarative form.
         * @summary Get permissions for the user
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermissions: function (userId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    assertParamExists("getUserPermissions", "userId", userId);
                    localVarPath = "/api/v1/layout/users/{userId}/permissions".replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieve all users including authentication properties.
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersLayout: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/layout/users";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieve all users and user groups with theirs properties.
         * @summary Get all users and user groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersUserGroupsLayout: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/layout/usersAndUserGroups";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieve all workspaces and related workspace data filters (and their settings / values).
         * @summary Get workspace data filters for all workspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceDataFiltersLayout: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/layout/workspaceDataFilters";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieve current model of the workspace in declarative form.
         * @summary Get workspace layout
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceLayout: function (workspaceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getWorkspaceLayout", "workspaceId", workspaceId);
                    localVarPath = "/api/v1/layout/workspaces/{workspaceId}".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieve current set of permissions of the workspace in a declarative form.
         * @summary Get permissions for the workspace
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspacePermissions: function (workspaceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("getWorkspacePermissions", "workspaceId", workspaceId);
                    localVarPath = "/api/v1/layout/workspaces/{workspaceId}/permissions".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Gets complete layout of workspaces, their hierarchy, models.
         * @summary Get all workspaces layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspacesLayout: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/v1/layout/workspaces";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Set all data sources including related physical model.
         * @summary Put all data sources
         * @param {DeclarativeDataSources} declarativeDataSources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDataSourcesLayout: function (declarativeDataSources, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'declarativeDataSources' is not null or undefined
                    assertParamExists("putDataSourcesLayout", "declarativeDataSources", declarativeDataSources);
                    localVarPath = "/api/v1/layout/dataSources";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof declarativeDataSources !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(declarativeDataSources !== undefined ? declarativeDataSources : {})
                        : declarativeDataSources || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Define all user groups with their parents eventually.
         * @summary Put all user groups
         * @param {DeclarativeUserGroups} declarativeUserGroups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserGroupsLayout: function (declarativeUserGroups, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'declarativeUserGroups' is not null or undefined
                    assertParamExists("putUserGroupsLayout", "declarativeUserGroups", declarativeUserGroups);
                    localVarPath = "/api/v1/layout/userGroups";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof declarativeUserGroups !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(declarativeUserGroups !== undefined ? declarativeUserGroups : {})
                        : declarativeUserGroups || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Set all users and their authentication properties.
         * @summary Put all users
         * @param {DeclarativeUsers} declarativeUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersLayout: function (declarativeUsers, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'declarativeUsers' is not null or undefined
                    assertParamExists("putUsersLayout", "declarativeUsers", declarativeUsers);
                    localVarPath = "/api/v1/layout/users";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof declarativeUsers !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(declarativeUsers !== undefined ? declarativeUsers : {})
                        : declarativeUsers || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Define all users and user groups with theirs properties.
         * @summary Put all users and user groups
         * @param {DeclarativeUsersUserGroups} declarativeUsersUserGroups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersUserGroupsLayout: function (declarativeUsersUserGroups, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'declarativeUsersUserGroups' is not null or undefined
                    assertParamExists("putUsersUserGroupsLayout", "declarativeUsersUserGroups", declarativeUsersUserGroups);
                    localVarPath = "/api/v1/layout/usersAndUserGroups";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof declarativeUsersUserGroups !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(declarativeUsersUserGroups !== undefined ? declarativeUsersUserGroups : {})
                        : declarativeUsersUserGroups || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Set complete layout of workspace, like model, authorization, etc.
         * @summary Set workspace layout
         * @param {string} workspaceId
         * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceLayout: function (workspaceId, declarativeWorkspaceModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("putWorkspaceLayout", "workspaceId", workspaceId);
                    // verify required parameter 'declarativeWorkspaceModel' is not null or undefined
                    assertParamExists("putWorkspaceLayout", "declarativeWorkspaceModel", declarativeWorkspaceModel);
                    localVarPath = "/api/v1/layout/workspaces/{workspaceId}".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof declarativeWorkspaceModel !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(declarativeWorkspaceModel !== undefined ? declarativeWorkspaceModel : {})
                        : declarativeWorkspaceModel || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Set effective analytics model of the workspace.
         * @summary Set analytics model
         * @param {string} workspaceId
         * @param {DeclarativeAnalytics} declarativeAnalytics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAnalyticsModel: function (workspaceId, declarativeAnalytics, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("setAnalyticsModel", "workspaceId", workspaceId);
                    // verify required parameter 'declarativeAnalytics' is not null or undefined
                    assertParamExists("setAnalyticsModel", "declarativeAnalytics", declarativeAnalytics);
                    localVarPath = "/api/v1/layout/workspaces/{workspaceId}/analyticsModel".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof declarativeAnalytics !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(declarativeAnalytics !== undefined ? declarativeAnalytics : {})
                        : declarativeAnalytics || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Set effective logical model of the workspace.
         * @summary Set logical model
         * @param {string} workspaceId
         * @param {DeclarativeModel} declarativeModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLogicalModel: function (workspaceId, declarativeModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("setLogicalModel", "workspaceId", workspaceId);
                    // verify required parameter 'declarativeModel' is not null or undefined
                    assertParamExists("setLogicalModel", "declarativeModel", declarativeModel);
                    localVarPath = "/api/v1/layout/workspaces/{workspaceId}/logicalModel".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof declarativeModel !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(declarativeModel !== undefined ? declarativeModel : {})
                        : declarativeModel || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Sets complete layout of organization, like workspaces, user-groups, etc.
         * @summary Set organization layout
         * @param {DeclarativeOrganization} declarativeOrganization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOrganizationLayout: function (declarativeOrganization, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'declarativeOrganization' is not null or undefined
                    assertParamExists("setOrganizationLayout", "declarativeOrganization", declarativeOrganization);
                    localVarPath = "/api/v1/layout/organization";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof declarativeOrganization !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(declarativeOrganization !== undefined ? declarativeOrganization : {})
                        : declarativeOrganization || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Sets complete layout of tables with their columns under corresponding Data Source.
         * @summary Set data source physical model layout
         * @param {string} dataSourceId
         * @param {DeclarativePdm} declarativePdm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPdmLayout: function (dataSourceId, declarativePdm, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'dataSourceId' is not null or undefined
                    assertParamExists("setPdmLayout", "dataSourceId", dataSourceId);
                    // verify required parameter 'declarativePdm' is not null or undefined
                    assertParamExists("setPdmLayout", "declarativePdm", declarativePdm);
                    localVarPath = "/api/v1/layout/dataSources/{dataSourceId}/physicalModel".replace("{" + "dataSourceId" + "}", encodeURIComponent(String(dataSourceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof declarativePdm !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(declarativePdm !== undefined ? declarativePdm : {})
                        : declarativePdm || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Set effective permissions for the user-group
         * @summary Set permissions for the user-group
         * @param {string} userGroupId
         * @param {DeclarativeUserGroupPermissions} declarativeUserGroupPermissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserGroupPermissions: function (userGroupId, declarativeUserGroupPermissions, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'userGroupId' is not null or undefined
                    assertParamExists("setUserGroupPermissions", "userGroupId", userGroupId);
                    // verify required parameter 'declarativeUserGroupPermissions' is not null or undefined
                    assertParamExists("setUserGroupPermissions", "declarativeUserGroupPermissions", declarativeUserGroupPermissions);
                    localVarPath = "/api/v1/layout/userGroups/{userGroupId}/permissions".replace("{" + "userGroupId" + "}", encodeURIComponent(String(userGroupId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof declarativeUserGroupPermissions !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(declarativeUserGroupPermissions !== undefined ? declarativeUserGroupPermissions : {})
                        : declarativeUserGroupPermissions || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Set effective permissions for the user
         * @summary Set permissions for the user
         * @param {string} userId
         * @param {DeclarativeUserPermissions} declarativeUserPermissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserPermissions: function (userId, declarativeUserPermissions, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'userId' is not null or undefined
                    assertParamExists("setUserPermissions", "userId", userId);
                    // verify required parameter 'declarativeUserPermissions' is not null or undefined
                    assertParamExists("setUserPermissions", "declarativeUserPermissions", declarativeUserPermissions);
                    localVarPath = "/api/v1/layout/users/{userId}/permissions".replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof declarativeUserPermissions !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(declarativeUserPermissions !== undefined ? declarativeUserPermissions : {})
                        : declarativeUserPermissions || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Sets workspace data filters in all workspaces in entire organization.
         * @summary Set all workspace data filters
         * @param {DeclarativeWorkspaceDataFilters} declarativeWorkspaceDataFilters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspaceDataFiltersLayout: function (declarativeWorkspaceDataFilters, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'declarativeWorkspaceDataFilters' is not null or undefined
                    assertParamExists("setWorkspaceDataFiltersLayout", "declarativeWorkspaceDataFilters", declarativeWorkspaceDataFilters);
                    localVarPath = "/api/v1/layout/workspaceDataFilters";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof declarativeWorkspaceDataFilters !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(declarativeWorkspaceDataFilters !== undefined ? declarativeWorkspaceDataFilters : {})
                        : declarativeWorkspaceDataFilters || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Set effective permissions for the workspace
         * @summary Set permissions for the workspace
         * @param {string} workspaceId
         * @param {DeclarativeWorkspacePermissions} declarativeWorkspacePermissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspacePermissions: function (workspaceId, declarativeWorkspacePermissions, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("setWorkspacePermissions", "workspaceId", workspaceId);
                    // verify required parameter 'declarativeWorkspacePermissions' is not null or undefined
                    assertParamExists("setWorkspacePermissions", "declarativeWorkspacePermissions", declarativeWorkspacePermissions);
                    localVarPath = "/api/v1/layout/workspaces/{workspaceId}/permissions".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof declarativeWorkspacePermissions !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(declarativeWorkspacePermissions !== undefined ? declarativeWorkspacePermissions : {})
                        : declarativeWorkspacePermissions || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Sets complete layout of workspaces, their hierarchy, models.
         * @summary Set all workspaces layout
         * @param {DeclarativeWorkspaces} declarativeWorkspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspacesLayout: function (declarativeWorkspaces, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'declarativeWorkspaces' is not null or undefined
                    assertParamExists("setWorkspacesLayout", "declarativeWorkspaces", declarativeWorkspaces);
                    localVarPath = "/api/v1/layout/workspaces";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof declarativeWorkspaces !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(declarativeWorkspaces !== undefined ? declarativeWorkspaces : {})
                        : declarativeWorkspaces || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * LayoutApi - functional programming interface
 * @export
 */
export var LayoutApiFp = function (configuration) {
    var localVarAxiosParamCreator = LayoutApiAxiosParamCreator(configuration);
    return {
        /**
         * Retrieve current analytics model of the workspace.
         * @summary Get analytics model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyticsModel: function (workspaceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAnalyticsModel(workspaceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve all data sources including related physical model.
         * @summary Get all data sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourcesLayout: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDataSourcesLayout(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve current logical model of the workspace in declarative form.
         * @summary Get logical model
         * @param {string} workspaceId
         * @param {boolean} [includeParents]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogicalModel: function (workspaceId, includeParents, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLogicalModel(workspaceId, includeParents, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve complete layout of organization, workspaces, user-groups, etc.
         * @summary Get organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationLayout: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getOrganizationLayout(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve complete layout of tables with their columns
         * @summary Get data source physical model layout
         * @param {string} dataSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdmLayout: function (dataSourceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPdmLayout(dataSourceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve current set of permissions of the user-group in a declarative form.
         * @summary Get permissions for the user-group
         * @param {string} userGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGroupPermissions: function (userGroupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUserGroupPermissions(userGroupId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve all user-groups eventually with parent group.
         * @summary Get all user groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGroupsLayout: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUserGroupsLayout(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve current set of permissions of the user in a declarative form.
         * @summary Get permissions for the user
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermissions: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUserPermissions(userId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve all users including authentication properties.
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersLayout: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUsersLayout(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve all users and user groups with theirs properties.
         * @summary Get all users and user groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersUserGroupsLayout: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUsersUserGroupsLayout(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve all workspaces and related workspace data filters (and their settings / values).
         * @summary Get workspace data filters for all workspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceDataFiltersLayout: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getWorkspaceDataFiltersLayout(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve current model of the workspace in declarative form.
         * @summary Get workspace layout
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceLayout: function (workspaceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getWorkspaceLayout(workspaceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve current set of permissions of the workspace in a declarative form.
         * @summary Get permissions for the workspace
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspacePermissions: function (workspaceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getWorkspacePermissions(workspaceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Gets complete layout of workspaces, their hierarchy, models.
         * @summary Get all workspaces layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspacesLayout: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getWorkspacesLayout(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set all data sources including related physical model.
         * @summary Put all data sources
         * @param {DeclarativeDataSources} declarativeDataSources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDataSourcesLayout: function (declarativeDataSources, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putDataSourcesLayout(declarativeDataSources, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Define all user groups with their parents eventually.
         * @summary Put all user groups
         * @param {DeclarativeUserGroups} declarativeUserGroups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserGroupsLayout: function (declarativeUserGroups, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putUserGroupsLayout(declarativeUserGroups, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set all users and their authentication properties.
         * @summary Put all users
         * @param {DeclarativeUsers} declarativeUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersLayout: function (declarativeUsers, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putUsersLayout(declarativeUsers, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Define all users and user groups with theirs properties.
         * @summary Put all users and user groups
         * @param {DeclarativeUsersUserGroups} declarativeUsersUserGroups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersUserGroupsLayout: function (declarativeUsersUserGroups, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putUsersUserGroupsLayout(declarativeUsersUserGroups, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set complete layout of workspace, like model, authorization, etc.
         * @summary Set workspace layout
         * @param {string} workspaceId
         * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceLayout: function (workspaceId, declarativeWorkspaceModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putWorkspaceLayout(workspaceId, declarativeWorkspaceModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set effective analytics model of the workspace.
         * @summary Set analytics model
         * @param {string} workspaceId
         * @param {DeclarativeAnalytics} declarativeAnalytics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAnalyticsModel: function (workspaceId, declarativeAnalytics, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setAnalyticsModel(workspaceId, declarativeAnalytics, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set effective logical model of the workspace.
         * @summary Set logical model
         * @param {string} workspaceId
         * @param {DeclarativeModel} declarativeModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLogicalModel: function (workspaceId, declarativeModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setLogicalModel(workspaceId, declarativeModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Sets complete layout of organization, like workspaces, user-groups, etc.
         * @summary Set organization layout
         * @param {DeclarativeOrganization} declarativeOrganization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOrganizationLayout: function (declarativeOrganization, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setOrganizationLayout(declarativeOrganization, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Sets complete layout of tables with their columns under corresponding Data Source.
         * @summary Set data source physical model layout
         * @param {string} dataSourceId
         * @param {DeclarativePdm} declarativePdm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPdmLayout: function (dataSourceId, declarativePdm, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setPdmLayout(dataSourceId, declarativePdm, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set effective permissions for the user-group
         * @summary Set permissions for the user-group
         * @param {string} userGroupId
         * @param {DeclarativeUserGroupPermissions} declarativeUserGroupPermissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserGroupPermissions: function (userGroupId, declarativeUserGroupPermissions, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setUserGroupPermissions(userGroupId, declarativeUserGroupPermissions, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set effective permissions for the user
         * @summary Set permissions for the user
         * @param {string} userId
         * @param {DeclarativeUserPermissions} declarativeUserPermissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserPermissions: function (userId, declarativeUserPermissions, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setUserPermissions(userId, declarativeUserPermissions, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Sets workspace data filters in all workspaces in entire organization.
         * @summary Set all workspace data filters
         * @param {DeclarativeWorkspaceDataFilters} declarativeWorkspaceDataFilters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspaceDataFiltersLayout: function (declarativeWorkspaceDataFilters, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setWorkspaceDataFiltersLayout(declarativeWorkspaceDataFilters, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set effective permissions for the workspace
         * @summary Set permissions for the workspace
         * @param {string} workspaceId
         * @param {DeclarativeWorkspacePermissions} declarativeWorkspacePermissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspacePermissions: function (workspaceId, declarativeWorkspacePermissions, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setWorkspacePermissions(workspaceId, declarativeWorkspacePermissions, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Sets complete layout of workspaces, their hierarchy, models.
         * @summary Set all workspaces layout
         * @param {DeclarativeWorkspaces} declarativeWorkspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspacesLayout: function (declarativeWorkspaces, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setWorkspacesLayout(declarativeWorkspaces, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * LayoutApi - factory interface
 * @export
 */
export var LayoutApiFactory = function (configuration, basePath, axios) {
    var localVarFp = LayoutApiFp(configuration);
    return {
        /**
         * Retrieve current analytics model of the workspace.
         * @summary Get analytics model
         * @param {LayoutApiGetAnalyticsModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyticsModel: function (requestParameters, options) {
            return localVarFp
                .getAnalyticsModel(requestParameters.workspaceId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve all data sources including related physical model.
         * @summary Get all data sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourcesLayout: function (options) {
            return localVarFp.getDataSourcesLayout(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve current logical model of the workspace in declarative form.
         * @summary Get logical model
         * @param {LayoutApiGetLogicalModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogicalModel: function (requestParameters, options) {
            return localVarFp
                .getLogicalModel(requestParameters.workspaceId, requestParameters.includeParents, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve complete layout of organization, workspaces, user-groups, etc.
         * @summary Get organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationLayout: function (options) {
            return localVarFp.getOrganizationLayout(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve complete layout of tables with their columns
         * @summary Get data source physical model layout
         * @param {LayoutApiGetPdmLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdmLayout: function (requestParameters, options) {
            return localVarFp
                .getPdmLayout(requestParameters.dataSourceId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve current set of permissions of the user-group in a declarative form.
         * @summary Get permissions for the user-group
         * @param {LayoutApiGetUserGroupPermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGroupPermissions: function (requestParameters, options) {
            return localVarFp
                .getUserGroupPermissions(requestParameters.userGroupId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve all user-groups eventually with parent group.
         * @summary Get all user groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGroupsLayout: function (options) {
            return localVarFp.getUserGroupsLayout(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve current set of permissions of the user in a declarative form.
         * @summary Get permissions for the user
         * @param {LayoutApiGetUserPermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPermissions: function (requestParameters, options) {
            return localVarFp
                .getUserPermissions(requestParameters.userId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve all users including authentication properties.
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersLayout: function (options) {
            return localVarFp.getUsersLayout(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve all users and user groups with theirs properties.
         * @summary Get all users and user groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersUserGroupsLayout: function (options) {
            return localVarFp.getUsersUserGroupsLayout(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve all workspaces and related workspace data filters (and their settings / values).
         * @summary Get workspace data filters for all workspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceDataFiltersLayout: function (options) {
            return localVarFp
                .getWorkspaceDataFiltersLayout(options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve current model of the workspace in declarative form.
         * @summary Get workspace layout
         * @param {LayoutApiGetWorkspaceLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceLayout: function (requestParameters, options) {
            return localVarFp
                .getWorkspaceLayout(requestParameters.workspaceId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve current set of permissions of the workspace in a declarative form.
         * @summary Get permissions for the workspace
         * @param {LayoutApiGetWorkspacePermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspacePermissions: function (requestParameters, options) {
            return localVarFp
                .getWorkspacePermissions(requestParameters.workspaceId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets complete layout of workspaces, their hierarchy, models.
         * @summary Get all workspaces layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspacesLayout: function (options) {
            return localVarFp.getWorkspacesLayout(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set all data sources including related physical model.
         * @summary Put all data sources
         * @param {LayoutApiPutDataSourcesLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDataSourcesLayout: function (requestParameters, options) {
            return localVarFp
                .putDataSourcesLayout(requestParameters.declarativeDataSources, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Define all user groups with their parents eventually.
         * @summary Put all user groups
         * @param {LayoutApiPutUserGroupsLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserGroupsLayout: function (requestParameters, options) {
            return localVarFp
                .putUserGroupsLayout(requestParameters.declarativeUserGroups, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set all users and their authentication properties.
         * @summary Put all users
         * @param {LayoutApiPutUsersLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersLayout: function (requestParameters, options) {
            return localVarFp
                .putUsersLayout(requestParameters.declarativeUsers, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Define all users and user groups with theirs properties.
         * @summary Put all users and user groups
         * @param {LayoutApiPutUsersUserGroupsLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsersUserGroupsLayout: function (requestParameters, options) {
            return localVarFp
                .putUsersUserGroupsLayout(requestParameters.declarativeUsersUserGroups, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set complete layout of workspace, like model, authorization, etc.
         * @summary Set workspace layout
         * @param {LayoutApiPutWorkspaceLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceLayout: function (requestParameters, options) {
            return localVarFp
                .putWorkspaceLayout(requestParameters.workspaceId, requestParameters.declarativeWorkspaceModel, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set effective analytics model of the workspace.
         * @summary Set analytics model
         * @param {LayoutApiSetAnalyticsModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAnalyticsModel: function (requestParameters, options) {
            return localVarFp
                .setAnalyticsModel(requestParameters.workspaceId, requestParameters.declarativeAnalytics, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set effective logical model of the workspace.
         * @summary Set logical model
         * @param {LayoutApiSetLogicalModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLogicalModel: function (requestParameters, options) {
            return localVarFp
                .setLogicalModel(requestParameters.workspaceId, requestParameters.declarativeModel, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Sets complete layout of organization, like workspaces, user-groups, etc.
         * @summary Set organization layout
         * @param {LayoutApiSetOrganizationLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOrganizationLayout: function (requestParameters, options) {
            return localVarFp
                .setOrganizationLayout(requestParameters.declarativeOrganization, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Sets complete layout of tables with their columns under corresponding Data Source.
         * @summary Set data source physical model layout
         * @param {LayoutApiSetPdmLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPdmLayout: function (requestParameters, options) {
            return localVarFp
                .setPdmLayout(requestParameters.dataSourceId, requestParameters.declarativePdm, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set effective permissions for the user-group
         * @summary Set permissions for the user-group
         * @param {LayoutApiSetUserGroupPermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserGroupPermissions: function (requestParameters, options) {
            return localVarFp
                .setUserGroupPermissions(requestParameters.userGroupId, requestParameters.declarativeUserGroupPermissions, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set effective permissions for the user
         * @summary Set permissions for the user
         * @param {LayoutApiSetUserPermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserPermissions: function (requestParameters, options) {
            return localVarFp
                .setUserPermissions(requestParameters.userId, requestParameters.declarativeUserPermissions, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Sets workspace data filters in all workspaces in entire organization.
         * @summary Set all workspace data filters
         * @param {LayoutApiSetWorkspaceDataFiltersLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspaceDataFiltersLayout: function (requestParameters, options) {
            return localVarFp
                .setWorkspaceDataFiltersLayout(requestParameters.declarativeWorkspaceDataFilters, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set effective permissions for the workspace
         * @summary Set permissions for the workspace
         * @param {LayoutApiSetWorkspacePermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspacePermissions: function (requestParameters, options) {
            return localVarFp
                .setWorkspacePermissions(requestParameters.workspaceId, requestParameters.declarativeWorkspacePermissions, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Sets complete layout of workspaces, their hierarchy, models.
         * @summary Set all workspaces layout
         * @param {LayoutApiSetWorkspacesLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspacesLayout: function (requestParameters, options) {
            return localVarFp
                .setWorkspacesLayout(requestParameters.declarativeWorkspaces, options)
                .then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * LayoutApi - object-oriented interface
 * @export
 * @class LayoutApi
 * @extends {BaseAPI}
 */
var LayoutApi = /** @class */ (function (_super) {
    __extends(LayoutApi, _super);
    function LayoutApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {LayoutApiGetAnalyticsModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.getAnalyticsModel = function (requestParameters, options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .getAnalyticsModel(requestParameters.workspaceId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve all data sources including related physical model.
     * @summary Get all data sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.getDataSourcesLayout = function (options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .getDataSourcesLayout(options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {LayoutApiGetLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.getLogicalModel = function (requestParameters, options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .getLogicalModel(requestParameters.workspaceId, requestParameters.includeParents, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.getOrganizationLayout = function (options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .getOrganizationLayout(options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve complete layout of tables with their columns
     * @summary Get data source physical model layout
     * @param {LayoutApiGetPdmLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.getPdmLayout = function (requestParameters, options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .getPdmLayout(requestParameters.dataSourceId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve current set of permissions of the user-group in a declarative form.
     * @summary Get permissions for the user-group
     * @param {LayoutApiGetUserGroupPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.getUserGroupPermissions = function (requestParameters, options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .getUserGroupPermissions(requestParameters.userGroupId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve all user-groups eventually with parent group.
     * @summary Get all user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.getUserGroupsLayout = function (options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .getUserGroupsLayout(options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve current set of permissions of the user in a declarative form.
     * @summary Get permissions for the user
     * @param {LayoutApiGetUserPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.getUserPermissions = function (requestParameters, options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .getUserPermissions(requestParameters.userId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve all users including authentication properties.
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.getUsersLayout = function (options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .getUsersLayout(options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve all users and user groups with theirs properties.
     * @summary Get all users and user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.getUsersUserGroupsLayout = function (options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .getUsersUserGroupsLayout(options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve all workspaces and related workspace data filters (and their settings / values).
     * @summary Get workspace data filters for all workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.getWorkspaceDataFiltersLayout = function (options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .getWorkspaceDataFiltersLayout(options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {LayoutApiGetWorkspaceLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.getWorkspaceLayout = function (requestParameters, options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .getWorkspaceLayout(requestParameters.workspaceId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve current set of permissions of the workspace in a declarative form.
     * @summary Get permissions for the workspace
     * @param {LayoutApiGetWorkspacePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.getWorkspacePermissions = function (requestParameters, options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .getWorkspacePermissions(requestParameters.workspaceId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets complete layout of workspaces, their hierarchy, models.
     * @summary Get all workspaces layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.getWorkspacesLayout = function (options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .getWorkspacesLayout(options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set all data sources including related physical model.
     * @summary Put all data sources
     * @param {LayoutApiPutDataSourcesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.putDataSourcesLayout = function (requestParameters, options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .putDataSourcesLayout(requestParameters.declarativeDataSources, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Define all user groups with their parents eventually.
     * @summary Put all user groups
     * @param {LayoutApiPutUserGroupsLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.putUserGroupsLayout = function (requestParameters, options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .putUserGroupsLayout(requestParameters.declarativeUserGroups, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set all users and their authentication properties.
     * @summary Put all users
     * @param {LayoutApiPutUsersLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.putUsersLayout = function (requestParameters, options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .putUsersLayout(requestParameters.declarativeUsers, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Define all users and user groups with theirs properties.
     * @summary Put all users and user groups
     * @param {LayoutApiPutUsersUserGroupsLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.putUsersUserGroupsLayout = function (requestParameters, options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .putUsersUserGroupsLayout(requestParameters.declarativeUsersUserGroups, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set complete layout of workspace, like model, authorization, etc.
     * @summary Set workspace layout
     * @param {LayoutApiPutWorkspaceLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.putWorkspaceLayout = function (requestParameters, options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .putWorkspaceLayout(requestParameters.workspaceId, requestParameters.declarativeWorkspaceModel, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {LayoutApiSetAnalyticsModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.setAnalyticsModel = function (requestParameters, options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .setAnalyticsModel(requestParameters.workspaceId, requestParameters.declarativeAnalytics, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {LayoutApiSetLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.setLogicalModel = function (requestParameters, options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .setLogicalModel(requestParameters.workspaceId, requestParameters.declarativeModel, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {LayoutApiSetOrganizationLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.setOrganizationLayout = function (requestParameters, options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .setOrganizationLayout(requestParameters.declarativeOrganization, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Sets complete layout of tables with their columns under corresponding Data Source.
     * @summary Set data source physical model layout
     * @param {LayoutApiSetPdmLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.setPdmLayout = function (requestParameters, options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .setPdmLayout(requestParameters.dataSourceId, requestParameters.declarativePdm, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set effective permissions for the user-group
     * @summary Set permissions for the user-group
     * @param {LayoutApiSetUserGroupPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.setUserGroupPermissions = function (requestParameters, options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .setUserGroupPermissions(requestParameters.userGroupId, requestParameters.declarativeUserGroupPermissions, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set effective permissions for the user
     * @summary Set permissions for the user
     * @param {LayoutApiSetUserPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.setUserPermissions = function (requestParameters, options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .setUserPermissions(requestParameters.userId, requestParameters.declarativeUserPermissions, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Sets workspace data filters in all workspaces in entire organization.
     * @summary Set all workspace data filters
     * @param {LayoutApiSetWorkspaceDataFiltersLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.setWorkspaceDataFiltersLayout = function (requestParameters, options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .setWorkspaceDataFiltersLayout(requestParameters.declarativeWorkspaceDataFilters, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set effective permissions for the workspace
     * @summary Set permissions for the workspace
     * @param {LayoutApiSetWorkspacePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.setWorkspacePermissions = function (requestParameters, options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .setWorkspacePermissions(requestParameters.workspaceId, requestParameters.declarativeWorkspacePermissions, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {LayoutApiSetWorkspacesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    LayoutApi.prototype.setWorkspacesLayout = function (requestParameters, options) {
        var _this = this;
        return LayoutApiFp(this.configuration)
            .setWorkspacesLayout(requestParameters.declarativeWorkspaces, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LayoutApi;
}(BaseAPI));
export { LayoutApi };
//# sourceMappingURL=api.js.map