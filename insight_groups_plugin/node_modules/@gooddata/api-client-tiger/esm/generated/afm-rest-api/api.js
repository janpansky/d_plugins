// (C) 2023 GoodData Corporation
import { __assign, __awaiter, __extends, __generator } from "tslib";
import globalAxios from "axios";
// Some imports not used depending on template conditions, we also need prettier-ignore so that the import does not get split and ts-ignore still works
// prettier-ignore
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, toPathString, createRequestFunction } from './common';
// Some imports not used depending on template conditions, we also need prettier-ignore so that the import does not get split and ts-ignore still works
// prettier-ignore
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI } from './base';
export var AfmObjectIdentifierAttributeIdentifierTypeEnum = {
    ATTRIBUTE: "attribute",
};
export var AfmObjectIdentifierCoreIdentifierTypeEnum = {
    ATTRIBUTE: "attribute",
    LABEL: "label",
    FACT: "fact",
    METRIC: "metric",
};
export var AfmObjectIdentifierDatasetIdentifierTypeEnum = {
    DATASET: "dataset",
};
export var AfmObjectIdentifierIdentifierTypeEnum = {
    ANALYTICAL_DASHBOARD: "analyticalDashboard",
    ATTRIBUTE: "attribute",
    DASHBOARD_PLUGIN: "dashboardPlugin",
    DATASET: "dataset",
    FACT: "fact",
    LABEL: "label",
    METRIC: "metric",
    PROMPT: "prompt",
    VISUALIZATION_OBJECT: "visualizationObject",
    FILTER_CONTEXT: "filterContext",
};
export var AfmObjectIdentifierLabelIdentifierTypeEnum = {
    LABEL: "label",
};
export var AfmValidObjectsQueryTypesEnum = {
    FACTS: "facts",
    ATTRIBUTES: "attributes",
    MEASURES: "measures",
    UNRECOGNIZED: "UNRECOGNIZED",
};
export var ArithmeticMeasureDefinitionArithmeticMeasureOperatorEnum = {
    SUM: "SUM",
    DIFFERENCE: "DIFFERENCE",
    MULTIPLICATION: "MULTIPLICATION",
    RATIO: "RATIO",
    CHANGE: "CHANGE",
};
export var AttributeHeaderOutAttributeHeaderGranularityEnum = {
    MINUTE: "MINUTE",
    HOUR: "HOUR",
    DAY: "DAY",
    WEEK: "WEEK",
    MONTH: "MONTH",
    QUARTER: "QUARTER",
    YEAR: "YEAR",
    MINUTE_OF_HOUR: "MINUTE_OF_HOUR",
    HOUR_OF_DAY: "HOUR_OF_DAY",
    DAY_OF_WEEK: "DAY_OF_WEEK",
    DAY_OF_MONTH: "DAY_OF_MONTH",
    DAY_OF_YEAR: "DAY_OF_YEAR",
    WEEK_OF_YEAR: "WEEK_OF_YEAR",
    MONTH_OF_YEAR: "MONTH_OF_YEAR",
    QUARTER_OF_YEAR: "QUARTER_OF_YEAR",
};
export var ComparisonMeasureValueFilterComparisonMeasureValueFilterOperatorEnum = {
    GREATER_THAN: "GREATER_THAN",
    GREATER_THAN_OR_EQUAL_TO: "GREATER_THAN_OR_EQUAL_TO",
    LESS_THAN: "LESS_THAN",
    LESS_THAN_OR_EQUAL_TO: "LESS_THAN_OR_EQUAL_TO",
    EQUAL_TO: "EQUAL_TO",
    NOT_EQUAL_TO: "NOT_EQUAL_TO",
};
export var ElementsRequestSortOrderEnum = {
    ASC: "ASC",
    DESC: "DESC",
};
export var ElementsResponseGranularityEnum = {
    MINUTE: "MINUTE",
    HOUR: "HOUR",
    DAY: "DAY",
    WEEK: "WEEK",
    MONTH: "MONTH",
    QUARTER: "QUARTER",
    YEAR: "YEAR",
    MINUTE_OF_HOUR: "MINUTE_OF_HOUR",
    HOUR_OF_DAY: "HOUR_OF_DAY",
    DAY_OF_WEEK: "DAY_OF_WEEK",
    DAY_OF_MONTH: "DAY_OF_MONTH",
    DAY_OF_YEAR: "DAY_OF_YEAR",
    WEEK_OF_YEAR: "WEEK_OF_YEAR",
    MONTH_OF_YEAR: "MONTH_OF_YEAR",
    QUARTER_OF_YEAR: "QUARTER_OF_YEAR",
};
export var FilterByLabelTypeEnum = {
    PRIMARY: "PRIMARY",
    REQUESTED: "REQUESTED",
};
export var RangeMeasureValueFilterRangeMeasureValueFilterOperatorEnum = {
    BETWEEN: "BETWEEN",
    NOT_BETWEEN: "NOT_BETWEEN",
};
export var RankingFilterRankingFilterOperatorEnum = {
    TOP: "TOP",
    BOTTOM: "BOTTOM",
};
export var RelativeDateFilterRelativeDateFilterGranularityEnum = {
    MINUTE: "MINUTE",
    HOUR: "HOUR",
    DAY: "DAY",
    WEEK: "WEEK",
    MONTH: "MONTH",
    QUARTER: "QUARTER",
    YEAR: "YEAR",
    MINUTE_OF_HOUR: "MINUTE_OF_HOUR",
    HOUR_OF_DAY: "HOUR_OF_DAY",
    DAY_OF_WEEK: "DAY_OF_WEEK",
    DAY_OF_MONTH: "DAY_OF_MONTH",
    DAY_OF_YEAR: "DAY_OF_YEAR",
    WEEK_OF_YEAR: "WEEK_OF_YEAR",
    MONTH_OF_YEAR: "MONTH_OF_YEAR",
    QUARTER_OF_YEAR: "QUARTER_OF_YEAR",
};
export var SimpleMeasureDefinitionMeasureAggregationEnum = {
    SUM: "SUM",
    COUNT: "COUNT",
    AVG: "AVG",
    MIN: "MIN",
    MAX: "MAX",
    MEDIAN: "MEDIAN",
    RUNSUM: "RUNSUM",
    APPROXIMATE_COUNT: "APPROXIMATE_COUNT",
};
export var SortKeyAttributeAttributeSortTypeEnum = {
    DEFAULT: "DEFAULT",
    LABEL: "LABEL",
    ATTRIBUTE: "ATTRIBUTE",
    AREA: "AREA",
};
export var SortKeyAttributeAttributeDirectionEnum = {
    ASC: "ASC",
    DESC: "DESC",
};
export var SortKeyTotalTotalDirectionEnum = {
    ASC: "ASC",
    DESC: "DESC",
};
export var SortKeyValueValueDirectionEnum = {
    ASC: "ASC",
    DESC: "DESC",
};
export var TotalFunctionEnum = {
    SUM: "SUM",
    MIN: "MIN",
    MAX: "MAX",
    AVG: "AVG",
    MED: "MED",
};
/**
 * ActionsApi - axios parameter creator
 * @export
 */
export var ActionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Returns paged list of elements (values) of given label satisfying given filtering criteria.
         * @summary Listing of label values. The resulting data are limited by the static platform limit to the maximum of 10000 rows.
         * @param {string} workspaceId Workspace identifier
         * @param {ElementsRequest} elementsRequest
         * @param {number} [offset] Request page with this offset. Must be positive integer. The API is limited to the maximum of 10000 items. Therefore this parameter is limited to this number as well.
         * @param {number} [limit] Return only this number of items. Must be positive integer. The API is limited to the maximum of 10000 items. Therefore this parameter is limited to this number as well.
         * @param {boolean} [skipCache] Ignore all caches during execution of current request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        computeLabelElementsPost: function (workspaceId, elementsRequest, offset, limit, skipCache, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("computeLabelElementsPost", "workspaceId", workspaceId);
                    // verify required parameter 'elementsRequest' is not null or undefined
                    assertParamExists("computeLabelElementsPost", "elementsRequest", elementsRequest);
                    localVarPath = "/api/v1/actions/workspaces/{workspaceId}/execution/collectLabelElements".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (offset !== undefined) {
                        localVarQueryParameter["offset"] = offset;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter["limit"] = limit;
                    }
                    if (skipCache !== undefined && skipCache !== null) {
                        localVarHeaderParameter["skip-cache"] = String(JSON.stringify(skipCache));
                    }
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof elementsRequest !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(elementsRequest !== undefined ? elementsRequest : {})
                        : elementsRequest || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * AFM is a combination of attributes, measures and filters that describe a query you want to execute.
         * @summary Executes analytical request and returns link to the result
         * @param {string} workspaceId Workspace identifier
         * @param {AfmExecution} afmExecution
         * @param {boolean} [skipCache] Ignore all caches during execution of current request.
         * @param {string} [timestamp]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        computeReport: function (workspaceId, afmExecution, skipCache, timestamp, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("computeReport", "workspaceId", workspaceId);
                    // verify required parameter 'afmExecution' is not null or undefined
                    assertParamExists("computeReport", "afmExecution", afmExecution);
                    localVarPath = "/api/v1/actions/workspaces/{workspaceId}/execution/afm/execute".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (skipCache !== undefined && skipCache !== null) {
                        localVarHeaderParameter["skip-cache"] = String(JSON.stringify(skipCache));
                    }
                    if (timestamp !== undefined && timestamp !== null) {
                        localVarHeaderParameter["timestamp"] = String(timestamp);
                    }
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof afmExecution !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(afmExecution !== undefined ? afmExecution : {})
                        : afmExecution || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Returns list containing attributes, facts, or metrics, which can be added to given AFM while still keeping it computable.
         * @summary Valid objects
         * @param {string} workspaceId Workspace identifier
         * @param {AfmValidObjectsQuery} afmValidObjectsQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        computeValidObjects: function (workspaceId, afmValidObjectsQuery, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("computeValidObjects", "workspaceId", workspaceId);
                    // verify required parameter 'afmValidObjectsQuery' is not null or undefined
                    assertParamExists("computeValidObjects", "afmValidObjectsQuery", afmValidObjectsQuery);
                    localVarPath = "/api/v1/actions/workspaces/{workspaceId}/execution/afm/computeValidObjects".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof afmValidObjectsQuery !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(afmValidObjectsQuery !== undefined ? afmValidObjectsQuery : {})
                        : afmValidObjectsQuery || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * The resource provides static structures needed for investigation of a problem with given AFM.
         * @summary AFM explain resource.
         * @param {string} workspaceId Workspace identifier
         * @param {AfmExecution} afmExecution
         * @param {'MAQL' | 'GRPC_MODEL' | 'WDF' | 'QT' | 'QT_SVG' | 'OPT_QT' | 'OPT_QT_SVG' | 'SQL' | 'SETTINGS'} [explainType] Requested explain type. If not specified all types are bundled in a ZIP archive.  &#x60;MAQL&#x60; - MAQL Abstract Syntax Tree, execution dimensions and related info  &#x60;GRPC_MODEL&#x60; - Datasets used in execution  &#x60;WDF&#x60; - Workspace data filters in execution workspace context  &#x60;QT&#x60; - Query Tree, created from MAQL AST using Logical Data Model,  contains all information needed to generate SQL  &#x60;QT_SVG&#x60; - Generated SVG image of the Query Tree  &#x60;OPT_QT&#x60; - Optimized Query Tree  &#x60;OPT_QT_SVG&#x60; - Generated SVG image of the Optimized Query Tree  &#x60;SQL&#x60; - Final SQL to be executed  &#x60;SETTINGS&#x60; - Settings used to execute explain request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        explainAFM: function (workspaceId, afmExecution, explainType, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("explainAFM", "workspaceId", workspaceId);
                    // verify required parameter 'afmExecution' is not null or undefined
                    assertParamExists("explainAFM", "afmExecution", afmExecution);
                    localVarPath = "/api/v1/actions/workspaces/{workspaceId}/execution/afm/explain".replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (explainType !== undefined) {
                        localVarQueryParameter["explainType"] = explainType;
                    }
                    localVarHeaderParameter["Content-Type"] = "application/json";
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof afmExecution !== "string" ||
                        localVarRequestOptions.headers["Content-Type"] === "application/json";
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(afmExecution !== undefined ? afmExecution : {})
                        : afmExecution || "";
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * The resource provides execution result\'s metadata as AFM and resultSpec used in execution request and an executionResponse
         * @summary Get a single execution result\'s metadata.
         * @param {string} workspaceId Workspace identifier
         * @param {string} resultId Result ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveExecutionMetadata: function (workspaceId, resultId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("retrieveExecutionMetadata", "workspaceId", workspaceId);
                    // verify required parameter 'resultId' is not null or undefined
                    assertParamExists("retrieveExecutionMetadata", "resultId", resultId);
                    localVarPath = "/api/v1/actions/workspaces/{workspaceId}/execution/afm/execute/result/{resultId}/metadata"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "resultId" + "}", encodeURIComponent(String(resultId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Gets a single execution result.
         * @summary Get a single execution result
         * @param {string} workspaceId Workspace identifier
         * @param {string} resultId Result ID
         * @param {Array<number>} [offset] Request page with these offsets. Format is offset&#x3D;1,2,3,... - one offset for each dimensions in ResultSpec from originating AFM.
         * @param {Array<number>} [limit] Return only this number of items. Format is limit&#x3D;1,2,3,... - one limit for each dimensions in ResultSpec from originating AFM.
         * @param {Array<string>} [excludedTotalDimensions] Identifiers of the dimensions where grand total data should not be returned for this request. A grand total will not be returned if all of its totalDimensions are in excludedTotalDimensions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveResult: function (workspaceId, resultId, offset, limit, excludedTotalDimensions, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    assertParamExists("retrieveResult", "workspaceId", workspaceId);
                    // verify required parameter 'resultId' is not null or undefined
                    assertParamExists("retrieveResult", "resultId", resultId);
                    localVarPath = "/api/v1/actions/workspaces/{workspaceId}/execution/afm/execute/result/{resultId}"
                        .replace("{" + "workspaceId" + "}", encodeURIComponent(String(workspaceId)))
                        .replace("{" + "resultId" + "}", encodeURIComponent(String(resultId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (offset) {
                        localVarQueryParameter["offset"] = offset.join(COLLECTION_FORMATS.csv);
                    }
                    if (limit) {
                        localVarQueryParameter["limit"] = limit.join(COLLECTION_FORMATS.csv);
                    }
                    if (excludedTotalDimensions) {
                        localVarQueryParameter["excludedTotalDimensions"] = excludedTotalDimensions.join(COLLECTION_FORMATS.csv);
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * ActionsApi - functional programming interface
 * @export
 */
export var ActionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = ActionsApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns paged list of elements (values) of given label satisfying given filtering criteria.
         * @summary Listing of label values. The resulting data are limited by the static platform limit to the maximum of 10000 rows.
         * @param {string} workspaceId Workspace identifier
         * @param {ElementsRequest} elementsRequest
         * @param {number} [offset] Request page with this offset. Must be positive integer. The API is limited to the maximum of 10000 items. Therefore this parameter is limited to this number as well.
         * @param {number} [limit] Return only this number of items. Must be positive integer. The API is limited to the maximum of 10000 items. Therefore this parameter is limited to this number as well.
         * @param {boolean} [skipCache] Ignore all caches during execution of current request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        computeLabelElementsPost: function (workspaceId, elementsRequest, offset, limit, skipCache, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.computeLabelElementsPost(workspaceId, elementsRequest, offset, limit, skipCache, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * AFM is a combination of attributes, measures and filters that describe a query you want to execute.
         * @summary Executes analytical request and returns link to the result
         * @param {string} workspaceId Workspace identifier
         * @param {AfmExecution} afmExecution
         * @param {boolean} [skipCache] Ignore all caches during execution of current request.
         * @param {string} [timestamp]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        computeReport: function (workspaceId, afmExecution, skipCache, timestamp, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.computeReport(workspaceId, afmExecution, skipCache, timestamp, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns list containing attributes, facts, or metrics, which can be added to given AFM while still keeping it computable.
         * @summary Valid objects
         * @param {string} workspaceId Workspace identifier
         * @param {AfmValidObjectsQuery} afmValidObjectsQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        computeValidObjects: function (workspaceId, afmValidObjectsQuery, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.computeValidObjects(workspaceId, afmValidObjectsQuery, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * The resource provides static structures needed for investigation of a problem with given AFM.
         * @summary AFM explain resource.
         * @param {string} workspaceId Workspace identifier
         * @param {AfmExecution} afmExecution
         * @param {'MAQL' | 'GRPC_MODEL' | 'WDF' | 'QT' | 'QT_SVG' | 'OPT_QT' | 'OPT_QT_SVG' | 'SQL' | 'SETTINGS'} [explainType] Requested explain type. If not specified all types are bundled in a ZIP archive.  &#x60;MAQL&#x60; - MAQL Abstract Syntax Tree, execution dimensions and related info  &#x60;GRPC_MODEL&#x60; - Datasets used in execution  &#x60;WDF&#x60; - Workspace data filters in execution workspace context  &#x60;QT&#x60; - Query Tree, created from MAQL AST using Logical Data Model,  contains all information needed to generate SQL  &#x60;QT_SVG&#x60; - Generated SVG image of the Query Tree  &#x60;OPT_QT&#x60; - Optimized Query Tree  &#x60;OPT_QT_SVG&#x60; - Generated SVG image of the Optimized Query Tree  &#x60;SQL&#x60; - Final SQL to be executed  &#x60;SETTINGS&#x60; - Settings used to execute explain request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        explainAFM: function (workspaceId, afmExecution, explainType, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.explainAFM(workspaceId, afmExecution, explainType, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * The resource provides execution result\'s metadata as AFM and resultSpec used in execution request and an executionResponse
         * @summary Get a single execution result\'s metadata.
         * @param {string} workspaceId Workspace identifier
         * @param {string} resultId Result ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveExecutionMetadata: function (workspaceId, resultId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.retrieveExecutionMetadata(workspaceId, resultId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Gets a single execution result.
         * @summary Get a single execution result
         * @param {string} workspaceId Workspace identifier
         * @param {string} resultId Result ID
         * @param {Array<number>} [offset] Request page with these offsets. Format is offset&#x3D;1,2,3,... - one offset for each dimensions in ResultSpec from originating AFM.
         * @param {Array<number>} [limit] Return only this number of items. Format is limit&#x3D;1,2,3,... - one limit for each dimensions in ResultSpec from originating AFM.
         * @param {Array<string>} [excludedTotalDimensions] Identifiers of the dimensions where grand total data should not be returned for this request. A grand total will not be returned if all of its totalDimensions are in excludedTotalDimensions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveResult: function (workspaceId, resultId, offset, limit, excludedTotalDimensions, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.retrieveResult(workspaceId, resultId, offset, limit, excludedTotalDimensions, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * ActionsApi - factory interface
 * @export
 */
export var ActionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = ActionsApiFp(configuration);
    return {
        /**
         * Returns paged list of elements (values) of given label satisfying given filtering criteria.
         * @summary Listing of label values. The resulting data are limited by the static platform limit to the maximum of 10000 rows.
         * @param {ActionsApiComputeLabelElementsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        computeLabelElementsPost: function (requestParameters, options) {
            return localVarFp
                .computeLabelElementsPost(requestParameters.workspaceId, requestParameters.elementsRequest, requestParameters.offset, requestParameters.limit, requestParameters.skipCache, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * AFM is a combination of attributes, measures and filters that describe a query you want to execute.
         * @summary Executes analytical request and returns link to the result
         * @param {ActionsApiComputeReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        computeReport: function (requestParameters, options) {
            return localVarFp
                .computeReport(requestParameters.workspaceId, requestParameters.afmExecution, requestParameters.skipCache, requestParameters.timestamp, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns list containing attributes, facts, or metrics, which can be added to given AFM while still keeping it computable.
         * @summary Valid objects
         * @param {ActionsApiComputeValidObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        computeValidObjects: function (requestParameters, options) {
            return localVarFp
                .computeValidObjects(requestParameters.workspaceId, requestParameters.afmValidObjectsQuery, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * The resource provides static structures needed for investigation of a problem with given AFM.
         * @summary AFM explain resource.
         * @param {ActionsApiExplainAFMRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        explainAFM: function (requestParameters, options) {
            return localVarFp
                .explainAFM(requestParameters.workspaceId, requestParameters.afmExecution, requestParameters.explainType, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * The resource provides execution result\'s metadata as AFM and resultSpec used in execution request and an executionResponse
         * @summary Get a single execution result\'s metadata.
         * @param {ActionsApiRetrieveExecutionMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveExecutionMetadata: function (requestParameters, options) {
            return localVarFp
                .retrieveExecutionMetadata(requestParameters.workspaceId, requestParameters.resultId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets a single execution result.
         * @summary Get a single execution result
         * @param {ActionsApiRetrieveResultRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveResult: function (requestParameters, options) {
            return localVarFp
                .retrieveResult(requestParameters.workspaceId, requestParameters.resultId, requestParameters.offset, requestParameters.limit, requestParameters.excludedTotalDimensions, options)
                .then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ActionsApi - object-oriented interface
 * @export
 * @class ActionsApi
 * @extends {BaseAPI}
 */
var ActionsApi = /** @class */ (function (_super) {
    __extends(ActionsApi, _super);
    function ActionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns paged list of elements (values) of given label satisfying given filtering criteria.
     * @summary Listing of label values. The resulting data are limited by the static platform limit to the maximum of 10000 rows.
     * @param {ActionsApiComputeLabelElementsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.computeLabelElementsPost = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .computeLabelElementsPost(requestParameters.workspaceId, requestParameters.elementsRequest, requestParameters.offset, requestParameters.limit, requestParameters.skipCache, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * AFM is a combination of attributes, measures and filters that describe a query you want to execute.
     * @summary Executes analytical request and returns link to the result
     * @param {ActionsApiComputeReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.computeReport = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .computeReport(requestParameters.workspaceId, requestParameters.afmExecution, requestParameters.skipCache, requestParameters.timestamp, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns list containing attributes, facts, or metrics, which can be added to given AFM while still keeping it computable.
     * @summary Valid objects
     * @param {ActionsApiComputeValidObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.computeValidObjects = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .computeValidObjects(requestParameters.workspaceId, requestParameters.afmValidObjectsQuery, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * The resource provides static structures needed for investigation of a problem with given AFM.
     * @summary AFM explain resource.
     * @param {ActionsApiExplainAFMRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.explainAFM = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .explainAFM(requestParameters.workspaceId, requestParameters.afmExecution, requestParameters.explainType, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * The resource provides execution result\'s metadata as AFM and resultSpec used in execution request and an executionResponse
     * @summary Get a single execution result\'s metadata.
     * @param {ActionsApiRetrieveExecutionMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.retrieveExecutionMetadata = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .retrieveExecutionMetadata(requestParameters.workspaceId, requestParameters.resultId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets a single execution result.
     * @summary Get a single execution result
     * @param {ActionsApiRetrieveResultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    ActionsApi.prototype.retrieveResult = function (requestParameters, options) {
        var _this = this;
        return ActionsApiFp(this.configuration)
            .retrieveResult(requestParameters.workspaceId, requestParameters.resultId, requestParameters.offset, requestParameters.limit, requestParameters.excludedTotalDimensions, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ActionsApi;
}(BaseAPI));
export { ActionsApi };
//# sourceMappingURL=api.js.map