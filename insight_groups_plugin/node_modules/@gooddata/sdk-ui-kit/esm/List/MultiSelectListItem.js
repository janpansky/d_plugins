import { __extends } from "tslib";
// (C) 2007-2022 GoodData Corporation
import React, { PureComponent } from "react";
import { FormattedMessage } from "react-intl";
import cx from "classnames";
import { stringUtils } from "@gooddata/util";
/**
 * @internal
 */
var MultiSelectListItem = /** @class */ (function (_super) {
    __extends(MultiSelectListItem, _super);
    function MultiSelectListItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.getClassNames = function () {
            var _a;
            var _b = _this.props, title = _b.title, isSelected = _b.isSelected;
            return cx((_a = {
                    "gd-list-item": true
                },
                _a["s-" + stringUtils.simplifyText(title)] = true,
                _a["has-only-visible"] = true,
                _a["is-selected"] = isSelected,
                _a));
        };
        _this.renderOnly = function () {
            var onOnly = _this.props.onOnly;
            return (React.createElement("span", { className: "gd-list-item-only", onClick: function (e) {
                    e.stopPropagation();
                    if (onOnly) {
                        onOnly();
                    }
                } },
                React.createElement(FormattedMessage, { id: "gs.list.only" })));
        };
        return _this;
    }
    MultiSelectListItem.prototype.render = function () {
        var _a = this.props, title = _a.title, onClick = _a.onClick, onMouseOver = _a.onMouseOver, onMouseOut = _a.onMouseOut, isSelected = _a.isSelected;
        return (React.createElement("div", { className: this.getClassNames(), onClick: onClick, onMouseOver: onMouseOver, onMouseOut: onMouseOut },
            React.createElement("label", { className: "input-checkbox-label" },
                React.createElement("input", { type: "checkbox", className: "input-checkbox", readOnly: true, checked: isSelected }),
                React.createElement("span", { className: "input-label-text" }, title)),
            this.renderOnly()));
    };
    return MultiSelectListItem;
}(PureComponent));
export { MultiSelectListItem };
//# sourceMappingURL=MultiSelectListItem.js.map