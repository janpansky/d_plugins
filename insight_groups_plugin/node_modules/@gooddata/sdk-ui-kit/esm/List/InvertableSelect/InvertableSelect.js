import { __assign } from "tslib";
// (C) 2007-2022 GoodData Corporation
import React, { useCallback } from "react";
import cx from "classnames";
import Measure from "react-measure";
import { LoadingMask } from "../../LoadingMask";
import { AsyncList } from "../AsyncList";
import { useInvertableSelect } from "./useInvertableSelect";
import { InvertableSelectSearchBar } from "./InvertableSelectSearchBar";
import { InvertableSelectAllCheckbox } from "./InvertableSelectAllCheckbox";
import { InvertableSelectStatusBar } from "./InvertableSelectStatusBar";
import { InvertableSelectNoResultsMatch } from "./InvertableSelectNoResultsMatch";
import { ErrorComponent } from "@gooddata/sdk-ui";
import { InvertableSelectItem } from "./InvertableSelectItem";
/**
 * @internal
 */
export function InvertableSelect(props) {
    var className = props.className, width = props.width, height = props.height, adaptiveWidth = props.adaptiveWidth, adaptiveHeight = props.adaptiveHeight, items = props.items, totalItemsCount = props.totalItemsCount, itemHeight = props.itemHeight, getItemTitle = props.getItemTitle, _a = props.isInverted, isInverted = _a === void 0 ? true : _a, selectedItems = props.selectedItems, _b = props.selectedItemsLimit, selectedItemsLimit = _b === void 0 ? Infinity : _b, onSearch = props.onSearch, searchString = props.searchString, searchPlaceholder = props.searchPlaceholder, error = props.error, isLoading = props.isLoading, nextPageItemPlaceholdersCount = props.nextPageItemPlaceholdersCount, isLoadingNextPage = props.isLoadingNextPage, onLoadNextPage = props.onLoadNextPage, _c = props.renderError, renderError = _c === void 0 ? defaultError : _c, _d = props.renderLoading, renderLoading = _d === void 0 ? defaultLoading : _d, _e = props.renderSearchBar, renderSearchBar = _e === void 0 ? defaultSearchBar : _e, _f = props.renderNoData, renderNoData = _f === void 0 ? defaultNoData : _f, _g = props.renderItem, renderItem = _g === void 0 ? defaultItem : _g, _h = props.renderStatusBar, renderStatusBar = _h === void 0 ? defaultStatusBar : _h, _j = props.renderActions, renderActions = _j === void 0 ? defaultActions : _j;
    var _k = useInvertableSelect(props), onSelectAllCheckboxChange = _k.onSelectAllCheckboxChange, onSelectAllCheckboxToggle = _k.onSelectAllCheckboxToggle, selectOnly = _k.selectOnly, selectItems = _k.selectItems, deselectItems = _k.deselectItems, selectionState = _k.selectionState, getIsItemSelected = _k.getIsItemSelected;
    var itemRenderer = useCallback(function (_a) {
        var item = _a.item;
        return renderItem({
            onSelect: function () {
                selectItems([item]);
            },
            onDeselect: function () {
                deselectItems([item]);
            },
            onSelectOnly: function () { return selectOnly(item); },
            item: item,
            isSelected: getIsItemSelected(item),
        });
    }, [renderItem, getIsItemSelected, selectItems, deselectItems, selectOnly]);
    return (React.createElement("div", { className: "gd-invertable-select" },
        React.createElement("div", { className: "gd-invertable-select-search-bar" }, renderSearchBar({ onSearch: onSearch, searchPlaceholder: searchPlaceholder, searchString: searchString })),
        isLoading ? (React.createElement("div", { className: "gd-invertable-select-loading" }, renderLoading({ height: height }))) : error ? (React.createElement("div", { className: "gd-invertable-select-error" }, renderError({ height: height, error: error }))) : (React.createElement(React.Fragment, null,
            renderActions({
                isVisible: items.length > 0,
                checked: selectionState !== "none",
                onToggle: onSelectAllCheckboxToggle,
                onChange: onSelectAllCheckboxChange,
                isFiltered: (searchString === null || searchString === void 0 ? void 0 : searchString.length) > 0,
                totalItemsCount: totalItemsCount,
                isPartialSelection: selectionState === "partial",
            }),
            items.length > 0 && (React.createElement(Measure, { client: true }, function (_a) {
                var measureRef = _a.measureRef, contentRect = _a.contentRect;
                return (React.createElement("div", { className: "gd-invertable-select-list", ref: measureRef },
                    React.createElement(AsyncList, { className: cx(["is-multiselect", className]), width: adaptiveWidth ? contentRect === null || contentRect === void 0 ? void 0 : contentRect.client.width : width, height: adaptiveHeight
                            ? contentRect === null || contentRect === void 0 ? void 0 : contentRect.client.height : Math.min(items.length, 10) * itemHeight, items: items, itemHeight: itemHeight, renderItem: itemRenderer, nextPageItemPlaceholdersCount: nextPageItemPlaceholdersCount, isLoadingNextPage: isLoadingNextPage, onLoadNextPage: onLoadNextPage })));
            })),
            items.length === 0 && (React.createElement("div", { className: "gd-invertable-select-no-data" }, renderNoData === null || renderNoData === void 0 ? void 0 : renderNoData({ height: height }))))),
        React.createElement("div", { className: "gd-invertable-select-status-bar" }, renderStatusBar({ getItemTitle: getItemTitle, isInverted: isInverted, selectedItems: selectedItems, selectedItemsLimit: selectedItemsLimit }))));
}
function defaultError(props) {
    var error = props.error;
    return React.createElement(ErrorComponent, { message: error === null || error === void 0 ? void 0 : error.message });
}
function defaultLoading(props) {
    var height = props.height;
    return React.createElement(LoadingMask, { height: height });
}
function defaultSearchBar(props) {
    var onSearch = props.onSearch, searchPlaceholder = props.searchPlaceholder, searchString = props.searchString;
    return (React.createElement(InvertableSelectSearchBar, { searchPlaceholder: searchPlaceholder, onSearch: onSearch, searchString: searchString }));
}
function defaultNoData() {
    return React.createElement(InvertableSelectNoResultsMatch, null);
}
function defaultItem(props) {
    return React.createElement(InvertableSelectItem, __assign({}, props));
}
function defaultStatusBar(props) {
    var isInverted = props.isInverted, selectedItems = props.selectedItems, getItemTitle = props.getItemTitle, selectedItemsLimit = props.selectedItemsLimit;
    return (React.createElement(InvertableSelectStatusBar, { isInverted: isInverted, selectedItems: selectedItems, getItemTitle: getItemTitle, selectedItemsLimit: selectedItemsLimit }));
}
function defaultActions(props) {
    var checked = props.checked, onToggle = props.onToggle, onChange = props.onChange, isFiltered = props.isFiltered, totalItemsCount = props.totalItemsCount, isPartialSelection = props.isPartialSelection, isVisible = props.isVisible;
    return (React.createElement(InvertableSelectAllCheckbox, { isVisible: isVisible, checked: checked, onChange: onChange, onToggle: onToggle, isFiltered: isFiltered, totalItemsCount: totalItemsCount, isPartialSelection: isPartialSelection }));
}
//# sourceMappingURL=InvertableSelect.js.map