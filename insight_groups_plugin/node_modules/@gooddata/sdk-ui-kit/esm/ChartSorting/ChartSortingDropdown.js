import { __read, __spread } from "tslib";
// (C) 2022 GoodData Corporation
import React, { useCallback } from "react";
import { AttributeDropdown } from "./AttributeDropdown/AttributeDropdown";
var getAttributeName = function (bucketItemNames, available) {
    return bucketItemNames[available.itemId.localIdentifier].name;
};
export var ChartSortingDropdown = function (_a) {
    var currentSort = _a.currentSort, availableSorts = _a.availableSorts, bucketItems = _a.bucketItems, intl = _a.intl, onSelect = _a.onSelect, enableRenamingMeasureToMetric = _a.enableRenamingMeasureToMetric;
    var onSortChanged = useCallback(function (newSort, index) {
        var newSortItems = __spread(currentSort);
        newSortItems[index] = newSort;
        onSelect(newSortItems);
    }, [onSelect, currentSort]);
    return (React.createElement("div", { className: "gd-sort-attribute-section" }, availableSorts === null || availableSorts === void 0 ? void 0 : availableSorts.map(function (availableSort, index) {
        // Obtain current sort item with the same id as current index
        var currentSortItem = currentSort[index];
        if (!currentSortItem) {
            return null;
        }
        return (React.createElement("div", { "aria-label": "sort-attribute-" + index, key: index, className: "gd-sort-attribute-item s-sort-attribute-item-" + index },
            availableSorts.length > 1 && (React.createElement("div", { className: "attribute-sorting-title" }, getAttributeName(bucketItems, availableSort))),
            React.createElement(AttributeDropdown, { index: index, currentSortItem: currentSortItem, availableSorts: availableSort, bucketItems: bucketItems, intl: intl, onSelect: function (newSort) {
                    onSortChanged(newSort, index);
                }, enableRenamingMeasureToMetric: enableRenamingMeasureToMetric })));
    })));
};
//# sourceMappingURL=ChartSortingDropdown.js.map