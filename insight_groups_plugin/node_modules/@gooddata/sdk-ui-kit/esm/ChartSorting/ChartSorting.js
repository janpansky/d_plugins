import { __assign, __read } from "tslib";
// (C) 2022 GoodData Corporation
import React, { useState, useCallback, useMemo } from "react";
import { injectIntl, FormattedMessage } from "react-intl";
import { IntlWrapper } from "@gooddata/sdk-ui";
import isEqual from "lodash/isEqual";
import { ChartSortingDropdownBody } from "./ChartSortingDropdownBody";
import { ChartSortingDropdown } from "./ChartSortingDropdown";
import { Button } from "../Button";
/**
 * @internal
 */
export var ChartSorting = function (_a) {
    var currentSort = _a.currentSort, availableSorts = _a.availableSorts, intl = _a.intl, bucketItems = _a.bucketItems, buttonNode = _a.buttonNode, onCancel = _a.onCancel, onApply = _a.onApply, enableRenamingMeasureToMetric = _a.enableRenamingMeasureToMetric;
    var _b = __read(useState(currentSort), 2), currentSelectedSort = _b[0], setCurrentSort = _b[1];
    var handleApply = useCallback(function () {
        onApply(currentSelectedSort);
    }, [currentSelectedSort]);
    var onSelect = function (item) {
        setCurrentSort(item);
    };
    var isApplyEnabled = useMemo(function () { return !isEqual(currentSort, currentSelectedSort); }, [currentSort, currentSelectedSort]);
    return (React.createElement(ChartSortingDropdownBody, { buttonNode: buttonNode, onClose: onCancel },
        React.createElement("div", { className: "gd-sort-charting-dropdown-header s-sort-charting-dropdown-header" },
            React.createElement(FormattedMessage, { id: "sorting.dropdown.header" })),
        React.createElement("div", { className: "gd-sort-charting-body gd-sort-charting-dropdown" },
            React.createElement(ChartSortingDropdown, { currentSort: currentSelectedSort, availableSorts: availableSorts, bucketItems: bucketItems, intl: intl, onSelect: onSelect, enableRenamingMeasureToMetric: enableRenamingMeasureToMetric })),
        React.createElement("div", { className: "gd-chart-sorting-dropdown-footer" },
            React.createElement(Button, { className: "gd-button-secondary gd-button-small s-sorting-dropdown-cancel", value: intl.formatMessage({ id: "cancel" }), onClick: onCancel }),
            React.createElement(Button, { className: "gd-button-action gd-button-small s-sorting-dropdown-apply", value: intl.formatMessage({ id: "apply" }), onClick: handleApply, disabled: !isApplyEnabled }))));
};
/**
 * @internal
 */
export var ChartSortingWithIntl = injectIntl(ChartSorting);
/**
 * @internal
 */
export var ChartSortingDialog = function (props) { return (React.createElement(IntlWrapper, { locale: props.locale },
    React.createElement(ChartSortingWithIntl, __assign({}, props)))); };
//# sourceMappingURL=ChartSorting.js.map