var _a;
import { __read } from "tslib";
// (C) 2022 GoodData Corporation
import React, { useState, useRef, useEffect, useCallback } from "react";
import { isAttributeSort, sortDirection, isAttributeAreaSort, newAttributeSort, newAttributeAreaSort, newMeasureSort, isMeasureLocator, } from "@gooddata/sdk-model";
import { SORT_TARGET_TYPE } from "../types";
import { Dropdown, DropdownButton, DropdownList } from "../../Dropdown";
import { SingleSelectListItem } from "../../List";
import { MeasureDropdown } from "../MeasureDropdown/MeasureDropdown";
var icons = (_a = {},
    _a[SORT_TARGET_TYPE.ALPHABETICAL_ASC] = "gd-icon-sort-alphabetical-asc",
    _a[SORT_TARGET_TYPE.ALPHABETICAL_DESC] = "gd-icon-sort-alphabetical-desc",
    _a[SORT_TARGET_TYPE.DATE_ASC] = "gd-icon-sort-date-asc",
    _a[SORT_TARGET_TYPE.DATE_DESC] = "gd-icon-sort-date-desc",
    _a[SORT_TARGET_TYPE.DEFAULT] = "gd-icon-sort-default",
    _a[SORT_TARGET_TYPE.NUMERICAL_ASC] = "gd-icon-sort-numerical-asc",
    _a[SORT_TARGET_TYPE.NUMERICAL_DESC] = "gd-icon-sort-numerical-desc",
    _a);
var getIconClassName = function (sortType) { return icons[sortType]; };
var getSortTypeItems = function (available, bucketItems, intl) {
    var _a;
    var sortTypeItems = [];
    var bucketItem = bucketItems[available.itemId.localIdentifier];
    if (available.attributeSort.normalSortEnabled && bucketItem.type === "attribute") {
        sortTypeItems.push({
            id: SORT_TARGET_TYPE.ALPHABETICAL_ASC,
            title: intl.formatMessage({ id: "sorting.type.alphabetical.asc" }),
            sortDirection: "asc",
            type: "alphabetical",
            localIdentifier: available.itemId.localIdentifier,
        }, {
            id: SORT_TARGET_TYPE.ALPHABETICAL_DESC,
            title: intl.formatMessage({ id: "sorting.type.alphabetical.desc" }),
            sortDirection: "desc",
            type: "alphabetical",
            localIdentifier: available.itemId.localIdentifier,
        });
    }
    if (available.attributeSort.normalSortEnabled && bucketItem.type === "chronologicalDate") {
        sortTypeItems.push({
            id: SORT_TARGET_TYPE.DATE_ASC,
            title: intl.formatMessage({ id: "sorting.type.date.asc" }),
            sortDirection: "asc",
            type: "date",
            localIdentifier: available.itemId.localIdentifier,
        }, {
            id: SORT_TARGET_TYPE.DATE_DESC,
            title: intl.formatMessage({ id: "sorting.type.date.desc" }),
            sortDirection: "desc",
            type: "date",
            localIdentifier: available.itemId.localIdentifier,
        });
    }
    if (available.attributeSort.areaSortEnabled || ((_a = available.metricSorts) === null || _a === void 0 ? void 0 : _a.length) > 0) {
        sortTypeItems.push({
            id: SORT_TARGET_TYPE.NUMERICAL_ASC,
            title: intl.formatMessage({ id: "sorting.type.numerical.asc" }),
            sortDirection: "asc",
            type: "numerical",
            localIdentifier: available.itemId.localIdentifier,
        }, {
            id: SORT_TARGET_TYPE.NUMERICAL_DESC,
            title: intl.formatMessage({ id: "sorting.type.numerical.desc" }),
            sortDirection: "desc",
            type: "numerical",
            localIdentifier: available.itemId.localIdentifier,
        });
    }
    if (available.attributeSort.normalSortEnabled && bucketItem.type === "genericDate") {
        sortTypeItems.push({
            id: SORT_TARGET_TYPE.DEFAULT,
            title: intl.formatMessage({ id: "sorting.type.default" }),
            sortDirection: "asc",
            type: "default",
            localIdentifier: available.itemId.localIdentifier,
        });
    }
    return sortTypeItems;
};
var getNumericSortTargetType = function (currentItem) {
    return sortDirection(currentItem) === "asc" ? SORT_TARGET_TYPE.NUMERICAL_ASC : SORT_TARGET_TYPE.NUMERICAL_DESC;
};
var getAlphabeticalSortTargetType = function (currentItem) {
    return sortDirection(currentItem) === "asc"
        ? SORT_TARGET_TYPE.ALPHABETICAL_ASC
        : SORT_TARGET_TYPE.ALPHABETICAL_DESC;
};
var getDateSortTargetType = function (currentItem) {
    return sortDirection(currentItem) === "asc" ? SORT_TARGET_TYPE.DATE_ASC : SORT_TARGET_TYPE.DATE_DESC;
};
var getSelectedItemId = function (currentItem, bucketItems) {
    if (isAttributeSort(currentItem)) {
        var bucketItem = bucketItems[currentItem.attributeSortItem.attributeIdentifier];
        if (isAttributeAreaSort(currentItem)) {
            return getNumericSortTargetType(currentItem);
        }
        if ((bucketItem === null || bucketItem === void 0 ? void 0 : bucketItem.type) === "chronologicalDate") {
            return getDateSortTargetType(currentItem);
        }
        if ((bucketItem === null || bucketItem === void 0 ? void 0 : bucketItem.type) === "genericDate") {
            return SORT_TARGET_TYPE.DEFAULT;
        }
        return getAlphabeticalSortTargetType(currentItem);
    }
    return getNumericSortTargetType(currentItem);
};
var getButtonValue = function (sortTypeItems, type) {
    var foundItem = sortTypeItems.find(function (sortTypeItems) { return sortTypeItems.id === type; });
    return foundItem ? foundItem.title : "";
};
var buildSortItem = function (_a, availableSorts) {
    var type = _a.type, localIdentifier = _a.localIdentifier, sortDirection = _a.sortDirection;
    if (type === "alphabetical" || type === "date" || type === "default") {
        return newAttributeSort(localIdentifier, sortDirection);
    }
    else if (availableSorts.attributeSort.areaSortEnabled) {
        return newAttributeAreaSort(localIdentifier, sortDirection);
    }
    else {
        var measureLocatorItem = availableSorts.metricSorts[0].locators.find(isMeasureLocator).measureLocatorItem;
        return newMeasureSort(measureLocatorItem.measureIdentifier, sortDirection);
    }
};
export var AttributeDropdown = function (_a) {
    var currentSortItem = _a.currentSortItem, availableSorts = _a.availableSorts, bucketItems = _a.bucketItems, intl = _a.intl, index = _a.index, onSelect = _a.onSelect, enableRenamingMeasureToMetric = _a.enableRenamingMeasureToMetric;
    var _b = __read(useState(0), 2), width = _b[0], setWidth = _b[1];
    var buttonRef = useRef(null);
    useEffect(function () {
        if (buttonRef === null || buttonRef === void 0 ? void 0 : buttonRef.current) {
            setWidth(buttonRef.current.getBoundingClientRect().width);
        }
    }, []);
    var attributeSelectHandler = useCallback(function (selectedSortType) {
        var newCurrentItem = buildSortItem(selectedSortType, availableSorts);
        onSelect(newCurrentItem);
    }, [currentSortItem, onSelect, availableSorts]);
    var measureSelectHandler = useCallback(function (newCurrentItem) {
        onSelect(newCurrentItem);
    }, [currentSortItem, onSelect]);
    var sortTypeItems = getSortTypeItems(availableSorts, bucketItems, intl);
    var selectedSortType = getSelectedItemId(currentSortItem, bucketItems);
    var buttonValue = getButtonValue(sortTypeItems, selectedSortType);
    var renderMeasureDropdown = selectedSortType === SORT_TARGET_TYPE.NUMERICAL_ASC ||
        selectedSortType === SORT_TARGET_TYPE.NUMERICAL_DESC;
    return (React.createElement(React.Fragment, null,
        React.createElement(Dropdown, { closeOnMouseDrag: true, closeOnParentScroll: true, renderButton: function (_a) {
                var isOpen = _a.isOpen, toggleDropdown = _a.toggleDropdown;
                return (React.createElement("div", { ref: buttonRef },
                    React.createElement(DropdownButton, { className: "s-sort-type-attribute-button-" + index + " s-" + selectedSortType + "-dropdown-button s-attribute-dropdown-button", value: buttonValue, isOpen: isOpen, onClick: toggleDropdown, iconLeft: getIconClassName(selectedSortType) })));
            }, renderBody: function (_a) {
                var closeDropdown = _a.closeDropdown;
                return (React.createElement(DropdownList, { className: "gd-attribute-sorting-dropdown-body s-attribute-sorting-dropdown-body", items: sortTypeItems, width: width, renderItem: function (_a) {
                        var item = _a.item;
                        var id = item.id, title = item.title;
                        var isSelected = id === selectedSortType;
                        var iconClass = getIconClassName(id);
                        var tooltip = id === SORT_TARGET_TYPE.DEFAULT
                            ? intl.formatMessage({ id: "sorting.default.tooltip" })
                            : undefined;
                        return (React.createElement(SingleSelectListItem, { isSelected: isSelected, className: iconClass, title: title, onClick: function () {
                                attributeSelectHandler(item);
                                closeDropdown();
                            }, info: tooltip }));
                    } }));
            } }),
        renderMeasureDropdown ? (React.createElement(MeasureDropdown, { currentItem: currentSortItem, intl: intl, availableSorts: availableSorts, bucketItems: bucketItems, onSelect: measureSelectHandler, disabledExplanationTooltip: availableSorts.explanation, enableRenamingMeasureToMetric: enableRenamingMeasureToMetric, index: index })) : null));
};
//# sourceMappingURL=AttributeDropdown.js.map