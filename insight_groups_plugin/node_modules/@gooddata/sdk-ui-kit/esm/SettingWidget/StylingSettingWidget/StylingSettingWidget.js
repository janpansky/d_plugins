import { __assign, __read } from "tslib";
// (C) 2022 GoodData Corporation
import React, { useCallback, useEffect, useMemo, useState } from "react";
import cx from "classnames";
import noop from "lodash/noop";
import { useIntl } from "react-intl";
import { areObjRefsEqual } from "@gooddata/sdk-model";
import { IntlWrapper } from "@gooddata/sdk-ui";
import { StylingSettingBody } from "./StylingSettingBody";
import { Separator } from "../Separator";
import { SettingWidget } from "../SettingWidget";
import { Header } from "../Header";
import { Footer } from "../Footer";
import { Button } from "../../Button";
import { Message } from "../../Messages";
import { useMediaQuery } from "../../responsive";
import { Title } from "../Title";
import { FooterButtons } from "../FooterButtons";
import { Hyperlink } from "../../Hyperlink";
var StylingSettingWidgetCore = function (props) {
    var title = props.title, defaultItem = props.defaultItem, customItems = props.customItems, itemToColorPreview = props.itemToColorPreview, emptyMessage = props.emptyMessage, selectedItemRef = props.selectedItemRef, isLoading = props.isLoading, titleTooltip = props.titleTooltip, footerHelpLink = props.footerHelpLink, footerHelpTitle = props.footerHelpTitle, footerMobileMessage = props.footerMobileMessage, shouldDisableCancelButton = props.shouldDisableCancelButton, shouldDisableApplyButton = props.shouldDisableApplyButton, onApply = props.onApply, onCancel = props.onCancel, onListActionClick = props.onListActionClick, onItemEdit = props.onItemEdit, onItemDelete = props.onItemDelete, className = props.className, onHelpClick = props.onHelpClick, _a = props.onItemSelect, onItemSelect = _a === void 0 ? noop : _a, onItemMenuToggle = props.onItemMenuToggle;
    var intl = useIntl();
    var isMobileDevice = useMediaQuery("mobileDevice");
    var initiallySelectedItemRef = selectedItemRef || null;
    var _b = __read(useState(initiallySelectedItemRef), 2), currentItemRef = _b[0], setCurrentItemRef = _b[1];
    useEffect(function () {
        setCurrentItemRef(selectedItemRef);
    }, [selectedItemRef]);
    useEffect(function () {
        // currentItemRef == null represents basic default theme, skip this check
        if (currentItemRef && !customItems.find(function (ci) { return areObjRefsEqual(ci.ref, currentItemRef); })) {
            setCurrentItemRef(initiallySelectedItemRef);
        }
    }, [currentItemRef, customItems, customItems.length, initiallySelectedItemRef]);
    var onItemClick = useCallback(function (ref) {
        onItemSelect(ref);
        setCurrentItemRef(ref);
    }, [onItemSelect]);
    var isApplyButtonDisabled = useMemo(function () { return areObjRefsEqual(currentItemRef, selectedItemRef); }, [currentItemRef, selectedItemRef]);
    var handleCancel = useCallback(function () {
        setCurrentItemRef(selectedItemRef);
        onCancel === null || onCancel === void 0 ? void 0 : onCancel();
    }, [selectedItemRef]);
    var handleApply = useCallback(function () {
        onApply === null || onApply === void 0 ? void 0 : onApply(currentItemRef);
    }, [onApply, currentItemRef]);
    return (React.createElement(SettingWidget, { className: cx("s-styling-picker", className) },
        React.createElement(Header, null,
            React.createElement(Title, { title: title, tooltip: titleTooltip })),
        React.createElement(StylingSettingBody, { isMobile: isMobileDevice, defaultItem: defaultItem, customItems: customItems, itemToColorPreview: itemToColorPreview, emptyMessage: emptyMessage, isLoading: isLoading, onListActionClick: onListActionClick, initiallySelectedItemRef: initiallySelectedItemRef, selectedItemRef: currentItemRef, onItemClick: onItemClick, onItemEdit: onItemEdit, onItemDelete: onItemDelete, onItemMenuToggle: onItemMenuToggle }),
        React.createElement(Separator, null),
        React.createElement(Footer, null,
            isMobileDevice && footerMobileMessage ? (React.createElement(Message, { className: "gd-styling-picker-footer-message", type: "progress" }, footerMobileMessage)) : null,
            footerHelpLink && footerHelpTitle ? (React.createElement(Hyperlink, { text: footerHelpTitle, href: footerHelpLink, iconClass: "gd-icon-circle-question", onClick: onHelpClick })) : null,
            React.createElement(FooterButtons, null,
                React.createElement(Button, { className: "gd-button-secondary", onClick: handleCancel, disabled: shouldDisableCancelButton !== null && shouldDisableCancelButton !== void 0 ? shouldDisableCancelButton : isApplyButtonDisabled, value: intl.formatMessage({ id: "cancel" }) }),
                React.createElement(Button, { className: "gd-button-action", onClick: handleApply, disabled: shouldDisableApplyButton !== null && shouldDisableApplyButton !== void 0 ? shouldDisableApplyButton : isApplyButtonDisabled, value: intl.formatMessage({ id: "apply" }) })))));
};
/**
 * @internal
 */
export var StylingSettingWidget = function (props) {
    return (React.createElement(IntlWrapper, { locale: props.locale },
        React.createElement(StylingSettingWidgetCore, __assign({}, props))));
};
//# sourceMappingURL=StylingSettingWidget.js.map