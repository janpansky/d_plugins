// (C) 2022 GoodData Corporation
import React from "react";
import { useIntl } from "react-intl";
import { DialogListHeader } from "../../Dialog";
import { DialogListLoading } from "../../Dialog/DialogList/DialogListLoading";
import { StylingSettingList } from "./StylingSettingList";
import { StylingSettingListItem } from "./StylingSettingListItem";
export var StylingSettingBody = function (_a) {
    var isMobile = _a.isMobile, defaultItem = _a.defaultItem, customItems = _a.customItems, itemToColorPreview = _a.itemToColorPreview, emptyMessage = _a.emptyMessage, isLoading = _a.isLoading, onListActionClick = _a.onListActionClick, initiallySelectedItemRef = _a.initiallySelectedItemRef, selectedItemRef = _a.selectedItemRef, onItemClick = _a.onItemClick, onItemEdit = _a.onItemEdit, onItemDelete = _a.onItemDelete, onItemMenuToggle = _a.onItemMenuToggle;
    var intl = useIntl();
    return (React.createElement("div", { className: "gd-styling-picker-body" }, isLoading ? (React.createElement(DialogListLoading, { className: "gd-styling-picker-body-loading s-styling-picker-body-loading" })) : (React.createElement(React.Fragment, null,
        React.createElement("div", null,
            React.createElement(DialogListHeader, { className: "gd-styling-picker-list-header", title: intl.formatMessage({ id: "stylingPicker.title.basic" }) }),
            React.createElement(StylingSettingListItem, { item: defaultItem, itemToColorPreview: itemToColorPreview, isSelected: !selectedItemRef, onClick: function () { return onItemClick(null); } })),
        React.createElement("div", { className: "gd-styling-picker-list-wrapper" },
            React.createElement(DialogListHeader, { title: intl.formatMessage({ id: "stylingPicker.title.custom" }), buttonTitle: isMobile
                    ? undefined
                    : intl.formatMessage({ id: "stylingPicker.title.create" }), onButtonClick: onListActionClick, className: "gd-styling-picker-list-header s-styling-picker-list-header" }),
            React.createElement(StylingSettingList, { items: customItems, itemToColorPreview: itemToColorPreview, emptyMessageElement: emptyMessage(), onItemClick: onItemClick, onItemEdit: isMobile ? undefined : onItemEdit, onItemDelete: isMobile ? undefined : onItemDelete, initiallySelectedItemRef: initiallySelectedItemRef, selectedItemRef: selectedItemRef, onItemMenuToggle: onItemMenuToggle }))))));
};
//# sourceMappingURL=StylingSettingBody.js.map