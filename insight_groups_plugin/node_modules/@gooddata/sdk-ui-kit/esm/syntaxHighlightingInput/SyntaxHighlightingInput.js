import { __assign } from "tslib";
// (C) 2020-2022 GoodData Corporation
import React, { useRef, useEffect } from "react";
import cx from "classnames";
import CodeMirror from "codemirror";
// eslint-disable-next-line import/no-unassigned-import
import "codemirror/addon/mode/simple";
// eslint-disable-next-line import/no-unassigned-import
import "codemirror/addon/edit/matchbrackets";
// eslint-disable-next-line import/no-unassigned-import
import "codemirror/addon/display/placeholder";
var CODE_MIRROR_EOL = "\n";
var defaultOptions = {
    autofocus: false,
    lineWrapping: true,
    matchBrackets: true,
};
var findCursorIndexAcrossMultipleLines = function (text, cursorLineIndex, cursorLineCharacterIndex) {
    var getLineLengthToCursor = function (line, lineIndex) {
        if (lineIndex > cursorLineIndex) {
            return 0;
        }
        return lineIndex < cursorLineIndex ? line.length + CODE_MIRROR_EOL.length : cursorLineCharacterIndex;
    };
    return text
        .split(CODE_MIRROR_EOL)
        .map(getLineLengthToCursor)
        .reduce(function (sum, lineLength) { return sum + lineLength; }, 0);
};
/**
 * @internal
 */
export var SyntaxHighlightingInput = function (props) {
    var value = props.value, onChange = props.onChange, onCursor = props.onCursor, customOptions = props.customOptions, className = props.className, formatting = props.formatting;
    var ref = useRef();
    var view = useRef();
    var reportCursorPosition = function (editor) {
        if (onCursor) {
            var from = editor.getCursor("from");
            var to = editor.getCursor("to");
            var currentValue = editor.getValue();
            onCursor(findCursorIndexAcrossMultipleLines(currentValue, from.line, from.ch), findCursorIndexAcrossMultipleLines(currentValue, to.line, to.ch));
        }
    };
    var handleOnChange = function () {
        onChange(view.current.getValue());
    };
    useEffect(function () {
        CodeMirror.defineSimpleMode("syntaxHighlight", formatting);
        view.current = CodeMirror(ref.current, __assign(__assign(__assign({}, customOptions), defaultOptions), { mode: "syntaxHighlight", value: value }));
        view.current.on("change", handleOnChange);
        view.current.on("cursorActivity", reportCursorPosition);
        return function () {
            view.current.off("change", handleOnChange);
            view.current.off("cursorActivity", reportCursorPosition);
        };
    }, []);
    useEffect(function () {
        var cursor = view.current.getCursor();
        view.current.setValue(value);
        view.current.setCursor(cursor);
    }, [value]);
    return React.createElement("div", { className: cx(className, "gd-input-syntax-highlighting-input"), ref: ref });
};
//# sourceMappingURL=SyntaxHighlightingInput.js.map