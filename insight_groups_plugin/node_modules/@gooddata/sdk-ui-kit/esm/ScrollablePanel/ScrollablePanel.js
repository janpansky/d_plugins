import { __assign, __rest } from "tslib";
// (C) 2019-2022 GoodData Corporation
import React, { useRef, useImperativeHandle, useMemo, useCallback } from "react";
import { ScrollContext } from "./ScrollContext";
import { handleOnScrollEvent } from "../utils/scroll";
var DEFAULT_BOTTOM_MARGIN = 5;
var scrollToVisibleDefault = function (element, container, bottomMargin) {
    container.scrollTop = element.offsetTop - container.offsetTop - bottomMargin;
};
var isElementInvisibleCheckDefault = function (element, container) {
    if (element && container) {
        var offset = element.offsetTop - container.offsetTop;
        var itemHeight = element.clientHeight;
        var parentHeight = container.clientHeight;
        return parentHeight < offset + itemHeight;
    }
    return false;
};
/**
 * @internal
 */
export var ScrollablePanel = React.forwardRef(function ScrollablePanel(props, ref) {
    var _a = props.tagName, TagName = _a === void 0 ? "div" : _a, _b = props.scrollToVisible, scrollToVisible = _b === void 0 ? scrollToVisibleDefault : _b, children = props.children, divProps = __rest(props, ["tagName", "scrollToVisible", "children"]);
    var containerRef = useRef();
    useImperativeHandle(ref, function () { return containerRef.current; });
    var memoizeContext = useMemo(function () {
        return {
            scrollIntoView: function (element, bottomMargin, isElementInvisibleCheck) {
                if (bottomMargin === void 0) { bottomMargin = DEFAULT_BOTTOM_MARGIN; }
                if (isElementInvisibleCheck === void 0) { isElementInvisibleCheck = isElementInvisibleCheckDefault; }
                if (containerRef.current) {
                    var container = containerRef.current;
                    if (isElementInvisibleCheck(element, container)) {
                        scrollToVisible(element, container, bottomMargin);
                    }
                }
            },
        };
    }, [scrollToVisible, containerRef]);
    var onPanelScroll = useCallback(function () {
        if (containerRef === null || containerRef === void 0 ? void 0 : containerRef.current) {
            handleOnScrollEvent(containerRef.current);
        }
    }, []);
    return (React.createElement(ScrollContext.Provider, { value: memoizeContext },
        React.createElement(TagName, __assign({}, divProps, { ref: containerRef, onScroll: onPanelScroll }), children)));
});
//# sourceMappingURL=ScrollablePanel.js.map