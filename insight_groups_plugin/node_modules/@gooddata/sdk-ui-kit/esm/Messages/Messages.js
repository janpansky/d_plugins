import { __read, __spread } from "tslib";
// (C) 2020-2022 GoodData Corporation
import React, { useState, useCallback } from "react";
import { CSSTransition, TransitionGroup } from "react-transition-group";
import noop from "lodash/noop";
import cx from "classnames";
import { Message } from "./Message";
import { Overlay } from "../Overlay";
import { Typography } from "../Typography";
/**
 * @internal
 */
export var Messages = function (_a) {
    var _b = _a.messages, messages = _b === void 0 ? [] : _b, _c = _a.onMessageClose, onMessageClose = _c === void 0 ? noop : _c;
    var _d = __read(useState([]), 2), expandedMessageIds = _d[0], setExpandedMessageIds = _d[1];
    var handleMessageClose = useCallback(function (messageId) {
        setExpandedMessageIds(function (old) { return old.filter(function (expandedId) { return expandedId !== messageId; }); });
        onMessageClose(messageId);
    }, [onMessageClose]);
    return (React.createElement(Overlay, null,
        React.createElement("div", { className: "gd-messages" },
            React.createElement(TransitionGroup, null,
                React.createElement(CSSTransition, { classNames: "gd-message", timeout: 220 },
                    React.createElement("div", null, messages.map(function (message) {
                        var id = message.id, component = message.component, showMore = message.showMore, type = message.type, contrast = message.contrast, intensive = message.intensive;
                        var isExpanded = expandedMessageIds.includes(message.id);
                        return (React.createElement("div", { key: id },
                            React.createElement(Message, { className: cx("gd-message-overlay", !showMore && "gd-message-overlay", showMore && "gd-message-overlay-custom"), type: type, onClose: function () { return handleMessageClose(id); }, contrast: contrast, intensive: intensive }, component || (React.createElement(React.Fragment, null,
                                React.createElement(MessageWithShowMore, { message: message, shouldShowMore: !isExpanded, handleShowMore: function () {
                                        if (isExpanded) {
                                            setExpandedMessageIds(function (old) {
                                                return old.filter(function (expandedId) { return expandedId !== id; });
                                            });
                                        }
                                        else {
                                            setExpandedMessageIds(function (old) { return __spread(old, [id]); });
                                        }
                                    } }),
                                React.createElement(MessageSimple, { message: message }))))));
                    })))))));
};
var MessageWithShowMore = function (_a) {
    var message = _a.message, shouldShowMore = _a.shouldShowMore, handleShowMore = _a.handleShowMore;
    var showMore = message.showMore, showLess = message.showLess, errorDetail = message.errorDetail, type = message.type;
    if (!showMore) {
        return null;
    }
    var contentClassNames = cx("gd-message-text-content", "s-message-text-content", type, {
        off: shouldShowMore,
        on: !shouldShowMore,
    });
    var showMoreLinkClassNames = cx("gd-message-text-showmorelink", "s-message-text-showmorelink", type);
    return (React.createElement("div", { className: "gd-message-text-showmore" },
        React.createElement(Typography, { tagName: "p", className: "gd-message-text-header" },
            React.createElement(MessageElement, { message: message, type: "span" }),
            React.createElement("span", { className: showMoreLinkClassNames, onClick: handleShowMore }, shouldShowMore ? showMore : showLess)),
        React.createElement("div", { className: contentClassNames }, errorDetail)));
};
var MessageSimple = function (_a) {
    var message = _a.message;
    var showMore = message.showMore;
    if (showMore) {
        return null;
    }
    return React.createElement(MessageElement, { message: message, type: "div" });
};
var MessageElement = function (_a) {
    var message = _a.message, type = _a.type;
    var text = message.text, node = message.node;
    var Component = type;
    if (node) {
        return React.createElement(Component, { className: "s-message-text-header-value" }, node);
    }
    return (React.createElement(Component, { className: "s-message-text-header-value", dangerouslySetInnerHTML: { __html: text || "" } }));
};
//# sourceMappingURL=Messages.js.map