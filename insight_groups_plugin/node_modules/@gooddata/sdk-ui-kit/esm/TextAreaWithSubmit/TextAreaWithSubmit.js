import { __extends } from "tslib";
// (C) 2007-2022 GoodData Corporation
import React, { Component } from "react";
import identity from "lodash/identity";
/**
 * @internal
 */
var TextAreaWithSubmit = /** @class */ (function (_super) {
    __extends(TextAreaWithSubmit, _super);
    function TextAreaWithSubmit(props) {
        var _this = _super.call(this, props) || this;
        _this.focusTimeout = 0;
        _this.onDocumentClick = function (e) {
            if (_this.isClickOutsideTextarea(e.target)) {
                var textAreaNode = _this.textarea.current;
                textAreaNode.blur();
            }
        };
        _this.onKeyDown = function (e) {
            var isSubmit = e.key === "Enter" && !e.shiftKey;
            var isCancel = e.key === "Escape";
            if (isSubmit || isCancel) {
                e.preventDefault();
                e.stopPropagation();
            }
            if (isSubmit) {
                _this.onSubmit();
            }
            if (isCancel) {
                _this.onCancel();
            }
        };
        _this.onSubmit = function () {
            var oldValue = _this.props.defaultValue;
            var newTrimmedValue = _this.state.value.trim();
            if (newTrimmedValue === "") {
                _this.setState({
                    value: "",
                });
            }
            if (oldValue !== newTrimmedValue) {
                _this.props.onSubmit(newTrimmedValue);
            }
            else {
                _this.props.onCancel(oldValue);
            }
            _this.setState({
                value: newTrimmedValue,
                isEditing: false,
            });
            _this.removeListeners();
        };
        _this.onCancel = function () {
            var defaultValue = _this.props.defaultValue;
            _this.props.onCancel(defaultValue);
            _this.setState({
                value: defaultValue,
                isEditing: false,
            });
            _this.removeListeners();
        };
        _this.onChange = function (e) {
            var value = e.target.value;
            _this.setState({ value: value }, function () {
                _this.props.onChange(value);
            });
        };
        _this.edit = function (_e) {
            if (!_this.state.isEditing) {
                _this.setState({
                    isEditing: true,
                }, function () {
                    _this.selectAndFocus();
                    document.addEventListener("mousedown", _this.onDocumentClick);
                });
                _this.props.onEditingStart();
            }
        };
        _this.selectAndFocus = function () {
            var componentElement = _this.textarea.current;
            var scrollToEndOnEditingStart = _this.props.scrollToEndOnEditingStart;
            if (componentElement) {
                window.clearTimeout(_this.focusTimeout);
                // without the timeout the focus sometimes got stolen by the previously active item for some reason
                _this.focusTimeout = window.setTimeout(function () {
                    componentElement.focus();
                    if (scrollToEndOnEditingStart && _this.isMultiLine()) {
                        componentElement.scrollTop = componentElement.scrollHeight;
                    }
                    componentElement.select();
                }, 1);
            }
        };
        _this.state = {
            value: props.defaultValue,
            isEditing: false,
        };
        _this.root = React.createRef();
        _this.textarea = React.createRef();
        return _this;
    }
    TextAreaWithSubmit.prototype.componentDidMount = function () {
        var rootNode = this.root.current;
        rootNode.addEventListener("dragstart", this.onSelectStart);
        rootNode.addEventListener("selectstart", this.onSelectStart);
        if (this.props.autofocus) {
            this.edit();
        }
    };
    TextAreaWithSubmit.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {
        if (this.props.defaultValue !== newProps.defaultValue) {
            this.setState({
                value: newProps.defaultValue,
            });
        }
    };
    TextAreaWithSubmit.prototype.componentWillUnmount = function () {
        var rootNode = this.root.current;
        rootNode.removeEventListener("dragstart", this.onSelectStart);
        rootNode.removeEventListener("selectstart", this.onSelectStart);
        this.removeListeners();
        clearTimeout(this.focusTimeout);
    };
    TextAreaWithSubmit.prototype.onSelectStart = function (e) {
        e.stopPropagation();
    };
    TextAreaWithSubmit.prototype.isClickOutsideTextarea = function (clickedTarget) {
        return this.textarea.current && !this.textarea.current.contains(clickedTarget);
    };
    TextAreaWithSubmit.prototype.isMultiLine = function () {
        return this.props.rows > 1;
    };
    TextAreaWithSubmit.prototype.removeListeners = function () {
        document.removeEventListener("mousedown", this.onDocumentClick);
    };
    TextAreaWithSubmit.prototype.renderTextarea = function (style) {
        if (style === void 0) { style = {}; }
        var _a = this.props, rows = _a.rows, disabled = _a.disabled, maxLength = _a.maxLength, placeholder = _a.placeholder, className = _a.className;
        var value = this.state.value;
        return (React.createElement("textarea", { className: className, style: style, rows: rows, maxLength: maxLength, onKeyDown: this.onKeyDown, onBlur: this.onSubmit, onChange: this.onChange, value: value, placeholder: placeholder, ref: this.textarea, disabled: disabled }));
    };
    TextAreaWithSubmit.prototype.renderTextAreaWithSubmitEdit = function () {
        return this.renderTextarea({});
    };
    TextAreaWithSubmit.prototype.render = function () {
        return (React.createElement("div", { role: "editable-label", onClick: this.edit },
            React.createElement("div", { ref: this.root }, this.renderTextAreaWithSubmitEdit())));
    };
    TextAreaWithSubmit.defaultProps = {
        className: "",
        maxLength: 100000,
        rows: 1,
        onCancel: identity,
        onEditingStart: identity,
        onChange: identity,
        placeholder: "",
        scrollToEndOnEditingStart: true,
        autofocus: false,
        disabled: false,
    };
    return TextAreaWithSubmit;
}(Component));
export { TextAreaWithSubmit };
//# sourceMappingURL=TextAreaWithSubmit.js.map