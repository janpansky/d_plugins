import { __extends } from "tslib";
// (C) 2020-2022 GoodData Corporation
import React from "react";
import cx from "classnames";
import noop from "lodash/noop";
import { Button } from "../Button";
import { LoadingSpinner } from "../LoadingSpinner";
import { DialogBase } from "./DialogBase";
import { Bubble, BubbleHoverTrigger } from "../Bubble";
import { Typography } from "../Typography";
/**
 * @internal
 */
var ConfirmDialogBase = /** @class */ (function (_super) {
    __extends(ConfirmDialogBase, _super);
    function ConfirmDialogBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ConfirmDialogBase.prototype.render = function () {
        var _a = this.props, isPositive = _a.isPositive, displayCloseButton = _a.displayCloseButton, headline = _a.headline, warning = _a.warning, children = _a.children, cancelButtonText = _a.cancelButtonText, submitButtonText = _a.submitButtonText, submitButtonTooltipText = _a.submitButtonTooltipText, submitButtonTooltipAlignPoints = _a.submitButtonTooltipAlignPoints, submitButtonTooltipArrowOffsets = _a.submitButtonTooltipArrowOffsets, isSubmitDisabled = _a.isSubmitDisabled, showProgressIndicator = _a.showProgressIndicator, onSubmit = _a.onSubmit, onCancel = _a.onCancel, headerLeftButtonRenderer = _a.headerLeftButtonRenderer, footerLeftRenderer = _a.footerLeftRenderer, titleRightIconRenderer = _a.titleRightIconRenderer, dialogHeaderClassName = _a.dialogHeaderClassName;
        var dialogClasses = cx({
            "gd-confirm": true,
        }, this.getDialogClasses());
        var submitButtonClasses = cx({
            "s-dialog-submit-button": true,
            "gd-button-action": isPositive,
            "gd-button-negative": !isPositive,
        });
        var headerClassNames = cx("gd-dialog-header", dialogHeaderClassName);
        return (React.createElement("div", { tabIndex: 0, onKeyDown: this.onKeyDown },
            React.createElement("div", { className: dialogClasses },
                displayCloseButton ? this.renderCloseButton() : null,
                React.createElement("div", { className: "gd-dialog-header-wrapper" }, headerLeftButtonRenderer === null || headerLeftButtonRenderer === void 0 ? void 0 :
                    headerLeftButtonRenderer(),
                    React.createElement("div", { className: headerClassNames },
                        React.createElement(Typography, { tagName: "h3", className: "gd-dialog-header-title" }, headline), titleRightIconRenderer === null || titleRightIconRenderer === void 0 ? void 0 :
                        titleRightIconRenderer())),
                !!warning && React.createElement("div", { className: "gd-dialog-warning" }, warning),
                React.createElement("div", { className: "gd-dialog-content" }, children),
                React.createElement("div", { className: "gd-dialog-footer" }, footerLeftRenderer === null || footerLeftRenderer === void 0 ? void 0 :
                    footerLeftRenderer(),
                    showProgressIndicator ? (React.createElement(LoadingSpinner, { className: "gd-dialog-spinner small" })) : null,
                    React.createElement(Button, { onClick: onCancel, className: "gd-button-secondary s-dialog-cancel-button", value: cancelButtonText }),
                    submitButtonText ? (React.createElement(BubbleHoverTrigger, { className: "gd-button", showDelay: 0, hideDelay: 0 },
                        React.createElement(Button, { onClick: onSubmit, className: submitButtonClasses, value: submitButtonText, disabled: isSubmitDisabled }),
                        submitButtonTooltipText ? (React.createElement(Bubble, { className: "bubble-primary", alignPoints: submitButtonTooltipAlignPoints || [{ align: "bc tc" }], arrowOffsets: submitButtonTooltipArrowOffsets || { "bc tc": [0, 15] } }, submitButtonTooltipText)) : null)) : null))));
    };
    ConfirmDialogBase.defaultProps = {
        displayCloseButton: true,
        onCancel: noop,
        onSubmit: noop,
        isSubmitDisabled: false,
        headerLeftButtonRenderer: undefined,
    };
    return ConfirmDialogBase;
}(DialogBase));
export { ConfirmDialogBase };
//# sourceMappingURL=ConfirmDialogBase.js.map