// (C) 2020-2022 GoodData Corporation
import { __read } from "tslib";
import React, { useCallback, useEffect, useState } from "react";
import cx from "classnames";
import isEmpty from "lodash/isEmpty";
import { FormattedMessage } from "react-intl";
import { Bubble } from "../../../../Bubble";
import { v4 } from "uuid";
var VALID_INPUT = "^[0-9]+[.,]?[0-9]*$";
var bubbleAlignPoints = [{ align: "bl tl" }];
var bubbleArrowOffsets = { "bl tl": [0, 10] };
var validHeight = function (height) {
    return parseFloat(height) === 0 || height.endsWith(".") ? false : true;
};
/**
 * @internal
 */
export var NumericInput = function (props) {
    var value = props.value, onValueChanged = props.onValueChanged;
    var _a = __read(useState(true), 2), validPressedButton = _a[0], setValidPressedButton = _a[1];
    var _b = __read(useState("numeric-input-id-" + v4()), 1), anchorId = _b[0];
    useEffect(function () {
        if (!validPressedButton) {
            setTimeout(function () { return setValidPressedButton(true); }, 2000);
        }
    }, [validPressedButton]);
    var handleHeightInputChange = useCallback(function (e) {
        var val = e.target.value.replace(/,/, ".");
        if (val.match(VALID_INPUT)) {
            onValueChanged(val);
        }
        else if (isEmpty(val)) {
            onValueChanged("");
        }
    }, [onValueChanged]);
    var correctKeyPressed = useCallback(function (e) {
        var value = e.target.value.replace(/,/, ".");
        setValidPressedButton((value.match(VALID_INPUT) || isEmpty(value)) && value.split(".").length <= 2 ? true : false);
    }, []);
    var onChanged = useCallback(function (e) {
        correctKeyPressed(e);
        handleHeightInputChange(e);
    }, [handleHeightInputChange, correctKeyPressed]);
    return (React.createElement("label", { className: "gd-input" },
        React.createElement("div", { className: cx("gd-input-wrapper", anchorId) },
            React.createElement("input", { className: cx("gd-input-field s-embed-dialog-custom-height", {
                    "gd-embed-input-numeric-invalid": !validHeight(value),
                }), type: "text", value: value, onChange: onChanged })),
        !validHeight(value) && (React.createElement(Bubble, { alignTo: "." + anchorId, alignPoints: bubbleAlignPoints, arrowOffsets: bubbleArrowOffsets, className: "bubble-negative" },
            React.createElement(FormattedMessage, { id: "embed.dialog.numeric.input.validation" }))),
        !validPressedButton && (React.createElement(Bubble, { alignTo: "." + anchorId, alignPoints: bubbleAlignPoints, arrowOffsets: bubbleArrowOffsets, className: "bubble-warning" },
            React.createElement(FormattedMessage, { id: "embed.dialog.numeric.input.warning" })))));
};
//# sourceMappingURL=NumericInput.js.map