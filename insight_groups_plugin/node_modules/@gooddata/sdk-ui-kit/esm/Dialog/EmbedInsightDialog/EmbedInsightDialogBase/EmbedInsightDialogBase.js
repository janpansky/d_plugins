// (C) 2022 GoodData Corporation
import React, { useCallback } from "react";
import cx from "classnames";
import copy from "copy-to-clipboard";
import { FormattedMessage, useIntl } from "react-intl";
import { CodeArea } from "./components/CodeArea";
import { ConfirmDialogBase } from "../../ConfirmDialogBase";
import { PrepareEnvMessage } from "./components/PrepareEnvMessage";
import { CodeLanguageSelect } from "./components/CodeLanguageSelect";
import { CodeOptions } from "./components/CodeOptions";
import { CompleteListPropsMessage } from "./components/CompleteListPropsMessage";
import { Bubble, BubbleHoverTrigger } from "../../../Bubble";
import { dialogHeadlineLabels, dialogChangeMessageLabels } from "../../../locales";
var HEADER_TOOLTIP_ALIGN_POINTS = [{ align: "bc tl" }];
var HEADER_TOOLTIP_ARROW_OFFSETS = { "bc tl": [-7, 0] };
/**
 * @internal
 */
export var EmbedInsightDialogBase = function (props) {
    var code = props.code, codeLanguage = props.codeLanguage, codeOption = props.codeOption, propertiesLink = props.propertiesLink, integrationDocLink = props.integrationDocLink, onClose = props.onClose, onCopyCode = props.onCopyCode, onCodeLanguageChange = props.onCodeLanguageChange, onCodeOptionChange = props.onCodeOptionChange;
    var intl = useIntl();
    var onCopyButtonClick = useCallback(function () {
        copy(code);
        onCopyCode(code, "button");
    }, [code, onCopyCode]);
    var onAreaCopy = useCallback(function () {
        copy(code);
        onCopyCode(code, "keyboard");
    }, [code, onCopyCode]);
    return (React.createElement(ConfirmDialogBase, { isPositive: true, onClose: onClose, onCancel: onClose, onSubmit: onCopyButtonClick, cancelButtonText: intl.formatMessage({ id: "embedInsightDialog.actions.close" }), submitButtonText: intl.formatMessage({ id: "embedInsightDialog.actions.copyCode" }), headline: intl.formatMessage({ id: getDialogLabelId(codeOption.type) }), className: cx("embed-insight-dialog", "s-embed-insight-dialog"), dialogHeaderClassName: "embed-insight-dialog-header", footerLeftRenderer: propertiesLink
            ? function () {
                return (React.createElement("div", { className: "embed-insight-dialog-left-footer-renderer" },
                    React.createElement(CompleteListPropsMessage, { documentationLink: propertiesLink })));
            }
            : undefined, titleRightIconRenderer: function () { return (React.createElement(BubbleHoverTrigger, { className: "gd-button", showDelay: 0, hideDelay: 0 },
            React.createElement("span", { className: "gd-icon-circle-question s-circle_question-dialog-title question-mark-icon embed-insight-dialog-header-icon" }),
            React.createElement(Bubble, { className: "bubble-primary", alignPoints: HEADER_TOOLTIP_ALIGN_POINTS, arrowOffsets: HEADER_TOOLTIP_ARROW_OFFSETS },
                React.createElement(FormattedMessage, { id: getChangesLabelId(codeOption.type) })))); } },
        React.createElement("div", { className: "embed-insight-dialog-content" },
            React.createElement(PrepareEnvMessage, { integrationDocLink: integrationDocLink }),
            React.createElement("div", { className: "embed-insight-dialog-code" },
                React.createElement("div", { className: "embed-insight-dialog-code-settings" },
                    React.createElement(CodeLanguageSelect, { selectedLanguage: codeLanguage, onLanguageChanged: onCodeLanguageChange }),
                    React.createElement(CodeOptions, { option: codeOption, onChange: onCodeOptionChange })),
                React.createElement("div", { className: "embed-insight-dialog-code-wrapper" },
                    React.createElement(CodeArea, { code: code, onCopyCode: onAreaCopy }))))));
};
var getDialogLabelId = function (codeType) {
    return dialogHeadlineLabels[codeType].id;
};
var getChangesLabelId = function (codeType) {
    return dialogChangeMessageLabels[codeType].id;
};
//# sourceMappingURL=EmbedInsightDialogBase.js.map