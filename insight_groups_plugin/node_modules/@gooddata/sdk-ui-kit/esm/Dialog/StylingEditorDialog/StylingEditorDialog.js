import { __assign, __read } from "tslib";
// (C) 2022 GoodData Corporation
import React, { useMemo, useState } from "react";
import { useIntl } from "react-intl";
import cx from "classnames";
import noop from "lodash/noop";
import { IntlWrapper } from "@gooddata/sdk-ui";
import { StylingExample } from "./StylingExample";
import { BubbleHeaderSeparator } from "./BubbleHeaderSeparator";
import { Button } from "../../Button";
import { Dialog } from "../Dialog";
import { Typography } from "../../Typography";
import { StylingEditorDialogFooter } from "./StylingEditorDialogFooter";
/**
 * @internal
 */
export var StylingEditorDialog = function (props) {
    return (React.createElement(IntlWrapper, { locale: props.locale },
        React.createElement(StylingEditorDialogCore, __assign({}, props))));
};
var StylingEditorDialogCore = function (props) {
    var _a;
    var title = props.title, tooltip = props.tooltip, link = props.link, stylingItem = props.stylingItem, examples = props.examples, exampleToColorPreview = props.exampleToColorPreview, onClose = props.onClose, onSubmit = props.onSubmit, onCancel = props.onCancel, disableSubmit = props.disableSubmit, showProgressIndicator = props.showProgressIndicator, showBackButton = props.showBackButton, onHelpClick = props.onHelpClick, _b = props.onExit, onExit = _b === void 0 ? noop : _b, className = props.className, _c = props.onInvalidDefinition, onInvalidDefinition = _c === void 0 ? noop : _c;
    var intl = useIntl();
    var providedExamples = !!examples && examples.length !== 0 && !!exampleToColorPreview;
    var initialNameField = (_a = stylingItem === null || stylingItem === void 0 ? void 0 : stylingItem.name) !== null && _a !== void 0 ? _a : "";
    var initialDefinitionField = (stylingItem === null || stylingItem === void 0 ? void 0 : stylingItem.content) ? JSON.stringify(stylingItem === null || stylingItem === void 0 ? void 0 : stylingItem.content, null, 4) : "";
    var _d = __read(useState(initialNameField), 2), nameField = _d[0], setNameField = _d[1];
    var _e = __read(useState(initialDefinitionField), 2), definitionField = _e[0], setDefinitionField = _e[1];
    var fieldsChanged = useMemo(function () {
        try {
            var parsedDefinition = JSON.parse(definitionField);
            var formattedDefinition = JSON.stringify(parsedDefinition, null, 4);
            return nameField !== initialNameField || formattedDefinition !== initialDefinitionField;
        }
        catch (e) {
            // initial state of the fields is presumed to be valid,
            // so if JSON throws error, definition was changed
            return true;
        }
    }, [nameField, initialNameField, definitionField, initialDefinitionField]);
    var validName = useMemo(function () { return nameField !== ""; }, [nameField]);
    var validDefinition = useMemo(function () {
        try {
            JSON.parse(definitionField);
            return true;
        }
        catch (e) {
            return false;
        }
    }, [definitionField]);
    var validFields = useMemo(function () { return validName && validDefinition; }, [validName, validDefinition]);
    var isSubmitDisabled = useMemo(function () { return !validFields || !fieldsChanged || disableSubmit; }, [validFields, fieldsChanged, disableSubmit]);
    var emptyDefinition = useMemo(function () { return definitionField === ""; }, [definitionField]);
    var errorMessage = useMemo(function () {
        if (!validName) {
            return intl.formatMessage({ id: "stylingEditor.dialog.name.required" });
        }
        if (emptyDefinition) {
            return intl.formatMessage({ id: "stylingEditor.dialog.definition.required" });
        }
        if (!validDefinition) {
            onInvalidDefinition(stylingItem === null || stylingItem === void 0 ? void 0 : stylingItem.ref);
            return intl.formatMessage({ id: "stylingEditor.dialog.definition.invalid" });
        }
        return undefined;
    }, [validName, emptyDefinition, validDefinition]);
    var getFinalStylingItem = function (original, definition, name) {
        return __assign(__assign({}, (original ? original : {})), { content: JSON.parse(definition), name: name });
    };
    return (React.createElement(Dialog, { className: cx("gd-styling-editor-dialog", {
            "gd-styling-editor-dialog-create": providedExamples,
        }, className), onClose: function () {
            onExit(nameField, definitionField);
            onClose();
        }, displayCloseButton: true, submitOnEnterKey: false },
        React.createElement("div", { className: "gd-styling-editor-dialog-header" },
            showBackButton && (React.createElement("div", { className: "gd-styling-editor-dialog-header-back-button" },
                React.createElement(Button, { className: "gd-button-primary gd-button-icon-only gd-icon-navigateleft s-navigate-back-button", onClick: function () {
                        onExit(nameField, definitionField);
                        onClose();
                    } }))),
            React.createElement(Typography, { tagName: "h2", className: "gd-styling-editor-dialog-header-title" }, title)),
        React.createElement("div", { className: "gd-styling-editor-dialog-content" },
            React.createElement("form", { className: "gd-styling-editor-dialog-content-form", onSubmit: function (e) { return e.preventDefault(); } },
                React.createElement("label", { className: "gd-styling-editor-dialog-content-form-input" },
                    intl.formatMessage({ id: "stylingEditor.dialog.name" }),
                    React.createElement("input", { className: "gd-input-field s-input-field", type: "text", value: nameField, onChange: function (e) { return setNameField(e.target.value); } })),
                React.createElement("label", { className: "gd-styling-editor-dialog-content-form-textarea" },
                    intl.formatMessage({ id: "stylingEditor.dialog.definition" }),
                    React.createElement("textarea", { className: "gd-input-field s-textarea-field", wrap: "off", value: definitionField, onChange: function (e) { return setDefinitionField(e.target.value); } }))),
            providedExamples ? (React.createElement("div", { className: cx("gd-styling-editor-dialog-content-examples", "s-gd-styling-editor-dialog-content-examples") },
                React.createElement(BubbleHeaderSeparator, { title: intl.formatMessage({ id: "stylingEditor.dialog.examples" }), message: tooltip }),
                React.createElement("div", { className: "gd-styling-editor-dialog-content-examples-list" }, examples.map(function (example, index) { return (React.createElement(StylingExample, { key: index, name: example.name, colors: exampleToColorPreview(example.content), onClick: function () {
                        setNameField(example.name);
                        setDefinitionField(JSON.stringify(example.content, null, 4));
                    } })); })))) : null),
        React.createElement(StylingEditorDialogFooter, { disableSubmit: isSubmitDisabled, showProgressIndicator: showProgressIndicator, link: link, errorMessage: errorMessage, onSubmit: function () { return onSubmit(getFinalStylingItem(stylingItem, definitionField, nameField)); }, onCancel: function () {
                onExit(nameField, definitionField);
                onCancel();
            }, onHelpClick: onHelpClick })));
};
//# sourceMappingURL=StylingEditorDialog.js.map