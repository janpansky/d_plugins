import { __assign } from "tslib";
// (C) 2021-2023 GoodData Corporation
import React, { useCallback } from "react";
import { areObjRefsEqual } from "@gooddata/sdk-model";
import { GranteeList } from "./GranteeList";
import { isGranteeGroup, isGranteeUser, } from "./types";
import { AddGranteeSelect } from "./AddGranteeSelect";
/**
 * In case of user and group, we need to make sure, that the added grantee has some default granular permission.
 */
var enrichGranteeWithDefaultPermission = function (grantee) {
    var defaultPermissions = {
        permissions: ["VIEW"],
        inheritedPermissions: [],
    };
    if (isGranteeUser(grantee)) {
        return __assign(__assign(__assign({}, grantee), defaultPermissions), { type: "granularUser" });
    }
    else {
        return __assign(__assign(__assign({}, grantee), defaultPermissions), { type: "granularGroup" });
    }
};
/**
 * @internal
 */
export var AddGranteeContent = function (props) {
    var appliedGrantees = props.appliedGrantees, currentUser = props.currentUser, addedGrantees = props.addedGrantees, areGranularPermissionsSupported = props.areGranularPermissionsSupported, currentUserPermissions = props.currentUserPermissions, isSharedObjectLocked = props.isSharedObjectLocked, sharedObjectRef = props.sharedObjectRef, onDelete = props.onDelete, onAddUserOrGroups = props.onAddUserOrGroups, onGranularGranteeChange = props.onGranularGranteeChange;
    var onSelectGrantee = useCallback(function (grantee) {
        if (!appliedGrantees.some(function (g) { return areObjRefsEqual(g.id, grantee.id); })) {
            if (areGranularPermissionsSupported && (isGranteeUser(grantee) || isGranteeGroup(grantee))) {
                onAddUserOrGroups(enrichGranteeWithDefaultPermission(grantee));
            }
            else {
                onAddUserOrGroups(grantee);
            }
        }
    }, [appliedGrantees, onAddUserOrGroups, areGranularPermissionsSupported]);
    return (React.createElement(React.Fragment, null,
        React.createElement(AddGranteeSelect, { currentUser: currentUser, appliedGrantees: appliedGrantees, sharedObjectRef: sharedObjectRef, onSelectGrantee: onSelectGrantee }),
        React.createElement(GranteeList, { currentUserPermissions: currentUserPermissions, isSharedObjectLocked: isSharedObjectLocked, grantees: addedGrantees, mode: "AddGrantee", areGranularPermissionsSupported: areGranularPermissionsSupported, onDelete: onDelete, onChange: onGranularGranteeChange })));
};
//# sourceMappingURL=AddGranteeContent.js.map