// (C) 2022-2023 GoodData Corporation
import { __read } from "tslib";
import React, { useCallback, useState } from "react";
import { useIntl } from "react-intl";
import cx from "classnames";
import { getGranularGranteeClassNameId } from "../utils";
import { granularPermissionMessageLabels } from "../../../../locales";
import { GranularPermissionsDropdownBody } from "./GranularPermissionsDropdownBody";
import { withBubble } from "../../../../Bubble";
export var GranularPermissionsDropdown = function (_a) {
    var grantee = _a.grantee, granteePossibilities = _a.granteePossibilities, isDropdownDisabled = _a.isDropdownDisabled, isDropdownOpen = _a.isDropdownOpen, toggleDropdown = _a.toggleDropdown, onChange = _a.onChange, onDelete = _a.onDelete, className = _a.className, mode = _a.mode;
    var intl = useIntl();
    var _b = __read(useState(granteePossibilities.assign.effective), 2), selectedPermission = _b[0], setSelectedPermission = _b[1];
    var handleSetSelectedPermission = function (permission) {
        setSelectedPermission(permission);
    };
    var handleClick = useCallback(function () {
        if (!isDropdownDisabled) {
            toggleDropdown();
        }
    }, [isDropdownDisabled, toggleDropdown]);
    var granularGranteeClassName = getGranularGranteeClassNameId(grantee);
    var buttonValue = intl.formatMessage(granularPermissionMessageLabels[selectedPermission]);
    return (React.createElement("div", { className: className },
        React.createElement("div", { className: cx("s-granular-permission-button", "gd-granular-permission-button", "dropdown-button", granularGranteeClassName, {
                "is-active": isDropdownOpen,
                "gd-icon-navigateup": !isDropdownDisabled && isDropdownOpen,
                "gd-icon-navigatedown": !isDropdownDisabled && !isDropdownOpen,
                disabled: isDropdownDisabled,
                "gd-icon-right": !isDropdownDisabled,
            }), onClick: handleClick },
            React.createElement("div", { className: "s-granular-permission-button-title gd-granular-permission-button-title" }, buttonValue)),
        React.createElement(GranularPermissionsDropdownBody, { alignTo: granularGranteeClassName, grantee: grantee, granteePossibilities: granteePossibilities, toggleDropdown: toggleDropdown, isShowDropdown: isDropdownOpen, onChange: onChange, onDelete: onDelete, selectedPermission: selectedPermission, handleSetSelectedPermission: handleSetSelectedPermission, mode: mode })));
};
export var GranularPermissionsDropdownWithBubble = withBubble(GranularPermissionsDropdown);
//# sourceMappingURL=GranularPermissionsDropdown.js.map