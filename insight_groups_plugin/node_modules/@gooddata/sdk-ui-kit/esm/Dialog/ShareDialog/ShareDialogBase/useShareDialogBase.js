import { __read, __spread } from "tslib";
// (C) 2021-2023 GoodData Corporation
import { useCallback, useMemo, useState } from "react";
import { areObjRefsEqual } from "@gooddata/sdk-model";
import isEqual from "lodash/isEqual";
import { isGranteeUserInactive, isGranularGrantee, } from "./types";
import { notInArrayFilter, getAppliedGrantees } from "./utils";
import { useGetAccessList } from "./backend/useGetAccessList";
import { mapShareStatusToGroupAll } from "../shareDialogMappers";
import { useShareDialogInteraction } from "./ComponentInteractionContext";
/**
 * @internal
 */
var useShareDialogState = function (isUnderLenientControl, isLocked) {
    var _a = __read(useState("ShareGrantee"), 2), dialogMode = _a[0], setDialogMode = _a[1];
    var _b = __read(useState(true), 2), isGranteesLoading = _b[0], setIsGranteesLoading = _b[1];
    var _c = __read(useState([]), 2), grantees = _c[0], setGrantees = _c[1];
    var _d = __read(useState([]), 2), granteesToAdd = _d[0], setGranteesToAdd = _d[1];
    var _e = __read(useState([]), 2), granteesToDelete = _e[0], setGranteesToDelete = _e[1];
    var _f = __read(useState([]), 2), granteesToUpdate = _f[0], setGranteesToUpdate = _f[1];
    var _g = __read(useState(isUnderLenientControl), 2), isUnderLenientControlNow = _g[0], setUnderLenientControlNow = _g[1];
    var _h = __read(useState(isLocked), 2), isLockedNow = _h[0], setLockedNow = _h[1];
    var _j = __read(useState([]), 2), originalGranularGrantees = _j[0], setOriginalGranularGrantees = _j[1];
    var granteeAddInteraction = useShareDialogInteraction().granteeAddInteraction;
    var onGranularGranteeAddChange = useCallback(function (grantee) {
        setGranteesToAdd(function (state) { return state.map(function (s) { return (areObjRefsEqual(s.id, grantee.id) ? grantee : s); }); });
    }, []);
    var onSharedGranteeDelete = useCallback(function (grantee) {
        setGranteesToDelete(function (state) { return __spread(state, [grantee]); });
        setGranteesToUpdate(function (state) { return state.filter(function (s) { return !areObjRefsEqual(s.id, grantee.id); }); });
    }, []);
    var onAddedGranteeDelete = useCallback(function (grantee) {
        setGranteesToAdd(function (state) { return state.filter(function (g) { return !areObjRefsEqual(g.id, grantee.id); }); });
    }, []);
    var onGranteeAdd = useCallback(function (grantee) {
        setGranteesToAdd(function (state) { return __spread(state, [grantee]); });
        granteeAddInteraction(grantee);
    }, [granteeAddInteraction]);
    var onGranularGranteeShareChange = useCallback(function (grantee) {
        var originalGrantee = originalGranularGrantees.find(function (g) { return areObjRefsEqual(g.id, grantee.id); });
        var hasChangedPermissions = !isEqual(originalGrantee === null || originalGrantee === void 0 ? void 0 : originalGrantee.permissions, grantee.permissions);
        setGranteesToUpdate(function (state) {
            var filteredUpdatedGrantees = state.filter(function (s) { return !areObjRefsEqual(s.id, grantee.id); });
            var isAlreadyUpdated = filteredUpdatedGrantees.length !== state.length;
            if (isAlreadyUpdated && !hasChangedPermissions) {
                return filteredUpdatedGrantees;
            }
            return __spread(filteredUpdatedGrantees, [grantee]);
        });
        setGrantees(function (state) { return state.map(function (s) { return (areObjRefsEqual(s.id, grantee.id) ? grantee : s); }); });
    }, [originalGranularGrantees]);
    var onAddGranteeButtonClick = useCallback(function () {
        setDialogMode("AddGrantee");
    }, []);
    var onAddGranteeBackClick = useCallback(function () {
        setDialogMode("ShareGrantee");
        setGranteesToAdd([]);
    }, []);
    var onLoadGrantees = useCallback(function (grantees, groupAll) {
        if (groupAll) {
            var allGrantees = __spread(grantees, [groupAll]);
            setGrantees(allGrantees);
            setOriginalGranularGrantees(allGrantees.filter(isGranularGrantee));
        }
        else {
            setGrantees(grantees);
            setOriginalGranularGrantees(grantees.filter(isGranularGrantee));
        }
        setIsGranteesLoading(false);
    }, []);
    var onUnderLenientControlChange = useCallback(function (isUnderLenientControl) {
        setUnderLenientControlNow(isUnderLenientControl);
    }, []);
    var onLockChange = useCallback(function (isLocked) {
        setLockedNow(isLocked);
    }, []);
    return {
        dialogMode: dialogMode,
        isGranteesLoading: isGranteesLoading,
        grantees: grantees,
        granteesToAdd: granteesToAdd,
        granteesToDelete: granteesToDelete,
        granteesToUpdate: granteesToUpdate,
        onLoadGrantees: onLoadGrantees,
        onSharedGranteeDelete: onSharedGranteeDelete,
        onAddedGranteeDelete: onAddedGranteeDelete,
        onGranteeAdd: onGranteeAdd,
        onAddGranteeButtonClick: onAddGranteeButtonClick,
        onAddGranteeBackClick: onAddGranteeBackClick,
        isUnderLenientControlNow: isUnderLenientControlNow,
        isLockedNow: isLockedNow,
        onUnderLenientControlChange: onUnderLenientControlChange,
        onLockChange: onLockChange,
        onGranularGranteeShareChange: onGranularGranteeShareChange,
        onGranularGranteeAddChange: onGranularGranteeAddChange,
    };
};
/**
 * @internal
 */
export var useShareDialogBase = function (props) {
    var sharedObject = props.sharedObject, currentUser = props.currentUser, onSubmit = props.onSubmit, onError = props.onError;
    var ref = sharedObject.ref, shareStatus = sharedObject.shareStatus, owner = sharedObject.owner, isUnderLenientControl = sharedObject.isUnderLenientControl, isLocked = sharedObject.isLocked, areGranularPermissionsSupported = sharedObject.areGranularPermissionsSupported;
    var shareDialogSaveInteraction = useShareDialogInteraction().saveInteraction;
    var _a = useShareDialogState(isUnderLenientControl, isLocked), dialogMode = _a.dialogMode, isGranteesLoading = _a.isGranteesLoading, isLockedNow = _a.isLockedNow, isUnderLenientControlNow = _a.isUnderLenientControlNow, grantees = _a.grantees, granteesToAdd = _a.granteesToAdd, granteesToDelete = _a.granteesToDelete, granteesToUpdate = _a.granteesToUpdate, onLoadGrantees = _a.onLoadGrantees, onSharedGranteeDelete = _a.onSharedGranteeDelete, onAddedGranteeDelete = _a.onAddedGranteeDelete, onGranteeAdd = _a.onGranteeAdd, onAddGranteeButtonClick = _a.onAddGranteeButtonClick, onAddGranteeBackClick = _a.onAddGranteeBackClick, onLockChange = _a.onLockChange, onUnderLenientControlChange = _a.onUnderLenientControlChange, onGranularGranteeAddChange = _a.onGranularGranteeAddChange, onGranularGranteeShareChange = _a.onGranularGranteeShareChange;
    var onLoadGranteesSuccess = useCallback(function (result) {
        if (areGranularPermissionsSupported) {
            onLoadGrantees(result, undefined);
        }
        else {
            var groupAll = mapShareStatusToGroupAll(shareStatus);
            onLoadGrantees(result, groupAll);
        }
    }, [onLoadGrantees, shareStatus, areGranularPermissionsSupported]);
    useGetAccessList({ currentUser: currentUser, sharedObjectRef: ref, onSuccess: onLoadGranteesSuccess, onError: onError });
    var isShareDialogDirty = useMemo(function () {
        if (areGranularPermissionsSupported) {
            return granteesToUpdate.length !== 0 || granteesToDelete.length !== 0;
        }
        else {
            return (granteesToDelete.length !== 0 ||
                isLocked !== isLockedNow ||
                isUnderLenientControl !== isUnderLenientControlNow);
        }
    }, [
        granteesToUpdate,
        granteesToDelete,
        isLocked,
        isLockedNow,
        isUnderLenientControl,
        isUnderLenientControlNow,
        areGranularPermissionsSupported,
    ]);
    var isAddDialogDirty = useMemo(function () {
        return granteesToAdd.length !== 0;
    }, [granteesToAdd]);
    var onSubmitShareGrantee = useCallback(function () {
        if (!isShareDialogDirty) {
            return;
        }
        var allGranteesToAdd = __spread(granteesToAdd, granteesToUpdate);
        shareDialogSaveInteraction();
        onSubmit(grantees, allGranteesToAdd, granteesToDelete, isUnderLenientControlNow, isLockedNow);
    }, [
        grantees,
        granteesToUpdate,
        granteesToAdd,
        granteesToDelete,
        isShareDialogDirty,
        isUnderLenientControlNow,
        isLockedNow,
        onSubmit,
        shareDialogSaveInteraction,
    ]);
    var onSubmitAddGrantee = useCallback(function () {
        if (!isAddDialogDirty) {
            return;
        }
        var allGranteesToAdd = __spread(granteesToAdd, granteesToUpdate);
        shareDialogSaveInteraction();
        onSubmit(grantees, allGranteesToAdd, granteesToDelete, isUnderLenientControlNow, isLockedNow);
    }, [
        grantees,
        granteesToUpdate,
        granteesToAdd,
        granteesToDelete,
        isAddDialogDirty,
        isUnderLenientControlNow,
        isLockedNow,
        onSubmit,
        shareDialogSaveInteraction,
    ]);
    var sharedGrantees = useMemo(function () {
        return notInArrayFilter(grantees, granteesToDelete);
    }, [grantees, granteesToDelete]);
    var appliedGranteesWithOwner = useMemo(function () {
        var appliedGrantees = getAppliedGrantees(grantees, granteesToAdd, granteesToDelete);
        if (isGranteeUserInactive(owner) || areGranularPermissionsSupported) {
            return appliedGrantees;
        }
        return __spread(appliedGrantees, [owner]);
    }, [grantees, granteesToDelete, granteesToAdd, areGranularPermissionsSupported, owner]);
    return {
        onAddedGranteeDelete: onAddedGranteeDelete,
        onSharedGranteeDelete: onSharedGranteeDelete,
        onAddGranteeBackClick: onAddGranteeBackClick,
        onAddGranteeButtonClick: onAddGranteeButtonClick,
        onGranteeAdd: onGranteeAdd,
        onSubmitShareGrantee: onSubmitShareGrantee,
        onSubmitAddGrantee: onSubmitAddGrantee,
        isGranteesLoading: isGranteesLoading,
        granteesToAdd: granteesToAdd,
        dialogMode: dialogMode,
        isShareDialogDirty: isShareDialogDirty,
        isAddDialogDirty: isAddDialogDirty,
        sharedGrantees: sharedGrantees,
        appliedGranteesWithOwner: appliedGranteesWithOwner,
        onLockChange: onLockChange,
        onUnderLenientControlChange: onUnderLenientControlChange,
        onGranularGranteeShareChange: onGranularGranteeShareChange,
        onGranularGranteeAddChange: onGranularGranteeAddChange,
        isUnderLenientControlNow: isUnderLenientControlNow,
        isLockedNow: isLockedNow,
    };
};
//# sourceMappingURL=useShareDialogBase.js.map