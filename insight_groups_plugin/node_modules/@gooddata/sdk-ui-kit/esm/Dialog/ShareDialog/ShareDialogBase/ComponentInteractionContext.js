// (C) 2023 GoodData Corporation
import { __assign } from "tslib";
import React, { useCallback, useContext, useMemo } from "react";
import noop from "lodash/noop";
import { v4 as uuidv4 } from "uuid";
import { getGranularPermissionFromUserPermissions, getIsGranteeCurrentUser } from "./utils";
import { isGranularGrantee, isGranularGranteeUser } from "./types";
var defaultContext = {
    onInteraction: noop,
    currentUser: undefined,
};
var ComponentInteractionContext = React.createContext(defaultContext);
/**
 * @internal
 */
export var useComponentInteractionContext = function () {
    return useContext(ComponentInteractionContext);
};
/**
 * @internal
 */
export var ComponentInteractionProvider = function (props) {
    var children = props.children, onInteraction = props.onInteraction, currentUser = props.currentUser, currentUserPermissions = props.currentUserPermissions, isCurrentUserWorkspaceManager = props.isCurrentUserWorkspaceManager, isSharedObjectLocked = props.isSharedObjectLocked, sharedObjectStatus = props.sharedObjectStatus;
    var flowId = useMemo(function () { return uuidv4(); }, []);
    var currentUserPermission = useMemo(function () { return getGranularPermissionFromUserPermissions(currentUserPermissions); }, [currentUserPermissions]);
    var handleInteraction = useCallback(function (data) {
        onInteraction(__assign(__assign({}, data), { flowId: flowId,
            currentUserPermission: currentUserPermission,
            isSharedObjectLocked: isSharedObjectLocked,
            sharedObjectStatus: sharedObjectStatus,
            isCurrentUserWorkspaceManager: isCurrentUserWorkspaceManager }));
    }, [
        onInteraction,
        flowId,
        currentUserPermission,
        isSharedObjectLocked,
        sharedObjectStatus,
        isCurrentUserWorkspaceManager,
    ]);
    return (React.createElement(ComponentInteractionContext.Provider, { value: {
            onInteraction: handleInteraction,
            currentUser: currentUser,
        } }, children));
};
export var useShareDialogInteraction = function () {
    var _a = useComponentInteractionContext(), onInteraction = _a.onInteraction, currentUser = _a.currentUser;
    var openInteraction = useCallback(function () {
        return onInteraction({
            type: "SHARE_DIALOG_OPENED",
        });
    }, [onInteraction]);
    var closeInteraction = useCallback(function () {
        return onInteraction({
            type: "SHARE_DIALOG_CLOSED",
        });
    }, [onInteraction]);
    var saveInteraction = useCallback(function () {
        return onInteraction({
            type: "SHARE_DIALOG_SAVED",
        });
    }, [onInteraction]);
    var permissionsDropdownOpenInteraction = useCallback(function (grantee, isExistingGrantee, granteeEffectivePermission) {
        if (!isGranularGrantee(grantee)) {
            return;
        }
        onInteraction({
            type: "SHARE_DIALOG_PERMISSIONS_DROPDOWN_OPENED",
            isCurrentUserSelfUpdating: getIsGranteeCurrentUser(grantee.id, currentUser),
            isExistingGrantee: isExistingGrantee,
            granteeType: isGranularGranteeUser(grantee) ? "user" : "group",
            granteeEffectivePermission: granteeEffectivePermission,
        });
    }, [onInteraction, currentUser]);
    var permissionsChangeInteraction = useCallback(function (grantee, isExistingGrantee, granteeEffectivePermission, granteeUpdatedPermission) {
        if (!isGranularGrantee(grantee)) {
            return;
        }
        onInteraction({
            type: "SHARE_DIALOG_PERMISSIONS_CHANGED",
            isCurrentUserSelfUpdating: getIsGranteeCurrentUser(grantee.id, currentUser),
            isExistingGrantee: isExistingGrantee,
            granteeType: isGranularGranteeUser(grantee) ? "user" : "group",
            granteeEffectivePermission: granteeEffectivePermission,
            granteeUpdatedPermission: granteeUpdatedPermission,
        });
    }, [onInteraction, currentUser]);
    var permissionsRemoveInteraction = useCallback(function (grantee, isExistingGrantee, granteeEffectivePermission) {
        if (!isGranularGrantee(grantee)) {
            return;
        }
        onInteraction({
            type: "SHARE_DIALOG_GRANTEE_REMOVED",
            isCurrentUserSelfUpdating: getIsGranteeCurrentUser(grantee.id, currentUser),
            isExistingGrantee: isExistingGrantee,
            granteeType: isGranularGranteeUser(grantee) ? "user" : "group",
            granteeEffectivePermission: granteeEffectivePermission,
        });
    }, [onInteraction, currentUser]);
    var granteeAddInteraction = useCallback(function (grantee) {
        if (!isGranularGrantee(grantee)) {
            return;
        }
        onInteraction({
            type: "SHARE_DIALOG_GRANTEE_ADDED",
            granteeType: isGranularGranteeUser(grantee) ? "user" : "group",
        });
    }, [onInteraction]);
    var availableGranteeListOpenInteraction = useCallback(function (numberOfAvailableGrantees) {
        return onInteraction({ type: "SHARE_DIALOG_AVAILABLE_GRANTEE_LIST_OPENED", numberOfAvailableGrantees: numberOfAvailableGrantees });
    }, [onInteraction]);
    return {
        openInteraction: openInteraction,
        closeInteraction: closeInteraction,
        saveInteraction: saveInteraction,
        permissionsDropdownOpenInteraction: permissionsDropdownOpenInteraction,
        permissionsChangeInteraction: permissionsChangeInteraction,
        permissionsRemoveInteraction: permissionsRemoveInteraction,
        granteeAddInteraction: granteeAddInteraction,
        availableGranteeListOpenInteraction: availableGranteeListOpenInteraction,
    };
};
//# sourceMappingURL=ComponentInteractionContext.js.map