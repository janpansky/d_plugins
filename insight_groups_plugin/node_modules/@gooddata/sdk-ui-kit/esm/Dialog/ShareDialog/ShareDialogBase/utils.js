import { __read, __spread } from "tslib";
import { areObjRefsEqual, idRef, objRefToString, uriRef, } from "@gooddata/sdk-model";
import { stringUtils } from "@gooddata/util";
import { isGranteeGroup, isGranteeGroupAll, isGranularGranteeGroup, } from "./types";
import differenceWith from "lodash/differenceWith";
import partition from "lodash/partition";
/**
 * @internal
 */
export var GROUP_ALL_ID = "groupAll";
/**
 * @internal
 */
export var GranteeGroupAll = {
    id: uriRef(GROUP_ALL_ID),
    type: "groupAll",
};
/**
 * @internal
 */
export var INACTIVE_OWNER_ID = "inactive_owner";
/**
 * @internal
 */
export var InactiveOwner = {
    id: uriRef(INACTIVE_OWNER_ID),
    type: "inactive_owner",
};
/**
 * @internal
 */
var exhaustiveCheck = function (_param) {
    throw new Error("unknown grantee type");
};
/**
 * @internal
 */
export var getGranteeLabel = function (grantee, intl) {
    if (grantee.type === "user" || grantee.type === "granularUser") {
        if (grantee.isCurrentUser) {
            return intl.formatMessage({ id: "shareDialog.share.grantee.item.you" }, { userName: grantee.name });
        }
        return grantee.name;
    }
    else if (grantee.type === "group" || grantee.type === "granularGroup") {
        return grantee.name;
    }
    else if (grantee.type === "groupAll") {
        return intl.formatMessage({ id: "shareDialog.share.grantee.item.user.all" });
    }
    else if (grantee.type === "inactive_owner") {
        return intl.formatMessage({ id: "shareDialog.share.grantee.item.user.inactive" });
    }
    else {
        exhaustiveCheck(grantee);
    }
};
/**
 * @internal
 */
export var sortGranteesByName = function (intl) {
    return function (granteeA, granteeB) {
        var textA = getGranteeLabel(granteeA, intl).toUpperCase();
        var textB = getGranteeLabel(granteeB, intl).toUpperCase();
        return textA < textB ? -1 : textA > textB ? 1 : 0;
    };
};
export var sortGranteeList = function (grantees, intl) {
    var granteeSort = sortGranteesByName(intl);
    var hasAllGroup = hasGroupAll(grantees);
    var granteesWithNoAllGroup = grantees.filter(function (g) { return !isGranteeGroupAll(g); });
    var _a = __read(partition(granteesWithNoAllGroup, function (grantee) { return isGranteeGroup(grantee) || isGranularGranteeGroup(grantee); }), 2), groups = _a[0], users = _a[1];
    var sorted = __spread(groups.sort(granteeSort), users.sort(granteeSort));
    if (hasAllGroup) {
        return __spread([GranteeGroupAll], sorted);
    }
    return sorted;
};
/**
 * @internal
 */
export var notInArrayFilter = function (array, notInArray) {
    return differenceWith(array, notInArray, function (g, g1) { return areObjRefsEqual(g.id, g1.id); });
};
/**
 * @internal
 */
export var hasGroupAll = function (array) {
    return array.some(function (g) { return areObjRefsEqual(g.id, GranteeGroupAll.id); });
};
/**
 * @internal
 */
export var getAppliedGrantees = function (grantees, granteesToAdd, granteesToDelete) {
    var omitDeleted = notInArrayFilter(grantees, granteesToDelete);
    return __spread(omitDeleted, granteesToAdd);
};
/**
 * @internal
 */
export var getGranteeItemTestId = function (grantee, prefix) {
    var prefixValue = prefix ? prefix + "-" : "";
    var id = objRefToString(grantee.id).split("/").pop();
    return "s-gd-grantee-item-id-" + prefixValue + stringUtils.simplifyText(id);
};
/**
 * @internal
 */
export var getGranularGranteeClassNameId = function (grantee) {
    var id = objRefToString(grantee.id).split("/").pop();
    return "gd-granular-grantee-item-id-" + stringUtils.simplifyText(id);
};
/**
 * @internal
 */
export var getGranularPermissionFromUserPermissions = function (userPermissions) {
    if (userPermissions.canEditAffectedObject || userPermissions.canEditLockedAffectedObject) {
        return "EDIT";
    }
    else if (userPermissions.canShareAffectedObject || userPermissions.canShareLockedAffectedObject) {
        return "SHARE";
    }
    else if (userPermissions.canViewAffectedObject) {
        return "VIEW";
    }
    else {
        return undefined;
    }
};
/**
 * Decide whether specific grantee is the currently logged in user.
 *
 * In some cases, current user might have uriRef instead of idRef or vice versa. This would result in
 * a false negative match. Method conveniently checks also user login to avoid such mismatch.
 *
 * @internal
 */
export var getIsGranteeCurrentUser = function (granteeRef, currentUser) {
    return (areObjRefsEqual(granteeRef, currentUser.ref) || areObjRefsEqual(granteeRef, idRef(currentUser.login)));
};
//# sourceMappingURL=utils.js.map