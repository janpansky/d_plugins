// (C) 2022-2023 GoodData Corporation
import { __assign } from "tslib";
import React, { useCallback } from "react";
import { FormattedMessage } from "react-intl";
import cx from "classnames";
import { GranularPermissionSelectItemWithBubble } from "./GranularPermissionItem";
import { ItemsWrapper, Separator } from "../../../../List";
import { Overlay } from "../../../../Overlay";
import { withBubble } from "../../../../Bubble";
import { granularPermissionMessageLabels } from "../../../../locales";
import { useShareDialogInteraction } from "../ComponentInteractionContext";
var overlayAlignPoints = [{ align: "br tr" }];
var RemoveItem = function (_a) {
    var disabled = _a.disabled, tooltipId = _a.tooltipId, onClick = _a.onClick;
    var className = cx("gd-list-item gd-menu-item", "s-granular-permission-remove", {
        "is-disabled": disabled,
    });
    var FormattedMessageWithBubble = withBubble(FormattedMessage);
    return (React.createElement("div", { className: className, onClick: onClick },
        React.createElement(FormattedMessageWithBubble, { id: granularPermissionMessageLabels.remove.id, showBubble: disabled, bubbleTextId: tooltipId })));
};
export var GranularPermissionsDropdownBody = function (_a) {
    var grantee = _a.grantee, granteePossibilities = _a.granteePossibilities, alignTo = _a.alignTo, isShowDropdown = _a.isShowDropdown, selectedPermission = _a.selectedPermission, toggleDropdown = _a.toggleDropdown, onChange = _a.onChange, onDelete = _a.onDelete, handleSetSelectedPermission = _a.handleSetSelectedPermission, mode = _a.mode;
    var _b = useShareDialogInteraction(), permissionsChangeInteraction = _b.permissionsChangeInteraction, permissionsRemoveInteraction = _b.permissionsRemoveInteraction;
    var handleOnDelete = useCallback(function () {
        if (granteePossibilities.remove.enabled) {
            var changedGrantee = __assign(__assign({}, grantee), { permissions: [], inheritedPermissions: [] });
            onDelete(changedGrantee);
            permissionsRemoveInteraction(grantee, mode === "ShareGrantee", granteePossibilities.assign.effective);
            toggleDropdown();
        }
    }, [grantee, onDelete, toggleDropdown, mode, granteePossibilities, permissionsRemoveInteraction]);
    var handleOnChange = useCallback(function (changedGrantee) {
        permissionsChangeInteraction(grantee, mode === "ShareGrantee", granteePossibilities.assign.effective, changedGrantee.permissions[0]);
        onChange(changedGrantee);
    }, [grantee, onChange, mode, granteePossibilities, permissionsChangeInteraction]);
    if (!isShowDropdown) {
        return null;
    }
    return (React.createElement(Overlay, { key: "GranularPermissionsSelect", alignTo: "." + alignTo, alignPoints: overlayAlignPoints, className: "s-granular-permissions-overlay", closeOnMouseDrag: true, closeOnOutsideClick: true, closeOnParentScroll: true, onClose: toggleDropdown },
        React.createElement(ItemsWrapper, { smallItemsSpacing: true },
            granteePossibilities.assign.items.map(function (permissionItem) {
                return (!permissionItem.hidden && (React.createElement(GranularPermissionSelectItemWithBubble, { grantee: grantee, key: permissionItem.id, permission: permissionItem, selectedPermission: selectedPermission, toggleDropdown: toggleDropdown, onChange: handleOnChange, handleSetSelectedPermission: handleSetSelectedPermission, bubbleTextId: permissionItem.tooltip, showBubble: !permissionItem.enabled })));
            }),
            React.createElement(Separator, null),
            React.createElement(RemoveItem, { disabled: !granteePossibilities.remove.enabled, onClick: handleOnDelete, tooltipId: granteePossibilities.remove.tooltip }))));
};
//# sourceMappingURL=GranularPermissionsDropdownBody.js.map