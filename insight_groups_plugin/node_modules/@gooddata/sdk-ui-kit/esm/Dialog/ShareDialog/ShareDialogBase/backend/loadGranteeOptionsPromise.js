// (C) 2021-2023 GoodData Corporation
import { __awaiter, __generator, __read, __spread } from "tslib";
import { getGranteeLabel, GranteeGroupAll, hasGroupAll, sortGranteesByName } from "../utils";
import { mapWorkspaceUserGroupToGrantee, mapWorkspaceUserToGrantee } from "../../shareDialogMappers";
import { isAvailableUserGroupAccessGrantee, isAvailableUserAccessGrantee, } from "@gooddata/sdk-model";
var createErrorOption = function (intl) {
    return [
        {
            isDisabled: true,
            type: "error",
            label: intl.formatMessage({
                id: "shareDialog.share.grantee.add.search.error.message",
            }),
        },
    ];
};
var matchAllGroupQueryString = function (query, allGroupLabel) {
    return allGroupLabel.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) > -1;
};
/**
 * @internal
 */
export var loadGranteeOptionsPromise = function (currentUser, sharedObjectRef, appliedGrantees, backend, workspace, intl, onGranteesLoaded) {
    return function (inputValue) { return __awaiter(void 0, void 0, void 0, function () {
        var availableGrantees, mappedUsers, mappedGroups, allGroupLabel, supportsEveryoneUserGroupForAccessControl, groupAllOption, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, backend
                            .workspace(workspace)
                            .accessControl()
                            .getAvailableGrantees(sharedObjectRef, inputValue)];
                case 1:
                    availableGrantees = _b.sent();
                    mappedUsers = availableGrantees
                        .filter(isAvailableUserAccessGrantee)
                        .map(function (availableGrantee) { return mapWorkspaceUserToGrantee(availableGrantee, currentUser); })
                        .sort(sortGranteesByName(intl))
                        .map(function (user) {
                        return {
                            label: getGranteeLabel(user, intl),
                            value: user,
                        };
                    });
                    mappedGroups = availableGrantees
                        .filter(isAvailableUserGroupAccessGrantee)
                        .map(function (availableGrantee) { return mapWorkspaceUserGroupToGrantee(availableGrantee); })
                        .sort(sortGranteesByName(intl))
                        .map(function (group) {
                        return {
                            label: getGranteeLabel(group, intl),
                            value: group,
                        };
                    });
                    allGroupLabel = getGranteeLabel(GranteeGroupAll, intl);
                    supportsEveryoneUserGroupForAccessControl = backend.capabilities.supportsEveryoneUserGroupForAccessControl;
                    if (!hasGroupAll(appliedGrantees) &&
                        matchAllGroupQueryString(inputValue, allGroupLabel) &&
                        supportsEveryoneUserGroupForAccessControl) {
                        groupAllOption = {
                            label: allGroupLabel,
                            value: GranteeGroupAll,
                        };
                        mappedGroups = __spread([groupAllOption], mappedGroups);
                    }
                    onGranteesLoaded(__spread(mappedUsers, mappedGroups).length);
                    return [2 /*return*/, [
                            {
                                label: intl.formatMessage({ id: "shareDialog.share.grantee.add.label.group" }),
                                options: mappedGroups,
                            },
                            {
                                label: intl.formatMessage({ id: "shareDialog.share.grantee.add.label.user" }),
                                options: mappedUsers,
                            },
                        ]];
                case 2:
                    _a = _b.sent();
                    return [2 /*return*/, createErrorOption(intl)];
                case 3: return [2 /*return*/];
            }
        });
    }); };
};
//# sourceMappingURL=loadGranteeOptionsPromise.js.map