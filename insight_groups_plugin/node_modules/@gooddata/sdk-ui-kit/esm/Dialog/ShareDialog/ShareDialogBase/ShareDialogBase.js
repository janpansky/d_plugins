// (C) 2021-2023 GoodData Corporation
import React, { useCallback, useEffect } from "react";
import { Overlay } from "../../../Overlay";
import { ShareGranteeBase } from "./ShareGranteeBase";
import { AddGranteeBase } from "./AddGranteeBase";
import { useShareDialogBase } from "./useShareDialogBase";
import { useShareDialogInteraction } from "./ComponentInteractionContext";
var alignPoints = [{ align: "cc cc" }];
/**
 * @internal
 */
export var ShareDialogBase = function (props) {
    var onCancel = props.onCancel, sharedObject = props.sharedObject, currentUser = props.currentUser, currentUserPermissions = props.currentUserPermissions, isCurrentUserWorkspaceManager = props.isCurrentUserWorkspaceManager;
    var _a = useShareDialogInteraction(), openInteraction = _a.openInteraction, closeInteraction = _a.closeInteraction;
    useEffect(function () {
        openInteraction();
    }, [openInteraction]);
    var handleCancel = useCallback(function () {
        onCancel();
        closeInteraction();
    }, [onCancel, closeInteraction]);
    var _b = useShareDialogBase(props), onAddedGranteeDelete = _b.onAddedGranteeDelete, onSharedGranteeDelete = _b.onSharedGranteeDelete, onAddGranteeBackClick = _b.onAddGranteeBackClick, onAddGranteeButtonClick = _b.onAddGranteeButtonClick, onGranteeAdd = _b.onGranteeAdd, onSubmitShareGrantee = _b.onSubmitShareGrantee, onSubmitAddGrantee = _b.onSubmitAddGrantee, granteesToAdd = _b.granteesToAdd, dialogMode = _b.dialogMode, isShareDialogDirty = _b.isShareDialogDirty, isAddDialogDirty = _b.isAddDialogDirty, sharedGrantees = _b.sharedGrantees, appliedGranteesWithOwner = _b.appliedGranteesWithOwner, isGranteesLoading = _b.isGranteesLoading, isLockedNow = _b.isLockedNow, isUnderLenientControlNow = _b.isUnderLenientControlNow, onLockChange = _b.onLockChange, onUnderLenientControlChange = _b.onUnderLenientControlChange, onGranularGranteeAddChange = _b.onGranularGranteeAddChange, onGranularGranteeShareChange = _b.onGranularGranteeShareChange;
    return (React.createElement(Overlay, { alignPoints: alignPoints, isModal: true, positionType: "fixed", className: "gd-share-dialog-overlay" },
        React.createElement("div", { className: "s-gd-share-dialog" }, dialogMode === "ShareGrantee" ? (React.createElement(ShareGranteeBase, { currentUserPermissions: currentUserPermissions, currentUser: currentUser, isLoading: isGranteesLoading, isDirty: isShareDialogDirty, isLockedNow: isLockedNow, isUnderLenientControlNow: isUnderLenientControlNow, sharedObject: sharedObject, grantees: sharedGrantees, onCancel: handleCancel, onSubmit: onSubmitShareGrantee, onAddGranteeButtonClick: onAddGranteeButtonClick, onGranteeDelete: onSharedGranteeDelete, onLockChange: onLockChange, onUnderLenientControlChange: onUnderLenientControlChange, onGranularGranteeChange: onGranularGranteeShareChange, isCurrentUserWorkspaceManager: isCurrentUserWorkspaceManager })) : (React.createElement(AddGranteeBase, { currentUserPermissions: currentUserPermissions, isDirty: isAddDialogDirty, currentUser: currentUser, appliedGrantees: appliedGranteesWithOwner, addedGrantees: granteesToAdd, sharedObject: sharedObject, onAddUserOrGroups: onGranteeAdd, onDelete: onAddedGranteeDelete, onCancel: handleCancel, onSubmit: onSubmitAddGrantee, onBackClick: onAddGranteeBackClick, onGranularGranteeChange: onGranularGranteeAddChange })))));
};
//# sourceMappingURL=ShareDialogBase.js.map