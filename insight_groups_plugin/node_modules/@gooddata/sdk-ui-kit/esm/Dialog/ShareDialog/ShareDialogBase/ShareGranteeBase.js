import { __read, __spread } from "tslib";
// (C) 2021-2023 GoodData Corporation
import React, { useMemo } from "react";
import { useIntl } from "react-intl";
import compact from "lodash/compact";
import { ConfirmDialogBase } from "../../ConfirmDialogBase";
import { ContentDivider } from "./ContentDivider";
import { ShareGranteeContent } from "./ShareGranteeContent";
import { SharedObjectUnderLenientControl } from "./SharedObjectUnderLenientControl";
import { SharedObjectLockControl } from "./SharedObjectLockControl";
import { useAdminInformationMessageState } from "./useAdminInformationMessage";
import { AdminInformationMessage } from "./AdminInformationMessage";
/**
 * @internal
 */
export var ShareGranteeBase = function (props) {
    var currentUser = props.currentUser, isLoading = props.isLoading, isLockedNow = props.isLockedNow, isUnderLenientControlNow = props.isUnderLenientControlNow, grantees = props.grantees, sharedObject = props.sharedObject, isDirty = props.isDirty, currentUserPermissions = props.currentUserPermissions, onCancel = props.onCancel, onSubmit = props.onSubmit, onGranteeDelete = props.onGranteeDelete, onGranularGranteeChange = props.onGranularGranteeChange, onAddGranteeButtonClick = props.onAddGranteeButtonClick, onLockChange = props.onLockChange, onUnderLenientControlChange = props.onUnderLenientControlChange, isCurrentUserWorkspaceManager = props.isCurrentUserWorkspaceManager;
    var owner = sharedObject.owner, isLeniencyControlSupported = sharedObject.isLeniencyControlSupported, isLockingSupported = sharedObject.isLockingSupported, areGranularPermissionsSupported = sharedObject.areGranularPermissionsSupported, isMetadataObjectLockingSupported = sharedObject.isMetadataObjectLockingSupported, isLocked = sharedObject.isLocked, canWorkspaceManagerSeeEverySharedObject = sharedObject.canWorkspaceManagerSeeEverySharedObject;
    var intl = useIntl();
    var _a = useAdminInformationMessageState(currentUser.ref), isMessageVisible = _a.isMessageVisible, handleMessageClose = _a.handleMessageClose;
    var granteeList = useMemo(function () {
        return compact(__spread([owner], grantees));
    }, [grantees, owner]);
    var dialogLabels = useMemo(function () {
        return {
            headline: intl.formatMessage({ id: "shareDialog.share.grantee.title" }),
            cancelButtonText: intl.formatMessage({ id: "cancel" }),
            submitButtonText: intl.formatMessage({ id: "save" }),
        };
    }, [intl]);
    var shouldDisplayAdminMessage = useMemo(function () {
        return canWorkspaceManagerSeeEverySharedObject &&
            isCurrentUserWorkspaceManager &&
            !isLoading &&
            isMessageVisible;
    }, [canWorkspaceManagerSeeEverySharedObject, isCurrentUserWorkspaceManager, isLoading, isMessageVisible]);
    return (React.createElement(ConfirmDialogBase, { className: "gd-share-dialog s-gd-share-grantees", displayCloseButton: true, isPositive: true, isSubmitDisabled: !isDirty, headline: dialogLabels.headline, cancelButtonText: dialogLabels.cancelButtonText, submitButtonText: dialogLabels.submitButtonText, onCancel: onCancel, onSubmit: onSubmit },
        React.createElement(ShareGranteeContent, { currentUserPermissions: currentUserPermissions, isSharedObjectLocked: isLocked, isLoading: isLoading, grantees: granteeList, areGranularPermissionsSupported: areGranularPermissionsSupported, onAddGrantee: onAddGranteeButtonClick, onDelete: onGranteeDelete, onChange: onGranularGranteeChange }),
        React.createElement(ContentDivider, null),
        React.createElement(AdminInformationMessage, { isVisible: shouldDisplayAdminMessage, onClose: handleMessageClose }),
        React.createElement(SharedObjectUnderLenientControl, { isUnderLenientControl: isUnderLenientControlNow, isLeniencyControlSupported: isLeniencyControlSupported, onUnderLenientControlChange: onUnderLenientControlChange }),
        isMetadataObjectLockingSupported && (React.createElement(SharedObjectLockControl, { isLocked: isLockedNow, isLockingSupported: isLockingSupported, onLockChange: onLockChange }))));
};
//# sourceMappingURL=ShareGranteeBase.js.map