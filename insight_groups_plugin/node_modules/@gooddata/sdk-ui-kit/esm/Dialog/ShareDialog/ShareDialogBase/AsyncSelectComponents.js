import { __assign } from "tslib";
// (C) 2021-2022 GoodData Corporation
import React from "react";
import { components as ReactSelectComponents, } from "react-select";
import { Typography } from "../../../Typography";
import { LoadingMask } from "../../../LoadingMask";
import { isGranteeItem, isGranteeUser, isSelectErrorOption, } from "./types";
import { getGranteeItemTestId } from "./utils";
export var EmptyRenderer = function () {
    return null;
};
export var LoadingMessageRenderer = function () {
    return (React.createElement("div", { className: "gd-share-dialog-loading-mask-container" },
        React.createElement(LoadingMask, { size: "small" })));
};
export var NoOptionsMessageRenderer = function (props) {
    return (React.createElement("div", { className: "s-gd-share-dialog-no-option" },
        React.createElement(ReactSelectComponents.NoOptionsMessage, __assign({}, props))));
};
export var MenuListRendered = function (props) {
    return (React.createElement(ReactSelectComponents.MenuList, __assign({}, props),
        React.createElement("div", { className: "s-gd-share-dialog-menu" }, props.children)));
};
export var InputRendered = function (props) {
    return (React.createElement("div", { className: "gd-share-dialog-input s-gd-share-dialog-input" },
        React.createElement(ReactSelectComponents.Input, __assign({}, props))));
};
var OptionContentRenderer = function (item) {
    if (isGranteeUser(item.value)) {
        return (React.createElement(React.Fragment, null,
            item.label,
            " ",
            React.createElement("span", { className: "option-email" }, item.value.email)));
    }
    return React.createElement(React.Fragment, null,
        " ",
        item.label,
        " ");
};
export var ErrorOptionRenderer = function (errorOption) {
    return (React.createElement("div", { className: "gd-share-dialog-option-error s-gd-share-dialog-option-error" },
        React.createElement("span", { className: "gd-share-dialog-option-error-content" }, errorOption.label)));
};
export var OptionRenderer = function (props) {
    var className = props.className, cx = props.cx, isFocused = props.isFocused, innerRef = props.innerRef, innerProps = props.innerProps, data = props.data;
    if (isSelectErrorOption(data)) {
        return ErrorOptionRenderer(data);
    }
    var sTestStyle = "";
    if (isGranteeItem(data.value)) {
        sTestStyle = getGranteeItemTestId(data.value, "option");
    }
    var componentStyle = cx({
        option: true,
        "option--is-focused": isFocused,
    }, className);
    return (React.createElement("div", __assign({ ref: innerRef, className: componentStyle + " " + sTestStyle }, innerProps),
        React.createElement("div", { className: "option-content" }, OptionContentRenderer(data))));
};
export var GroupHeadingRenderer = function (props) {
    var label = props.data.label;
    return (React.createElement("div", { className: "gd-share-dialog-select-group-heading" },
        React.createElement(Typography, { tagName: "h3" }, label)));
};
//# sourceMappingURL=AsyncSelectComponents.js.map