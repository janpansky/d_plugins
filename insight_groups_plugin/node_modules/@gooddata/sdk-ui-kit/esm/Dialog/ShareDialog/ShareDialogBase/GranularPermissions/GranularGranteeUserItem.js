// (C) 2022-2023 GoodData Corporation
import React, { useCallback, useMemo } from "react";
import { useIntl } from "react-intl";
import cx from "classnames";
import { GranteeUserIcon } from "../GranteeIcons";
import { getGranteeItemTestId, getGranteeLabel } from "../utils";
import { GranularPermissionsDropdownWithBubble } from "./GranularPermissionsDropdown";
import { usePermissionsDropdownState } from "./usePermissionsDropdownState";
import { getGranteePossibilities } from "./permissionsLogic";
import { useShareDialogInteraction } from "../ComponentInteractionContext";
export var GranularGranteeUserItem = function (props) {
    var grantee = props.grantee, currentUserPermissions = props.currentUserPermissions, isSharedObjectLocked = props.isSharedObjectLocked, onChange = props.onChange, onDelete = props.onDelete, mode = props.mode;
    var email = grantee.email;
    var _a = usePermissionsDropdownState(), isDropdownOpen = _a.isDropdownOpen, toggleDropdown = _a.toggleDropdown;
    var permissionsDropdownOpenInteraction = useShareDialogInteraction().permissionsDropdownOpenInteraction;
    var intl = useIntl();
    var itemClassName = cx({ "s-share-dialog-current-user": grantee.isCurrentUser }, "s-share-dialog-grantee-item", "gd-share-dialog-grantee-item", getGranteeItemTestId(grantee), { "is-active": isDropdownOpen });
    var label = useMemo(function () {
        return getGranteeLabel(grantee, intl);
    }, [grantee, intl]);
    var renderSubtitle = useMemo(function () { return email && email !== label; }, [email, label]);
    var granteePossibilities = useMemo(function () { return getGranteePossibilities(grantee, currentUserPermissions, isSharedObjectLocked); }, [grantee, currentUserPermissions, isSharedObjectLocked]);
    var handleToggleDropdown = useCallback(function () {
        toggleDropdown();
        if (!isDropdownOpen) {
            permissionsDropdownOpenInteraction(grantee, mode === "ShareGrantee", granteePossibilities.assign.effective);
        }
    }, [
        toggleDropdown,
        isDropdownOpen,
        grantee,
        mode,
        permissionsDropdownOpenInteraction,
        granteePossibilities,
    ]);
    return (React.createElement("div", { className: itemClassName },
        React.createElement(GranularPermissionsDropdownWithBubble, { grantee: grantee, granteePossibilities: granteePossibilities, isDropdownOpen: isDropdownOpen, toggleDropdown: handleToggleDropdown, onChange: onChange, onDelete: onDelete, isDropdownDisabled: !granteePossibilities.change.enabled, bubbleTextId: granteePossibilities.change.tooltip, className: "gd-grantee-granular-permission", triggerClassName: "gd-grantee-granular-permission-bubble-trigger", mode: mode }),
        React.createElement("div", { className: "gd-grantee-content" },
            React.createElement("div", { className: "gd-grantee-content-label" }, label),
            renderSubtitle && (React.createElement("div", { className: "gd-grantee-content-label gd-grantee-content-email" }, email))),
        React.createElement(GranteeUserIcon, null)));
};
//# sourceMappingURL=GranularGranteeUserItem.js.map