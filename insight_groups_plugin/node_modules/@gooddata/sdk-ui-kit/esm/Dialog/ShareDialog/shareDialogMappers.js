// (C) 2021-2023 GoodData Corporation
import { areObjRefsEqual, isUserAccess, isUserGroupAccess, isGranularUserAccess, isGranularUserGroupAccess, } from "@gooddata/sdk-model";
import { typesUtils } from "@gooddata/util";
import { isGranteeGroupAll, isGranteeUserInactive, isGranteeUser, isGranularGrantee, } from "./ShareDialogBase/types";
import { GranteeGroupAll, InactiveOwner, getAppliedGrantees, hasGroupAll, getIsGranteeCurrentUser, } from "./ShareDialogBase/utils";
var mapUserStatusToGranteeStatus = function (status) {
    if (status === "DISABLED") {
        return "Inactive";
    }
    return "Active";
};
/**
 * @internal
 */
export var mapWorkspaceUserToGrantee = function (user, currentUser) {
    return {
        type: "user",
        id: user.ref,
        name: user.name,
        email: user.email,
        isOwner: false,
        isCurrentUser: getIsGranteeCurrentUser(user.ref, currentUser),
        status: mapUserStatusToGranteeStatus(user.status),
    };
};
/**
 * @internal
 */
export var mapWorkspaceUserGroupToGrantee = function (userGroup) {
    return {
        id: userGroup.ref,
        type: "group",
        name: userGroup.name,
    };
};
/**
 * @internal
 */
export var mapUserFullName = function (user) {
    if (user.fullName) {
        return user.fullName;
    }
    return user.firstName + " " + user.lastName;
};
/**
 * @internal
 */
export var mapOwnerToGrantee = function (user, currentUserRef) {
    return {
        type: "user",
        id: user.ref,
        name: mapUserFullName(user),
        email: user.email,
        isOwner: true,
        isCurrentUser: areObjRefsEqual(user.ref, currentUserRef),
        status: "Active",
    };
};
/**
 * @internal
 */
export var mapUserToInactiveOwner = function () {
    return InactiveOwner;
};
/**
 * @internal
 */
export var mapShareStatusToGroupAll = function (shareStatus) {
    if (shareStatus === "public") {
        return GranteeGroupAll;
    }
};
/**
 * @internal
 */
export var mapGranteesToGranularAccessGrantees = function (grantees, added) {
    var guard = typesUtils.combineGuards(isGranteeGroupAll, isGranteeUserInactive);
    return grantees
        .filter(function (g) { return !guard(g); })
        .map(function (g) {
        if (isGranularGrantee(g)) {
            return {
                type: g.type,
                granteeRef: g.id,
                permissions: g.permissions,
                inheritedPermissions: g.inheritedPermissions,
            };
        }
        else {
            var type = isGranteeUser(g) ? "granularUser" : "granularGroup";
            return {
                type: type,
                granteeRef: g.id,
                // When grantee is not granular, we need to insert some dummy permission when adding access.
                permissions: added ? ["VIEW"] : [],
                inheritedPermissions: [],
            };
        }
    });
};
/**
 * @internal
 */
export var mapUserAccessToGrantee = function (userAccess, currentUser) {
    var user = userAccess.user, type = userAccess.type;
    return {
        type: type,
        id: user.ref,
        name: mapUserFullName(user),
        email: user.email,
        isOwner: false,
        isCurrentUser: getIsGranteeCurrentUser(user.ref, currentUser),
        status: mapUserStatusToGranteeStatus(user.status),
    };
};
/**
 * @internal
 */
export var mapUserGroupAccessToGrantee = function (userGroupAccess) {
    var userGroup = userGroupAccess.userGroup, type = userGroupAccess.type;
    return {
        type: type,
        id: userGroup.ref,
        name: userGroup.name,
    };
};
/**
 * @internal
 */
export var mapGranularUserAccessToGrantee = function (userAccess, currentUser) {
    var user = userAccess.user, type = userAccess.type, permissions = userAccess.permissions, inheritedPermissions = userAccess.inheritedPermissions;
    return {
        type: type,
        id: user.ref,
        name: mapUserFullName(user),
        email: user.email,
        isOwner: false,
        isCurrentUser: getIsGranteeCurrentUser(user.ref, currentUser),
        status: mapUserStatusToGranteeStatus(user.status),
        permissions: permissions,
        inheritedPermissions: inheritedPermissions,
    };
};
/**
 * @internal
 */
export var mapGranularUserGroupAccessToGrantee = function (userGroupAccess) {
    var userGroup = userGroupAccess.userGroup, type = userGroupAccess.type, permissions = userGroupAccess.permissions, inheritedPermissions = userGroupAccess.inheritedPermissions;
    return {
        type: type,
        id: userGroup.ref,
        name: userGroup.name,
        permissions: permissions,
        inheritedPermissions: inheritedPermissions,
    };
};
export var mapAccessGranteeDetailToGrantee = function (accessGranteeDetail, currentUser) {
    if (isUserAccess(accessGranteeDetail)) {
        return mapUserAccessToGrantee(accessGranteeDetail, currentUser);
    }
    else if (isUserGroupAccess(accessGranteeDetail)) {
        return mapUserGroupAccessToGrantee(accessGranteeDetail);
    }
    else if (isGranularUserAccess(accessGranteeDetail)) {
        return mapGranularUserAccessToGrantee(accessGranteeDetail, currentUser);
    }
    else if (isGranularUserGroupAccess(accessGranteeDetail)) {
        return mapGranularUserGroupAccessToGrantee(accessGranteeDetail);
    }
};
/**
 * @internal
 */
export var mapGranteesToShareStatus = function (grantees, granteesToAdd, granteesToDelete) {
    var appliedGrantees = getAppliedGrantees(grantees, granteesToAdd, granteesToDelete);
    if (hasGroupAll(appliedGrantees)) {
        return "public";
    }
    if (appliedGrantees.length > 0) {
        return "shared";
    }
    return "private";
};
/**
 * @internal
 */
export var mapSharedObjectToAffectedSharedObject = function (sharedObject, owner, isLockingSupported, isLeniencyControlSupported, areGranularPermissionsSupported, isMetadataObjectLockingSupported, canWorkspaceManagerSeeEverySharedObject) {
    if (areGranularPermissionsSupported === void 0) { areGranularPermissionsSupported = false; }
    if (isMetadataObjectLockingSupported === void 0) { isMetadataObjectLockingSupported = true; }
    if (canWorkspaceManagerSeeEverySharedObject === void 0) { canWorkspaceManagerSeeEverySharedObject = false; }
    var ref = sharedObject.ref, shareStatus = sharedObject.shareStatus, isLocked = sharedObject.isLocked, isUnderStrictControl = sharedObject.isUnderStrictControl;
    return {
        ref: ref,
        shareStatus: shareStatus,
        owner: owner,
        isLocked: !!isLocked,
        isUnderLenientControl: !isUnderStrictControl,
        isLockingSupported: isLockingSupported,
        isLeniencyControlSupported: isLeniencyControlSupported,
        areGranularPermissionsSupported: areGranularPermissionsSupported,
        isMetadataObjectLockingSupported: isMetadataObjectLockingSupported,
        canWorkspaceManagerSeeEverySharedObject: canWorkspaceManagerSeeEverySharedObject,
    };
};
//# sourceMappingURL=shareDialogMappers.js.map