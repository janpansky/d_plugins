// (C) 2021-2023 GoodData Corporation
import React, { useCallback, useMemo } from "react";
import { BackendProvider, IntlWrapper, UnexpectedSdkError, useBackendStrict, useWorkspaceStrict, WorkspaceProvider, } from "@gooddata/sdk-ui";
import { ShareDialogBase } from "./ShareDialogBase/ShareDialogBase";
import { mapGranteesToGranularAccessGrantees, mapGranteesToShareStatus, mapOwnerToGrantee, mapUserToInactiveOwner, mapSharedObjectToAffectedSharedObject, } from "./shareDialogMappers";
import { ComponentLabelsProvider } from "./ShareDialogBase/ComponentLabelsContext";
import { ComponentInteractionProvider } from "./ShareDialogBase/ComponentInteractionContext";
import noop from "lodash/noop";
/**
 * @internal
 */
export var ShareDialog = function (props) {
    var backend = props.backend, workspace = props.workspace, locale = props.locale, sharedObject = props.sharedObject, currentUser = props.currentUser, onApply = props.onApply, onCancel = props.onCancel, onError = props.onError, _a = props.onInteraction, onInteraction = _a === void 0 ? noop : _a, isLockingSupported = props.isLockingSupported, isCurrentUserWorkspaceManager = props.isCurrentUserWorkspaceManager, labels = props.labels, currentUserPermissions = props.currentUserPermissions;
    var effectiveBackend = useBackendStrict(backend);
    var effectiveWorkspace = useWorkspaceStrict(workspace);
    var areGranularPermissionsSupported = effectiveBackend.capabilities.supportsGranularAccessControl;
    var isLeniencyControlSupported = !effectiveBackend.capabilities.usesStrictAccessControl;
    var isMetadataObjectLockingSupported = effectiveBackend.capabilities.supportsMetadataObjectLocking;
    var canWorkspaceManagerSeeEverySharedObject = effectiveBackend.capabilities.canWorkspaceManagerSeeEverySharedObject;
    var createdBy = sharedObject.createdBy;
    var currentUserRef = currentUser.ref;
    var onShareDialogBaseError = useCallback(function (err) {
        onError === null || onError === void 0 ? void 0 : onError(new UnexpectedSdkError(err.message, err));
    }, [onError]);
    var owner = useMemo(function () {
        if (areGranularPermissionsSupported) {
            return undefined;
        }
        if (createdBy) {
            return mapOwnerToGrantee(createdBy, currentUserRef);
        }
        return mapUserToInactiveOwner();
    }, [createdBy, currentUserRef, areGranularPermissionsSupported]);
    var onSubmit = useCallback(function (grantees, granteesToAdd, granteesToDelete, isUnderLenientControl, isLocked) {
        var shareStatus = mapGranteesToShareStatus(grantees, granteesToAdd, granteesToDelete);
        var isUnderStrictControl = shareStatus !== "public" && !isUnderLenientControl;
        var addAccess = mapGranteesToGranularAccessGrantees(granteesToAdd, true);
        var revokeAccess = mapGranteesToGranularAccessGrantees(granteesToDelete);
        onApply({
            shareStatus: shareStatus,
            isUnderStrictControl: isUnderStrictControl,
            isLocked: isLocked,
            granteesToAdd: addAccess,
            granteesToDelete: revokeAccess,
        });
    }, [onApply]);
    var affectedSharedObject = useMemo(function () {
        return mapSharedObjectToAffectedSharedObject(sharedObject, owner, isLockingSupported, isLeniencyControlSupported, areGranularPermissionsSupported, isMetadataObjectLockingSupported, canWorkspaceManagerSeeEverySharedObject);
    }, [
        sharedObject,
        owner,
        isLockingSupported,
        isLeniencyControlSupported,
        areGranularPermissionsSupported,
        isMetadataObjectLockingSupported,
        canWorkspaceManagerSeeEverySharedObject,
    ]);
    return (React.createElement(IntlWrapper, { locale: locale },
        React.createElement(BackendProvider, { backend: effectiveBackend },
            React.createElement(WorkspaceProvider, { workspace: effectiveWorkspace },
                React.createElement(ComponentLabelsProvider, { labels: labels },
                    React.createElement(ComponentInteractionProvider, { onInteraction: onInteraction, currentUser: currentUser, currentUserPermissions: currentUserPermissions, isCurrentUserWorkspaceManager: isCurrentUserWorkspaceManager, sharedObjectStatus: affectedSharedObject.shareStatus, isSharedObjectLocked: affectedSharedObject.isLocked },
                        React.createElement(ShareDialogBase, { currentUser: currentUser, sharedObject: affectedSharedObject, isCurrentUserWorkspaceManager: isCurrentUserWorkspaceManager, currentUserPermissions: currentUserPermissions, onCancel: onCancel, onSubmit: onSubmit, onError: onShareDialogBaseError })))))));
};
//# sourceMappingURL=ShareDialog.js.map