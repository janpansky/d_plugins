import { __assign, __awaiter, __generator, __spreadArrays } from "tslib";
// (C) 2007-2022 GoodData Corporation
import invariant from "ts-invariant";
import { getAllPagesByOffsetLimit, getQueryEntries, handlePolling, parseSettingItemValue } from "./util";
import { ApiError } from "./xhr";
import { stringify } from "./utils/queryString";
export var DEFAULT_PALETTE = [
    { r: 0x2b, g: 0x6b, b: 0xae },
    { r: 0x69, g: 0xaa, b: 0x51 },
    { r: 0xee, g: 0xb1, b: 0x4c },
    { r: 0xd5, g: 0x3c, b: 0x38 },
    { r: 0x89, g: 0x4d, b: 0x94 },
    { r: 0x73, g: 0x73, b: 0x73 },
    { r: 0x44, g: 0xa9, b: 0xbe },
    { r: 0x96, g: 0xbd, b: 0x5f },
    { r: 0xfd, g: 0x93, b: 0x69 },
    { r: 0xe1, g: 0x5d, b: 0x86 },
    { r: 0x7c, g: 0x6f, b: 0xad },
    { r: 0xa5, g: 0xa5, b: 0xa5 },
    { r: 0x7a, g: 0xa6, b: 0xd5 },
    { r: 0x82, g: 0xd0, b: 0x8d },
    { r: 0xff, g: 0xd2, b: 0x89 },
    { r: 0xf1, g: 0x84, b: 0x80 },
    { r: 0xbf, g: 0x90, b: 0xc6 },
    { r: 0xbf, g: 0xbf, b: 0xbf },
];
var isProjectCreated = function (project) {
    // TODO
    var projectState = project.content.state;
    return projectState === "ENABLED" || projectState === "DELETED";
};
/**
 * Functions for working with projects
 *
 */
var ProjectModule = /** @class */ (function () {
    function ProjectModule(xhr) {
        this.xhr = xhr;
    }
    /**
     * Get current project id
     *
     * @returns current project identifier
     */
    ProjectModule.prototype.getCurrentProjectId = function () {
        return this.xhr
            .getParsed("/gdc/app/account/bootstrap/projectId")
            .then(function (response) { return response.projectId; });
    };
    /**
     * Fetches project by its identifier.
     *
     * @param projectId - Project identifier
     * @returns Project
     */
    ProjectModule.prototype.getProject = function (projectId) {
        return this.xhr.getParsed("/gdc/projects/" + projectId);
    };
    /**
     * Fetches projects available for the user represented by the given profileId
     *
     * @param profileId - User profile identifier
     * @returns An Array of projects
     */
    ProjectModule.prototype.getProjects = function (profileId) {
        return getAllPagesByOffsetLimit(this.xhr, "/gdc/account/profile/" + profileId + "/projects", "projects").then(function (result) { return result.map(function (p) { return p.project; }); });
    };
    /**
     * Fetches projects available for the user represented by the given profileId page by page.
     * @param userId - id of the user to get the projects for
     * @param offset - number of items to skip
     * @param limit - maximum items on page
     * @param search - search string that is matched to project title as a substring
     */
    ProjectModule.prototype.getProjectsWithPaging = function (userId, offset, limit, search) {
        // inspired by ProjectDataSource in goodstrap. Maybe the /gdc/account/profile/${profileId}/projects would be suitable as well.
        var mergedOptions = {
            limit: limit,
            offset: offset,
            userId: userId,
            projectStates: "ENABLED",
            userState: "ENABLED",
        };
        if (search) {
            mergedOptions.titleSubstring = search;
        }
        var uri = "/gdc/internal/projects/?" + stringify(mergedOptions);
        return this.xhr.get(uri).then(function (res) { return res.getData(); });
    };
    /**
     * Fetches all datasets for the given project
     *
     * @param projectId - GD project identifier
     * @returns An array of objects containing datasets metadata
     */
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    ProjectModule.prototype.getDatasets = function (projectId) {
        return this.xhr
            .get("/gdc/md/" + projectId + "/query/datasets")
            .then(function (r) { return r.getData(); })
            .then(getQueryEntries);
    };
    /**
     * Fetches a chart color palette for a project represented by the given
     * projectId parameter.
     *
     * @param projectId - A project identifier
     * @returns An array of objects with r, g, b fields representing a project's
     * color palette
     */
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    ProjectModule.prototype.getColorPalette = function (projectId) {
        return this.xhr
            .get("/gdc/projects/" + projectId + "/styleSettings")
            .then(function (apiResponse) {
            return apiResponse.getData();
        })
            .then(function (result) {
            if (!result) {
                return DEFAULT_PALETTE;
            }
            return result.styleSettings.chartPalette.map(function (c) {
                return {
                    r: c.fill.r,
                    g: c.fill.g,
                    b: c.fill.b,
                };
            });
        })
            .catch(function (e) {
            if (!(e instanceof ApiError)) {
                return DEFAULT_PALETTE;
            }
            throw e;
        });
    };
    /**
     * Fetches a chart color palette for a project represented by the given
     * projectId parameter.
     *
     * @param projectId - A project identifier
     * @returns An array of objects representing a project's
     * color palette with color guid or undefined
     */
    ProjectModule.prototype.getColorPaletteWithGuids = function (projectId) {
        return this.xhr
            .get("/gdc/projects/" + projectId + "/styleSettings")
            .then(function (apiResponse) {
            return apiResponse.getData();
        })
            .then(function (result) {
            if (result === null || result === void 0 ? void 0 : result.styleSettings) {
                return result.styleSettings.chartPalette;
            }
            else {
                return undefined;
            }
        })
            .catch(function (e) {
            if (!(e instanceof ApiError)) {
                return undefined;
            }
            throw e;
        });
    };
    /**
     * Sets given colors as a color palette for a given project.
     *
     * @param projectId - GD project identifier
     * @param colors - An array of colors that we want to use within the project.
     * Each color should be an object with r, g, b fields. // TODO really object?
     */
    ProjectModule.prototype.setColorPalette = function (projectId, colors) {
        return this.xhr.put("/gdc/projects/" + projectId + "/styleSettings", {
            body: {
                styleSettings: {
                    chartPalette: colors.map(function (fill, idx) {
                        return { fill: fill, guid: "guid" + idx };
                    }),
                },
            },
        });
    };
    /**
     * Gets current timezone and its offset.
     * @example
     *
     * Example output:
     *
     * ```
     * {
     *     id: 'Europe/Prague',
     *     displayName: 'Central European Time',
     *     currentOffsetMs: 3600000
     * }
     * ```
     *
     * @param projectId - GD project identifier
     */
    ProjectModule.prototype.getTimezone = function (projectId) {
        var uri = "/gdc/app/projects/" + projectId + "/timezone";
        return this.xhr.getParsed(uri).then(function (result) { return result.timezone; });
    };
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    ProjectModule.prototype.setTimezone = function (projectId, timezone) {
        var timezoneServiceUrl = "/gdc/md/" + projectId + "/service/timezone";
        var data = {
            service: { timezone: timezone },
        };
        return this.xhr
            .post(timezoneServiceUrl, {
            body: data,
        })
            .then(function (r) { return r.getData(); });
    };
    /**
     * Create project
     * Note: returns a promise which is resolved when the project creation is finished
     *
     * @experimental
     * @param title - title of the new project
     * @param authorizationToken - authorization token to use
     * @param options - for project creation (summary, projectTemplate, ...)
     * @returns created project object
     */
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    ProjectModule.prototype.createProject = function (title, authorizationToken, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var summary = options.summary, projectTemplate = options.projectTemplate, _a = options.driver, driver = _a === void 0 ? "Pg" : _a, _b = options.environment, environment = _b === void 0 ? "TESTING" : _b, _c = options.guidedNavigation, guidedNavigation = _c === void 0 ? 1 : _c;
        return this.xhr
            .post("/gdc/projects", {
            body: JSON.stringify({
                project: {
                    content: {
                        guidedNavigation: guidedNavigation,
                        driver: driver,
                        authorizationToken: authorizationToken,
                        environment: environment,
                    },
                    meta: {
                        title: title,
                        summary: summary,
                        projectTemplate: projectTemplate,
                    },
                },
            }),
        })
            .then(function (r) { return r.getData(); })
            .then(function (project) {
            return handlePolling(_this.xhr.get.bind(_this.xhr), project.uri, function (response) {
                // TODO project response
                return isProjectCreated(response.project);
            }, options);
        });
    };
    /**
     * Delete project
     *
     * @param projectId - projectId to delete
     */
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    ProjectModule.prototype.deleteProject = function (projectId) {
        return this.xhr.del("/gdc/projects/" + projectId);
    };
    /**
     * Gets aggregated feature flags for given project and current user
     *
     * @param projectId - A project identifier
     * @returns Hash table of feature flags and theirs values where feature flag is as key
     */
    ProjectModule.prototype.getFeatureFlags = function (projectId) {
        return this.xhr
            .get("/gdc/app/projects/" + projectId + "/featureFlags")
            .then(function (apiResponse) {
            return apiResponse.getData();
        })
            .then(function (result) {
            if (result === null || result === void 0 ? void 0 : result.featureFlags) {
                return result.featureFlags;
            }
            return {};
        });
    };
    /**
     * Gets project config including project specific feature flags
     *
     * @param projectId - A project identifier
     * @returns An array of project config setting items
     */
    ProjectModule.prototype.getConfig = function (projectId) {
        return this.xhr
            .get("/gdc/app/projects/" + projectId + "/config")
            .then(function (apiResponse) {
            return apiResponse.getData();
        })
            .then(function (result) {
            var _a;
            if ((_a = result === null || result === void 0 ? void 0 : result.settings) === null || _a === void 0 ? void 0 : _a.items) {
                return result.settings.items;
            }
            return [];
        });
    };
    /**
     * Gets project config including project specific feature flags
     *
     * @param projectId - A project identifier
     * @param key - config item key
     * @returns single setting item or undefined if item with such key does not exist
     */
    ProjectModule.prototype.getConfigItem = function (projectId, key) {
        return this.xhr
            .get("/gdc/app/projects/" + projectId + "/config/" + key)
            .then(function (apiResponse) {
            return apiResponse.getData();
        })
            .catch(function (error) {
            var _a;
            if (((_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.status) === 404) {
                return undefined;
            }
            throw error;
        });
    };
    /**
     * Gets project specific feature flags
     *
     * @param projectId - A project identifier
     * @param source - optional filter settingItems with specific source
     * @returns Hash table of feature flags and theirs values where feature flag is as key
     */
    ProjectModule.prototype.getProjectFeatureFlags = function (projectId, source) {
        return this.getConfig(projectId).then(function (settingItems) {
            var filteredSettingItems = source
                ? settingItems.filter(function (settingItem) { return settingItem.settingItem.source === source; })
                : settingItems;
            var featureFlags = {};
            filteredSettingItems.forEach(function (settingItem) {
                featureFlags[settingItem.settingItem.key] = parseSettingItemValue(settingItem.settingItem.value);
            });
            return featureFlags;
        });
    };
    /**
     * Get paged user list
     *
     * @param projectId - project identifier
     * @param options - filtering options for the user list
     * @returns List of users with paging
     */
    ProjectModule.prototype.getUserListWithPaging = function (projectId, options) {
        return this.xhr.getParsed("/gdc/projects/" + projectId + "/userlist", {
            data: options,
        });
    };
    /**
     * Get full user list
     *
     * @param projectId - project identifier
     * @param options - filtering options for the user list
     * @returns List of users
     */
    ProjectModule.prototype.getUserList = function (projectId, options) {
        var _this = this;
        var loadPage = function (offset, limit, items) {
            if (offset === void 0) { offset = 0; }
            if (limit === void 0) { limit = 1000; }
            if (items === void 0) { items = []; }
            return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.getUserListWithPaging(projectId, __assign(__assign({}, options), { limit: limit, offset: offset })).then(function (_a) {
                            var _b = _a.userList, userItems = _b.items, count = _b.paging.count;
                            var updatedItems = __spreadArrays(items, userItems);
                            return count < limit ? updatedItems : loadPage(offset + limit, limit, updatedItems);
                        })];
                });
            });
        };
        return loadPage();
    };
    /**
     * Get paged user groups
     *
     * @param projectId - project identifier
     * @param options - paging params
     * @returns List of user groups with paging
     */
    ProjectModule.prototype.getUserGroups = function (projectId, options) {
        var _a = options.offset, offset = _a === void 0 ? "0" : _a, _b = options.limit, limit = _b === void 0 ? 100 : _b;
        return this.xhr.getParsed("/gdc/userGroups?project=" + projectId + "&offset=" + offset + "&limit=" + limit);
    };
    /**
     * Get info about all grantees able to access given object
     *
     * @param objectUri - object's uri
     * @param options - grantee limitations params
     * @returns List of all grantees
     */
    ProjectModule.prototype.getGranteesInfo = function (objectUri, options) {
        var _a = options.permission, permission = _a === void 0 ? "read" : _a;
        var apiUri = objectUri.replace("/md/", "/projects/");
        return this.xhr.getParsed(apiUri + "/grantees?permission=" + permission);
    };
    ProjectModule.prototype.convertGrantees = function (granteeUris) {
        if (granteeUris === void 0) { granteeUris = []; }
        return granteeUris.map(function (granteeUri) { return ({
            aclEntryURI: {
                permission: "read",
                grantee: granteeUri,
            },
        }); });
    };
    ProjectModule.prototype.handleGranteesChangeError = function (error) {
        var _a;
        if (((_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.status) !== 200) {
            throw error;
        }
    };
    /**
     * Add grantees to access given object
     * @param objectUri - object's uri
     * @param granteeUris - grantees uri array
     */
    ProjectModule.prototype.addGrantees = function (objectUri, granteeUris) {
        var addGranteesRequest = {
            granteeURIs: {
                items: this.convertGrantees(granteeUris),
            },
        };
        return this.xhr
            .post(objectUri + "/grantees/add", { body: __assign({}, addGranteesRequest) })
            .catch(this.handleGranteesChangeError);
    };
    /**
     * Remove grantees access given object
     * @param objectUri - object's uri
     * @param granteeUris - grantees uri array
     */
    ProjectModule.prototype.removeGrantees = function (objectUri, granteeUris) {
        if (granteeUris === void 0) { granteeUris = []; }
        var removeGranteesRequest = {
            granteeURIs: {
                items: this.convertGrantees(granteeUris),
            },
        };
        return this.xhr
            .post(objectUri + "/grantees/remove", { body: __assign({}, removeGranteesRequest) })
            .catch(this.handleGranteesChangeError);
    };
    /**
     * Get permissions for the workspace and user
     * @param workspaceId - ID of the workspace
     * @param userId - ID of the user
     */
    ProjectModule.prototype.getPermissions = function (workspaceId, userId) {
        return this.xhr.getParsed("/gdc/projects/" + workspaceId + "/users/" + userId + "/permissions");
    };
    /**
     * Resolves LCM workspace identifiers. This function will use the data product and client information
     * and consult the backend in order to obtain identifier of workspace contains analytics for that
     * data product & client combination.
     *
     * Domain parameter is required. Then either project ID or product ID and client ID pair must be provided.
     *
     * @param domainId - ID of the domain, must be provided
     * @param projectId - ID of the project. LCM identifiers will be fetched via project ID if the
     *  ID is provided.
     * @param productId - ID of the product. LCM identifiers will be provided by product ID and client ID
     *  pair, if project ID is not provided.
     * @param clientId - ID of the client. LCM identifiers will be provided by product ID and client ID pair,
     *  if project ID is not provided.
     *
     * @returns Resolves with project LCM identifiers.
     */
    ProjectModule.prototype.getProjectLcmIdentifiers = function (domainId, projectId, productId, clientId) {
        var _this = this;
        invariant(domainId, "domain ID must be specified");
        if (projectId) {
            return this.xhr
                .getParsed("/gdc/projects/" + projectId + "/lcmEntity")
                .then(function (_a) {
                var projectUri = _a.projectUri, clientId = _a.clientId, dataProductId = _a.dataProductId, segmentId = _a.segmentId;
                return ({
                    projectLcm: {
                        projectId: _this.extractIdFromUri(projectUri),
                        clientId: clientId,
                        dataProductId: dataProductId,
                        segmentId: segmentId,
                    },
                });
            });
        }
        invariant(productId, "product ID must be specified when project ID is not provided");
        invariant(clientId, "client ID must be specified when project ID is not provided");
        return this.xhr
            .getParsed("/gdc/domains/" + domainId + "/dataproducts/" + productId + "/clients/" + clientId)
            .then(function (_a) {
            var _b = _a.client, id = _b.id, project = _b.project, segment = _b.segment, links = _b.links;
            return ({
                projectLcm: {
                    projectId: _this.extractIdFromUri(project),
                    clientId: id,
                    dataProductId: _this.extractIdFromUri(links === null || links === void 0 ? void 0 : links.dataProduct),
                    segmentId: _this.extractIdFromUri(segment),
                },
            });
        });
    };
    ProjectModule.prototype.extractIdFromUri = function (uri) {
        return uri === null || uri === void 0 ? void 0 : uri.split("/").pop();
    };
    return ProjectModule;
}());
export { ProjectModule };
//# sourceMappingURL=project.js.map