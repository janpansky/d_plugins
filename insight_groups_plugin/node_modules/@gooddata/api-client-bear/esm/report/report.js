import { __assign } from "tslib";
import compact from "lodash/compact";
import isEmpty from "lodash/isEmpty";
import { ERROR_RESTRICTED_CODE, ERROR_RESTRICTED_MESSAGE } from "../constants/errors";
import { ApiResponseError } from "../xhr";
import { handleHeadPolling } from "../util";
import { isExportFinished } from "../utils/export";
/**
 * Functions for working with reports
 */
var ReportModule = /** @class */ (function () {
    function ReportModule(xhr) {
        var _this = this;
        this.xhr = xhr;
        this.handleExportResultError = function (error) {
            if (_this.isApiResponseError(error) &&
                error.response.status === 400 &&
                error.responseBody.indexOf(ERROR_RESTRICTED_CODE) !== -1) {
                var updatedError = new ApiResponseError(ERROR_RESTRICTED_MESSAGE, error.response, error.responseBody);
                return Promise.reject(updatedError);
            }
            return Promise.reject(error);
        };
    }
    /**
     * exportResult
     * request new result export
     * request new export of existing AFM execution
     *
     * @experimental
     * @param projectId - GoodData projectId
     * @param executionResult - report which should be exported
     * @param exportConfig - requested export options
     * @param pollingOptions - for polling (maxAttempts, pollStep)
     * @returns Resolves if export successfully,
     *                   Reject if export has error (network error, api error)
     */
    ReportModule.prototype.exportResult = function (projectId, executionResult, exportConfig, pollingOptions) {
        var _this = this;
        if (exportConfig === void 0) { exportConfig = {}; }
        if (pollingOptions === void 0) { pollingOptions = {}; }
        var requestPayload = {
            resultExport: {
                executionResult: executionResult,
                exportConfig: __assign(__assign({}, exportConfig), this.sanitizeExportConfig(exportConfig)),
            },
        };
        return this.xhr
            .post("/gdc/internal/projects/" + projectId + "/exportResult", { body: requestPayload })
            .then(function (response) { return response.getData(); })
            .then(function (data) {
            return handleHeadPolling(_this.xhr.get.bind(_this.xhr), data.uri, isExportFinished, pollingOptions);
        })
            .catch(this.handleExportResultError);
    };
    ReportModule.prototype.sanitizeExportConfig = function (exportConfig) {
        var afm = exportConfig.afm;
        if (afm && !isEmpty(afm.filters)) {
            var sanitizedAfm = __assign(__assign({}, afm), { filters: this.sanitizeFilters(afm.filters) });
            return __assign(__assign({}, exportConfig), { afm: sanitizedAfm });
        }
        return exportConfig;
    };
    ReportModule.prototype.isApiResponseError = function (error) {
        return error.response !== undefined;
    };
    ReportModule.prototype.sanitizeFilters = function (filters) {
        return filters ? compact(filters) : [];
    };
    return ReportModule;
}());
export { ReportModule };
//# sourceMappingURL=report.js.map