import { __awaiter, __generator } from "tslib";
// (C) 2007-2022 GoodData Corporation
import qs from "qs";
import { ProjectModule } from "./project";
import { parseSettingItemValue } from "./util";
var UserModule = /** @class */ (function () {
    function UserModule(xhr) {
        this.xhr = xhr;
    }
    /**
     * Find out whether a user is logged in
     *
     * @returns resolves with true if user logged in, false otherwise
     */
    UserModule.prototype.isLoggedIn = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var result, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.xhr.get("/gdc/account/token")];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, !!result.response.ok];
                    case 2:
                        err_1 = _b.sent();
                        if (((_a = err_1 === null || err_1 === void 0 ? void 0 : err_1.response) === null || _a === void 0 ? void 0 : _a.status) === 401) {
                            return [2 /*return*/, false];
                        }
                        throw err_1;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Find out whether a specified project is available to a currently logged user
     *
     * @param projectId - A project identifier
     * @returns Resolves with true if user logged in and project available,
     *                   resolves with false if user logged in and project not available,
     *                   rejects if user not logged in
     */
    UserModule.prototype.isLoggedInProject = function (projectId) {
        return __awaiter(this, void 0, void 0, function () {
            var profile, projectModule, projects;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getCurrentProfile()];
                    case 1:
                        profile = _a.sent();
                        projectModule = new ProjectModule(this.xhr);
                        return [4 /*yield*/, projectModule.getProjects(profile.links.self.split("/")[4])];
                    case 2:
                        projects = _a.sent();
                        return [2 /*return*/, projects.some(function (p) { var _a; return ((_a = p.links) === null || _a === void 0 ? void 0 : _a.self) === "/gdc/projects/" + projectId; })];
                }
            });
        });
    };
    /**
     * This function provides an authentication entry point to the GD API. It is needed to authenticate
     * by calling this function prior any other API calls. After providing valid credentials
     * every subsequent API call in a current session will be authenticated.
     */
    UserModule.prototype.login = function (username, password) {
        return this.xhr.postParsed("/gdc/account/login", {
            body: JSON.stringify({
                postUserLogin: {
                    login: username,
                    password: password,
                    remember: 1,
                    captcha: "",
                    verifyCaptcha: "",
                },
            }),
        });
    };
    /**
     * This function provides an authentication entry point to the GD API via SSO
     * https://help.gooddata.com/display/developer/GoodData+PGP+Single+Sign-On
     *
     * @param encryptedClaims - PGP message
     * @param ssoProvider - name of the SSO provider
     * @param targetUrl - where to redirect after the SSO flow, set this to `/gdc/account/token`
     */
    UserModule.prototype.loginSso = function (encryptedClaims, ssoProvider, targetUrl) {
        return this.xhr.post("/gdc/account/customerlogin", {
            data: {
                pgpLoginRequest: {
                    targetUrl: targetUrl,
                    ssoProvider: ssoProvider,
                    encryptedClaims: encryptedClaims,
                },
            },
        });
    };
    /**
     * Logs out current user
     */
    UserModule.prototype.logout = function () {
        return __awaiter(this, void 0, void 0, function () {
            var isLoggedIn, logoutUri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.isLoggedIn()];
                    case 1:
                        isLoggedIn = _a.sent();
                        if (!isLoggedIn) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getAccountInfo()];
                    case 2:
                        logoutUri = (_a.sent()).logoutUri;
                        return [2 /*return*/, this.xhr.del(logoutUri)];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets current user's profile
     * @returns Resolves with account setting object
     */
    UserModule.prototype.getCurrentProfile = function () {
        return this.xhr
            .getParsed("/gdc/account/profile/current")
            .then(function (r) { return r.accountSetting; });
    };
    /**
     * Gets user's regional number formatting configuration
     * @param userId - loginMD5
     * @returns Resolves with separators setting object
     */
    UserModule.prototype.getUserRegionalNumberFormatting = function (userId) {
        return this.xhr
            .getParsed("/gdc/account/profile/" + userId + "/settings/separators")
            .then(function (res) { return ({
            decimal: res.separators.decimal,
            thousand: res.separators.thousand,
        }); });
    };
    /**
     * Updates user's profile settings
     * @param profileId - User profile identifier
     * @param profileSetting - the profile setting update payload
     */
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    UserModule.prototype.updateProfileSettings = function (profileId, profileSetting) {
        return this.xhr.put("/gdc/account/profile/" + profileId + "/settings", {
            body: profileSetting,
        });
    };
    /**
     * Returns info about currently logged in user from bootstrap resource
     */
    UserModule.prototype.getAccountInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var accountInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.xhr.getParsed("/gdc/app/account/bootstrap/account")];
                    case 1:
                        accountInfo = (_a.sent()).accountInfo;
                        return [2 /*return*/, accountInfo];
                }
            });
        });
    };
    /**
     * Gets user configs including user specific feature flags
     *
     * @param userId - A user identifier
     * @returns An array of user configs setting item
     */
    UserModule.prototype.getUserConfigs = function (userId) {
        return __awaiter(this, void 0, void 0, function () {
            var userConfig;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.xhr.getParsed("/gdc/account/profile/" + userId + "/config")];
                    case 1:
                        userConfig = _a.sent();
                        return [2 /*return*/, userConfig.settings.items || []];
                }
            });
        });
    };
    /**
     * Gets user specific feature flags
     *
     * @param userId - A user identifier
     * @param sourceFilter - Optional list of setting item sources to include. Defaults to including everything
     * @returns Hash table of feature flags and their values where feature flag is the key
     */
    UserModule.prototype.getUserFeatureFlags = function (userId, sourceFilter) {
        return this.getUserConfigs(userId).then(function (settingItems) {
            var filteredSettingItems = sourceFilter
                ? settingItems.filter(function (item) { return sourceFilter.includes(item.settingItem.source); })
                : settingItems;
            var featureFlags = {};
            filteredSettingItems.forEach(function (settingItem) {
                featureFlags[settingItem.settingItem.key] = parseSettingItemValue(settingItem.settingItem.value);
            });
            return featureFlags;
        });
    };
    /**
     * Returns the feature flags valid for the currently logged in user.
     */
    UserModule.prototype.getFeatureFlags = function () {
        return __awaiter(this, void 0, void 0, function () {
            var featureFlags;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.xhr.getParsed("/gdc/app/account/bootstrap/featureFlags")];
                    case 1:
                        featureFlags = (_a.sent()).featureFlags;
                        return [2 /*return*/, featureFlags];
                }
            });
        });
    };
    UserModule.prototype.getCurrentOrganization = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.xhr.getParsed("/gdc/app/organization/current")];
            });
        });
    };
    /**
     * Returns bootstrap resource for the currently logged in user.
     */
    UserModule.prototype.getBootstrapResource = function (options) {
        if (options === void 0) { options = {}; }
        var projectId = options.projectId, productId = options.productId, clientId = options.clientId, _a = options.loadAnalyticalDashboards, loadAnalyticalDashboards = _a === void 0 ? true : _a;
        var uri = "/gdc/app/account/bootstrap?loadAnalyticalDashboards=" + loadAnalyticalDashboards;
        if (projectId) {
            uri = uri + "&projectUri=/gdc/projects/" + projectId;
        }
        else if (productId && clientId) {
            // projectId can be replaced by combination of productId + clientId
            uri = uri + "&projectUri=/gdc/projects/client:" + productId + ":" + clientId;
        }
        return this.xhr.getParsed(uri);
    };
    /**
     * Initiates SPI SAML SSO.
     *
     * @param relayState - URL of the page where the user is redirected after a successful login
     */
    UserModule.prototype.initiateSamlSso = function (relayState) {
        /*
         * make sure code does not try to get new token before initiating the SAML; the token request would
         * fail and prevent the samlrequest call; there is no point in getting token anyway because it is just
         * now that the client is initializing the session security context.
         */
        this.xhr.ensureNoLeadingTokenRequest();
        return this.xhr
            .get("/gdc/account/samlrequest?" + qs.stringify({ relayState: relayState }))
            .then(function (data) { return data.getData(); })
            .then(function (response) {
            var loginUrl = response.samlRequests.items[0].samlRequest.loginUrl;
            window.location.assign(loginUrl);
        });
    };
    return UserModule;
}());
export { UserModule };
//# sourceMappingURL=user.js.map