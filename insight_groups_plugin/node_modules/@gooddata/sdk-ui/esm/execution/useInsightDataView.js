import { __read, __spread } from "tslib";
import { useBackendStrict, useWorkspaceStrict, resolveUseCancelablePromisesStatus, resolveUseCancelablePromisesError, } from "../base";
import { useExecutionDataView } from "./useExecutionDataView";
import { useInsight } from "./useInsight";
/**
 * React hook to get data for a specific insight.
 *
 * @public
 */
export function useInsightDataView(config, deps) {
    var insightRef = config.insight, sorts = config.sorts, dateFormat = config.dateFormat, dimensions = config.dimensions, filters = config.filters, window = config.window, executeByReference = config.executeByReference, onCancel = config.onCancel, onError = config.onError, onLoading = config.onLoading, onPending = config.onPending, onSuccess = config.onSuccess;
    var backend = useBackendStrict(config.backend, "useInsightDataView");
    var workspace = useWorkspaceStrict(config.workspace, "useInsightDataView");
    var effectiveDeps = deps !== null && deps !== void 0 ? deps : [];
    var insightPromise = useInsight({ insight: insightRef, backend: backend, workspace: workspace }, effectiveDeps);
    var executionFactory = backend.workspace(workspace).execution();
    var executeFn = (executeByReference ? executionFactory.forInsightByRef : executionFactory.forInsight).bind(executionFactory);
    var insightExecution = insightPromise.result && executeFn(insightPromise.result, filters);
    if (insightExecution) {
        if (sorts) {
            var resolvedSorts = typeof sorts === "function" ? sorts(insightExecution.definition) : sorts;
            insightExecution = insightExecution.withSorting.apply(insightExecution, __spread(resolvedSorts));
        }
        if (dimensions) {
            var resolvedDimensions = typeof dimensions === "function" ? dimensions(insightExecution.definition) : dimensions;
            insightExecution = insightExecution.withDimensions.apply(insightExecution, __spread(resolvedDimensions));
        }
        if (dateFormat) {
            var resolvedDateFormat = typeof dateFormat === "function" ? dateFormat(insightExecution.definition) : dateFormat;
            insightExecution = insightExecution.withDateFormat(resolvedDateFormat);
        }
    }
    var executionDataViewPromise = useExecutionDataView({
        execution: insightExecution,
        window: window,
        backend: backend,
        workspace: workspace,
        onCancel: onCancel,
        onError: onError,
        onLoading: onLoading,
        onPending: onPending,
        onSuccess: onSuccess,
    }, deps);
    var cancelablePromises = [insightPromise, executionDataViewPromise];
    return {
        result: executionDataViewPromise.result,
        error: resolveUseCancelablePromisesError(cancelablePromises),
        status: resolveUseCancelablePromisesStatus(cancelablePromises),
    };
}
//# sourceMappingURL=useInsightDataView.js.map