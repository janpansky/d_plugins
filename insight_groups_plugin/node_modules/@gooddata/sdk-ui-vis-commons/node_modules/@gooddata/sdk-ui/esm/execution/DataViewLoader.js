import { __assign, __awaiter, __generator } from "tslib";
// (C) 2019-2022 GoodData Corporation
import invariant from "ts-invariant";
import { createExecution } from "./createExecution";
import { DataViewFacade } from "../base";
/**
 * DataViewLoader allows you to speficy, load and access data results with convenient series and slices API.
 *
 * @alpha
 */
var DataViewLoader = /** @class */ (function () {
    function DataViewLoader(backend, workspace, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        this.backend = backend;
        this.workspace = workspace;
        this.options = options;
        /**
         * Data series will be built using the provided measures that are further scoped for
         * elements of the specified attributes.
         *
         * @remarks
         * You must define at least 1 measure for the series.
         *
         * @alpha
         */
        this.seriesFrom = function () {
            var measuresAndScopingAttributes = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                measuresAndScopingAttributes[_i] = arguments[_i];
            }
            return _this.newLoaderWithOptions({ seriesBy: measuresAndScopingAttributes });
        };
        /**
         * Slice all data series by elements of these attributes.
         *
         * @alpha
         */
        this.slicesFrom = function () {
            var attributes = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                attributes[_i] = arguments[_i];
            }
            return _this.newLoaderWithOptions({ slicesBy: attributes });
        };
        /**
         * Filters to apply on server side.
         *
         * @alpha
         */
        this.filterBy = function () {
            var filters = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                filters[_i] = arguments[_i];
            }
            return _this.newLoaderWithOptions({ filters: filters });
        };
        /**
         * Sorting to apply on server side.
         *
         * @alpha
         */
        this.sortBy = function () {
            var sorts = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                sorts[_i] = arguments[_i];
            }
            return _this.newLoaderWithOptions({ sortBy: sorts });
        };
        /**
         * Include these totals among the data slices.
         *
         * @alpha
         */
        this.withTotals = function () {
            var totals = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                totals[_i] = arguments[_i];
            }
            return _this.newLoaderWithOptions({ totals: totals });
        };
        /**
         * Loads subset of the result data and wraps them in {@link DataViewFacade}.
         *
         * @alpha
         */
        this.loadWindow = function (dataWindow) { return __awaiter(_this, void 0, void 0, function () {
            var result, dataView;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadResult()];
                    case 1:
                        result = _a.sent();
                        return [4 /*yield*/, result.readWindow(dataWindow.offset, dataWindow.size)];
                    case 2:
                        dataView = _a.sent();
                        return [2 /*return*/, DataViewFacade.for(dataView)];
                }
            });
        }); };
        /**
         * Loads all the result data and wraps them in {@link DataViewFacade}.
         *
         * @alpha
         */
        this.loadAll = function () { return __awaiter(_this, void 0, void 0, function () {
            var result, dataView;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadResult()];
                    case 1:
                        result = _a.sent();
                        return [4 /*yield*/, result.readAll()];
                    case 2:
                        dataView = _a.sent();
                        return [2 /*return*/, DataViewFacade.for(dataView)];
                }
            });
        }); };
        this.loadResult = function () { return __awaiter(_this, void 0, void 0, function () {
            var execution;
            return __generator(this, function (_a) {
                invariant(this.options.seriesBy, "You need to specify series before loading the results.");
                execution = createExecution(__assign({ backend: this.backend, workspace: this.workspace, seriesBy: this.options.seriesBy, componentName: "DataViewLoader" }, this.options));
                return [2 /*return*/, execution.execute()];
            });
        }); };
        this.newLoaderWithOptions = function (options) {
            return new DataViewLoader(_this.backend, _this.workspace, __assign(__assign({}, _this.options), options));
        };
    }
    /**
     * Creates a new instance of the DataViewLoader for particular backend and workspace.
     *
     * @alpha
     */
    DataViewLoader.for = function (backend, workspace) {
        return new DataViewLoader(backend, workspace);
    };
    return DataViewLoader;
}());
export { DataViewLoader };
//# sourceMappingURL=DataViewLoader.js.map