import { __awaiter, __generator } from "tslib";
import { ApiEntitlementNameEnum } from "@gooddata/api-client-tiger";
import { getSettingsForCurrentUser } from "../settings";
import { DefaultColorPalette } from "./mocks/colorPalette";
import { DefaultTheme } from "./mocks/theme";
import { unwrapColorPaletteContent } from "../../../convertors/fromBackend/ColorPaletteConverter";
var TigerWorkspaceStyling = /** @class */ (function () {
    function TigerWorkspaceStyling(authCall, workspace) {
        var _this = this;
        this.authCall = authCall;
        this.workspace = workspace;
        this.getColorPalette = function () { return __awaiter(_this, void 0, void 0, function () {
            var userSettings, activeColorPaletteId;
            var _this = this;
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, getSettingsForCurrentUser(this.authCall, this.workspace)];
                    case 1:
                        userSettings = _c.sent();
                        activeColorPaletteId = (_b = (_a = userSettings.activeColorPalette) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : "";
                        return [4 /*yield*/, this.isStylizable(activeColorPaletteId)];
                    case 2: return [2 /*return*/, (_c.sent())
                            ? this.authCall(function (client) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    return [2 /*return*/, client.entities
                                            .getAllEntitiesColorPalettes({
                                            filter: "id==\"" + activeColorPaletteId + "\"",
                                        })
                                            .then(function (colorPalettes) {
                                            if (colorPalettes.data.data.length !== 0) {
                                                return unwrapColorPaletteContent(colorPalettes.data.data[0].attributes.content);
                                            }
                                            return DefaultColorPalette;
                                        })
                                            .catch(function () {
                                            // Failed theme loading should not break application
                                            return DefaultColorPalette;
                                        })];
                                });
                            }); })
                            : DefaultColorPalette];
                }
            });
        }); };
        this.getTheme = function () { return __awaiter(_this, void 0, void 0, function () {
            var userSettings, activeThemeId;
            var _this = this;
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, getSettingsForCurrentUser(this.authCall, this.workspace)];
                    case 1:
                        userSettings = _c.sent();
                        activeThemeId = (_b = (_a = userSettings.activeTheme) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : "";
                        return [4 /*yield*/, this.isStylizable(activeThemeId)];
                    case 2: return [2 /*return*/, (_c.sent())
                            ? this.authCall(function (client) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    return [2 /*return*/, client.entities
                                            .getAllEntitiesThemes({
                                            filter: "id==\"" + activeThemeId + "\"",
                                        })
                                            .then(function (themes) {
                                            if (themes.data.data.length !== 0) {
                                                return themes.data.data[0].attributes.content;
                                            }
                                            return DefaultTheme;
                                        })
                                            .catch(function () {
                                            // Failed theme loading should not break application
                                            return DefaultTheme;
                                        })];
                                });
                            }); })
                            : DefaultTheme];
                }
            });
        }); };
    }
    /**
     * Checks if Theming needs to be loaded.
     * Theming needs to be enabled by license entitlement
     * and activeTheme needs to be defined
     *
     * @returns boolean
     */
    TigerWorkspaceStyling.prototype.isStylizable = function (activeStyleId) {
        return __awaiter(this, void 0, void 0, function () {
            var isCustomThemingIncludedInEntitlements;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authCall(function (client) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                return [2 /*return*/, client.actions
                                        .resolveRequestedEntitlements({
                                        entitlementsRequest: { entitlementsName: [ApiEntitlementNameEnum.CUSTOM_THEMING] },
                                    })
                                        .then(function (res) { var _a; return ((_a = res === null || res === void 0 ? void 0 : res.data) === null || _a === void 0 ? void 0 : _a.length) === 1; })];
                            });
                        }); })];
                    case 1:
                        isCustomThemingIncludedInEntitlements = _a.sent();
                        return [2 /*return*/, isCustomThemingIncludedInEntitlements && activeStyleId !== ""];
                }
            });
        });
    };
    return TigerWorkspaceStyling;
}());
export { TigerWorkspaceStyling };
//# sourceMappingURL=index.js.map