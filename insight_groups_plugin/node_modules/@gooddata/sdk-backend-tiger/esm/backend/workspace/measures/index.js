import { __awaiter, __generator } from "tslib";
import { jsonApiHeaders, JsonApiMetricInTypeEnum, MetadataUtilities, } from "@gooddata/api-client-tiger";
import { idRef, isIdentifierRef, } from "@gooddata/sdk-model";
import { convertMetricFromBackend } from "../../../convertors/fromBackend/MetricConverter";
import { convertMetricToBackend } from "../../../convertors/toBackend/MetricConverter";
import { objRefToIdentifier } from "../../../utils/api";
import { tokenizeExpression } from "./measureExpressionTokens";
import { v4 as uuidv4 } from "uuid";
import { visualizationObjectsItemToInsight } from "../../../convertors/fromBackend/InsightConverter";
var TigerWorkspaceMeasures = /** @class */ (function () {
    function TigerWorkspaceMeasures(authCall, workspace) {
        var _this = this;
        this.authCall = authCall;
        this.workspace = workspace;
        this.getMeasureReferencingObjects = function (ref) { return __awaiter(_this, void 0, void 0, function () {
            var id, insights, measures, request;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToIdentifier(ref, this.authCall)];
                    case 1:
                        id = _a.sent();
                        insights = this.authCall(function (client) {
                            return MetadataUtilities.getAllPagesOf(client, client.entities.getAllEntitiesVisualizationObjects, {
                                workspaceId: _this.workspace,
                                // return only visualizationObjects that have a link to the given measure
                                filter: "metrics.id==" + id,
                            })
                                .then(MetadataUtilities.mergeEntitiesResults)
                                .then(function (insights) { return insights.data.map(visualizationObjectsItemToInsight); });
                        });
                        measures = this.authCall(function (client) {
                            return MetadataUtilities.getAllPagesOf(client, client.entities.getAllEntitiesMetrics, {
                                workspaceId: _this.workspace,
                                include: ["metrics"],
                                // return only measures that have a link to the given measure
                                filter: "metrics.id==" + id,
                            })
                                .then(MetadataUtilities.mergeEntitiesResults)
                                .then(function (measures) { return measures.data.map(convertMetricFromBackend); });
                        });
                        request = Promise.all([insights, measures]);
                        return [2 /*return*/, request.then(function (_a) {
                                var insights = _a[0], measures = _a[1];
                                return {
                                    insights: insights,
                                    measures: measures,
                                };
                            })];
                }
            });
        }); };
    }
    TigerWorkspaceMeasures.prototype.getMeasureExpressionTokens = function (ref) {
        return __awaiter(this, void 0, void 0, function () {
            var metricMetadata, metric, maql, regexTokens;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!isIdentifierRef(ref)) {
                            throw new Error("only identifiers supported");
                        }
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.entities.getEntityMetrics({
                                    objectId: ref.identifier,
                                    workspaceId: _this.workspace,
                                    include: ["facts", "metrics", "attributes", "labels", "datasets"],
                                }, {
                                    headers: jsonApiHeaders,
                                });
                            })];
                    case 1:
                        metricMetadata = _a.sent();
                        metric = metricMetadata.data;
                        maql = metric.data.attributes.content.maql || "";
                        regexTokens = tokenizeExpression(maql);
                        return [2 /*return*/, regexTokens.map(function (regexToken) { return _this.resolveToken(regexToken, metric); })];
                }
            });
        });
    };
    TigerWorkspaceMeasures.prototype.resolveToken = function (regexToken, metric) {
        if (regexToken.type === "text" ||
            regexToken.type === "quoted_text" ||
            regexToken.type === "comment" ||
            regexToken.type === "number" ||
            regexToken.type === "bracket") {
            return { type: regexToken.type, value: regexToken.value };
        }
        var _a = regexToken.value.split("/"), type = _a[0], id = _a[1];
        if (type === "metric" ||
            type === "fact" ||
            type === "attribute" ||
            type === "label" ||
            type === "dataset") {
            return this.resolveObjectToken(id, type, metric.included || [], metric.data.id);
        }
        throw new Error("Cannot resolve title of object type " + type);
    };
    TigerWorkspaceMeasures.prototype.resolveObjectToken = function (objectId, objectType, includedObjects, identifier) {
        var _a;
        var includedObject = includedObjects.find(function (includedObject) {
            return includedObject.id === objectId && includedObject.type === objectType;
        });
        var typeMapping = {
            metric: "measure",
            fact: "fact",
            attribute: "attribute",
            label: "attribute",
            dataset: "dataSet",
        };
        var value = ((_a = includedObject === null || includedObject === void 0 ? void 0 : includedObject.attributes) === null || _a === void 0 ? void 0 : _a.title) || objectType + "/" + objectId;
        return {
            type: typeMapping[objectType],
            value: value,
            id: objectId,
            ref: idRef(identifier),
        };
    };
    TigerWorkspaceMeasures.prototype.createMeasure = function (measure) {
        return __awaiter(this, void 0, void 0, function () {
            var metricAttributes, result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        metricAttributes = convertMetricToBackend(measure);
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.entities.createEntityMetrics({
                                    workspaceId: _this.workspace,
                                    jsonApiMetricInDocument: {
                                        data: {
                                            id: measure.id || uuidv4(),
                                            type: JsonApiMetricInTypeEnum.METRIC,
                                            attributes: metricAttributes,
                                        },
                                    },
                                }, {
                                    headers: jsonApiHeaders,
                                });
                            })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, convertMetricFromBackend(result.data)];
                }
            });
        });
    };
    TigerWorkspaceMeasures.prototype.updateMeasure = function (measure) {
        return __awaiter(this, void 0, void 0, function () {
            var objectId, metricAttributes, result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToIdentifier(measure.ref, this.authCall)];
                    case 1:
                        objectId = _a.sent();
                        metricAttributes = convertMetricToBackend(measure);
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.entities.updateEntityMetrics({
                                    objectId: objectId,
                                    workspaceId: _this.workspace,
                                    jsonApiMetricInDocument: {
                                        data: {
                                            id: objectId,
                                            type: JsonApiMetricInTypeEnum.METRIC,
                                            attributes: metricAttributes,
                                        },
                                    },
                                }, {
                                    headers: jsonApiHeaders,
                                });
                            })];
                    case 2:
                        result = _a.sent();
                        return [2 /*return*/, convertMetricFromBackend(result.data)];
                }
            });
        });
    };
    TigerWorkspaceMeasures.prototype.deleteMeasure = function (measureRef) {
        return __awaiter(this, void 0, void 0, function () {
            var objectId;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToIdentifier(measureRef, this.authCall)];
                    case 1:
                        objectId = _a.sent();
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.entities.deleteEntityMetrics({
                                    objectId: objectId,
                                    workspaceId: _this.workspace,
                                });
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return TigerWorkspaceMeasures;
}());
export { TigerWorkspaceMeasures };
//# sourceMappingURL=index.js.map