import { __awaiter, __generator } from "tslib";
// (C) 2020-2023 GoodData Corporation
import { isDashboardPluginsItem, isVisualizationObjectsItem, JsonApiAnalyticalDashboardInTypeEnum, JsonApiDashboardPluginInTypeEnum, JsonApiFilterContextInTypeEnum, jsonApiHeaders, MetadataUtilities, ValidateRelationsHeader, } from "@gooddata/api-client-tiger";
import { NotSupported, UnexpectedError, TimeoutError, } from "@gooddata/sdk-backend-spi";
import { areObjRefsEqual, idRef, isFilterContext, isFilterContextDefinition, isTempFilterContext, isAllTimeDashboardDateFilter, objRefToString, } from "@gooddata/sdk-model";
import isEqual from "lodash/isEqual";
import { v4 as uuidv4 } from "uuid";
import { convertAnalyticalDashboardToListItems, convertDashboard, convertFilterContextFromBackend, getFilterContextFromIncluded, convertDashboardPluginFromBackend, convertDashboardPluginWithLinksFromBackend, } from "../../../convertors/fromBackend/analyticalDashboards/AnalyticalDashboardConverter";
import { visualizationObjectsItemToInsight } from "../../../convertors/fromBackend/InsightConverter";
import { convertAnalyticalDashboard, convertDashboardPluginToBackend, convertFilterContextToBackend, } from "../../../convertors/toBackend/AnalyticalDashboardConverter";
import { objRefsToIdentifiers, objRefToIdentifier } from "../../../utils/api";
import { resolveWidgetFilters } from "./widgetFilters";
import includes from "lodash/includes";
import { buildDashboardPermissions } from "./dashboardPermissions";
import { convertExportMetadata as convertToBackendExportMetadata } from "../../../convertors/toBackend/ExportMetadataConverter";
import { convertExportMetadata as convertFromBackendExportMetadata } from "../../../convertors/fromBackend/ExportMetadataConverter";
var DEFAULT_POLL_DELAY = 5000;
var MAX_POLL_ATTEMPTS = 50;
var TigerWorkspaceDashboards = /** @class */ (function () {
    function TigerWorkspaceDashboards(authCall, workspace) {
        var _this = this;
        this.authCall = authCall;
        this.workspace = workspace;
        // Public methods
        this.getDashboards = function (options) { return __awaiter(_this, void 0, void 0, function () {
            var result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (options === null || options === void 0 ? void 0 : options.loadUserData) {
                            console.warn("Tiger backend does not support the 'loadUserData' option of getDashboards. Ignoring.");
                        }
                        return [4 /*yield*/, this.authCall(function (client) {
                                return MetadataUtilities.getAllPagesOf(client, client.entities.getAllEntitiesAnalyticalDashboards, { workspaceId: _this.workspace, metaInclude: ["accessInfo"] })
                                    .then(MetadataUtilities.mergeEntitiesResults)
                                    .then(MetadataUtilities.filterValidEntities);
                            })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, convertAnalyticalDashboardToListItems(result)];
                }
            });
        }); };
        this.getDashboard = function (ref, filterContextRef, options) { return __awaiter(_this, void 0, void 0, function () {
            var id, result, filterContext;
            var _this = this;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (options === null || options === void 0 ? void 0 : options.loadUserData) {
                            console.warn("Tiger backend does not support the 'loadUserData' option of getDashboard. Ignoring.");
                        }
                        return [4 /*yield*/, objRefToIdentifier(ref, this.authCall)];
                    case 1:
                        id = _b.sent();
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.entities.getEntityAnalyticalDashboards({
                                    workspaceId: _this.workspace,
                                    objectId: id,
                                    include: ["filterContexts"],
                                    metaInclude: ["accessInfo"],
                                }, {
                                    headers: jsonApiHeaders,
                                });
                            })];
                    case 2:
                        result = _b.sent();
                        return [4 /*yield*/, this.prepareFilterContext(options === null || options === void 0 ? void 0 : options.exportId, filterContextRef, (_a = result === null || result === void 0 ? void 0 : result.data) === null || _a === void 0 ? void 0 : _a.included)];
                    case 3:
                        filterContext = _b.sent();
                        return [2 /*return*/, convertDashboard(result.data, filterContext)];
                }
            });
        }); };
        this.getDashboardWithReferences = function (ref, filterContextRef, options, types) {
            if (types === void 0) { types = ["insight", "dashboardPlugin"]; }
            return __awaiter(_this, void 0, void 0, function () {
                var dashboard, included, insights, plugins, filterContext;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (options === null || options === void 0 ? void 0 : options.loadUserData) {
                                console.warn("Tiger backend does not support the 'loadUserData' option of getDashboardWithReferences. Ignoring.");
                            }
                            return [4 /*yield*/, this.getDashboardWithSideloads(ref, types)];
                        case 1:
                            dashboard = _a.sent();
                            included = dashboard.included || [];
                            insights = included.filter(isVisualizationObjectsItem).map(visualizationObjectsItemToInsight);
                            plugins = included
                                .filter(isDashboardPluginsItem)
                                .map(convertDashboardPluginWithLinksFromBackend);
                            return [4 /*yield*/, this.prepareFilterContext(options === null || options === void 0 ? void 0 : options.exportId, filterContextRef, included)];
                        case 2:
                            filterContext = _a.sent();
                            return [2 /*return*/, {
                                    dashboard: convertDashboard(dashboard, filterContext),
                                    references: {
                                        insights: insights,
                                        plugins: plugins,
                                    },
                                }];
                    }
                });
            });
        };
        this.getDashboardReferencedObjects = function (dashboard, types) {
            if (types === void 0) { types = ["insight"]; }
            return _this.getDashboardWithSideloads(dashboard.ref, types).then(function (result) {
                var included = result.included || [];
                return {
                    insights: included.filter(isVisualizationObjectsItem).map(visualizationObjectsItemToInsight),
                    plugins: included
                        .filter(isDashboardPluginsItem)
                        .map(convertDashboardPluginWithLinksFromBackend),
                };
            });
        };
        this.getFilterContextFromExportId = function (exportId) { return __awaiter(_this, void 0, void 0, function () {
            var metadata, _a, filters;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.authCall(function (client) {
                            return client.export.getMetadata({
                                workspaceId: _this.workspace,
                                exportId: exportId,
                            });
                        })
                            .then(function (result) { return result.data; })
                            .catch(function () { return null; })];
                    case 1:
                        metadata = _b.sent();
                        if (!metadata) {
                            // Error during fetching of export metadata: return null and
                            // fallback to default filters later.
                            return [2 /*return*/, null];
                        }
                        _a = convertFromBackendExportMetadata(metadata).filters, filters = _a === void 0 ? [] : _a;
                        return [2 /*return*/, {
                                filters: filters,
                                title: "temp-filter-context-" + exportId,
                                description: "temp-filter-context-description",
                                ref: { identifier: "identifier-" + exportId },
                                uri: "uri-" + exportId,
                                identifier: "identifier-" + exportId,
                            }];
                }
            });
        }); };
        this.getDashboardWithSideloads = function (ref, types) { return __awaiter(_this, void 0, void 0, function () {
            var include, id;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        include = ["filterContexts"];
                        if (includes(types, "insight")) {
                            include.push("visualizationObjects");
                        }
                        if (includes(types, "dashboardPlugin")) {
                            include.push("dashboardPlugins");
                        }
                        return [4 /*yield*/, objRefToIdentifier(ref, this.authCall)];
                    case 1:
                        id = _a.sent();
                        return [2 /*return*/, this.authCall(function (client) {
                                return client.entities.getEntityAnalyticalDashboards({
                                    workspaceId: _this.workspace,
                                    objectId: id,
                                    include: include,
                                    metaInclude: ["accessInfo"],
                                }, {
                                    headers: jsonApiHeaders,
                                });
                            }).then(function (result) { return result.data; })];
                }
            });
        }); };
        this.createDashboard = function (dashboard) { return __awaiter(_this, void 0, void 0, function () {
            var filterContext, _a, dashboardContent, result, _b, id, type;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!dashboard.filterContext) return [3 /*break*/, 4];
                        if (!isFilterContextDefinition(dashboard.filterContext)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.createFilterContext(dashboard.filterContext)];
                    case 1:
                        _a = _c.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _a = dashboard.filterContext;
                        _c.label = 3;
                    case 3:
                        filterContext = _a;
                        _c.label = 4;
                    case 4:
                        dashboardContent = convertAnalyticalDashboard(dashboard, filterContext === null || filterContext === void 0 ? void 0 : filterContext.ref);
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.entities.createEntityAnalyticalDashboards({
                                    workspaceId: _this.workspace,
                                    jsonApiAnalyticalDashboardInDocument: {
                                        data: {
                                            id: uuidv4(),
                                            type: JsonApiAnalyticalDashboardInTypeEnum.ANALYTICAL_DASHBOARD,
                                            attributes: {
                                                content: dashboardContent,
                                                title: dashboard.title,
                                                description: dashboard.description || "",
                                            },
                                        },
                                    },
                                }, {
                                    headers: jsonApiHeaders,
                                });
                            })];
                    case 5:
                        result = _c.sent();
                        _b = result.data.data, id = _b.id, type = _b.type;
                        return [2 /*return*/, this.getDashboard(idRef(id, type))];
                }
            });
        }); };
        this.updateDashboard = function (originalDashboard, updatedDashboard) { return __awaiter(_this, void 0, void 0, function () {
            var filterContext, objectId, dashboardContent, result, _a, id, type;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!areObjRefsEqual(originalDashboard.ref, updatedDashboard.ref)) {
                            throw new Error("Cannot update dashboard with different refs!");
                        }
                        else if (isEqual(originalDashboard, updatedDashboard)) {
                            return [2 /*return*/, originalDashboard];
                        }
                        // Missing refs means that the dashboard is not yet stored, so let's create it
                        if (!originalDashboard.ref && !updatedDashboard.ref) {
                            return [2 /*return*/, this.createDashboard(updatedDashboard)];
                        }
                        return [4 /*yield*/, this.processFilterContextUpdate(originalDashboard.filterContext, updatedDashboard.filterContext)];
                    case 1:
                        filterContext = _b.sent();
                        return [4 /*yield*/, objRefToIdentifier(originalDashboard.ref, this.authCall)];
                    case 2:
                        objectId = _b.sent();
                        dashboardContent = convertAnalyticalDashboard(updatedDashboard, filterContext === null || filterContext === void 0 ? void 0 : filterContext.ref);
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.entities.updateEntityAnalyticalDashboards({
                                    workspaceId: _this.workspace,
                                    objectId: objectId,
                                    jsonApiAnalyticalDashboardInDocument: {
                                        data: {
                                            id: objectId,
                                            type: JsonApiAnalyticalDashboardInTypeEnum.ANALYTICAL_DASHBOARD,
                                            attributes: {
                                                content: dashboardContent,
                                                title: updatedDashboard.title,
                                                description: updatedDashboard.description || "",
                                            },
                                        },
                                    },
                                }, {
                                    headers: jsonApiHeaders,
                                });
                            })];
                    case 3:
                        result = _b.sent();
                        _a = result.data.data, id = _a.id, type = _a.type;
                        return [2 /*return*/, this.getDashboard(idRef(id, type))];
                }
            });
        }); };
        this.deleteDashboard = function (ref) { return __awaiter(_this, void 0, void 0, function () {
            var id;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToIdentifier(ref, this.authCall)];
                    case 1:
                        id = _a.sent();
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.entities.deleteEntityAnalyticalDashboards({
                                    objectId: id,
                                    workspaceId: _this.workspace,
                                }, {
                                    headers: jsonApiHeaders,
                                });
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.exportDashboardToPdf = function (dashboardRef, filters) { return __awaiter(_this, void 0, void 0, function () {
            var dashboardId, withoutAllTime;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToIdentifier(dashboardRef, this.authCall)];
                    case 1:
                        dashboardId = _a.sent();
                        withoutAllTime = (filters || []).filter(function (f) { return !isAllTimeDashboardDateFilter(f); });
                        return [2 /*return*/, this.authCall(function (client) { return __awaiter(_this, void 0, void 0, function () {
                                var dashboardResponse, title, pdfExportRequest, pdfExport;
                                var _a;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0: return [4 /*yield*/, client.entities.getEntityAnalyticalDashboards({
                                                workspaceId: this.workspace,
                                                objectId: dashboardId,
                                            }, {
                                                headers: jsonApiHeaders,
                                            })];
                                        case 1:
                                            dashboardResponse = _b.sent();
                                            title = convertDashboard(dashboardResponse.data).title;
                                            pdfExportRequest = {
                                                fileName: title,
                                                dashboardId: dashboardId,
                                                metadata: convertToBackendExportMetadata({ filters: withoutAllTime }),
                                            };
                                            return [4 /*yield*/, client.export.createPdfExport({
                                                    workspaceId: this.workspace,
                                                    pdfExportRequest: pdfExportRequest,
                                                })];
                                        case 2:
                                            pdfExport = _b.sent();
                                            return [4 /*yield*/, this.handleExportResultPolling(client, {
                                                    workspaceId: this.workspace,
                                                    exportId: (_a = pdfExport === null || pdfExport === void 0 ? void 0 : pdfExport.data) === null || _a === void 0 ? void 0 : _a.exportResult,
                                                })];
                                        case 3: return [2 /*return*/, _b.sent()];
                                    }
                                });
                            }); })];
                }
            });
        }); };
        this.createScheduledMail = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new NotSupported("Tiger backend does not support scheduled emails.");
            });
        }); };
        this.updateScheduledMail = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new NotSupported("Tiger backend does not support scheduled emails.");
            });
        }); };
        this.deleteScheduledMail = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new NotSupported("Tiger backend does not support scheduled emails.");
            });
        }); };
        this.getScheduledMailsForDashboard = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new NotSupported("Tiger backend does not support scheduled emails.");
            });
        }); };
        this.getScheduledMailsCountForDashboard = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // FIXME Not supported
                return [2 /*return*/, 0];
            });
        }); };
        this.getAllWidgetAlertsForCurrentUser = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // FIXME Not supported
                return [2 /*return*/, []];
            });
        }); };
        this.getDashboardWidgetAlertsForCurrentUser = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new NotSupported("Tiger backend does not support alerting.");
            });
        }); };
        this.getWidgetAlertsCountForWidgets = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // FIXME Not supported
                return [2 /*return*/, []];
            });
        }); };
        this.createWidgetAlert = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new NotSupported("Tiger backend does not support alerting.");
            });
        }); };
        this.updateWidgetAlert = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new NotSupported("Tiger backend does not support alerting.");
            });
        }); };
        this.deleteWidgetAlert = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new NotSupported("Tiger backend does not support alerting.");
            });
        }); };
        this.deleteWidgetAlerts = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new NotSupported("Tiger backend does not support alerting.");
            });
        }); };
        this.getWidgetReferencedObjects = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new NotSupported("Tiger backend does not support alerting.");
            });
        }); };
        this.getResolvedFiltersForWidget = function (widget, filters) { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, resolveWidgetFilters(filters, widget.ignoreDashboardFilters, widget.dateDataSet, function (refs) {
                        return objRefsToIdentifiers(refs, _this.authCall);
                    })];
            });
        }); };
        this.createDashboardPlugin = function (plugin) { return __awaiter(_this, void 0, void 0, function () {
            var pluginContent, result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pluginContent = convertDashboardPluginToBackend(plugin);
                        return [4 /*yield*/, this.authCall(function (client) {
                                var _a;
                                return client.entities.createEntityDashboardPlugins({
                                    workspaceId: _this.workspace,
                                    jsonApiDashboardPluginInDocument: {
                                        data: {
                                            id: uuidv4(),
                                            type: JsonApiDashboardPluginInTypeEnum.DASHBOARD_PLUGIN,
                                            attributes: {
                                                content: pluginContent,
                                                title: plugin.name,
                                                description: (_a = plugin.description) !== null && _a !== void 0 ? _a : "",
                                            },
                                        },
                                    },
                                }, {
                                    headers: jsonApiHeaders,
                                });
                            })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, convertDashboardPluginFromBackend(result.data)];
                }
            });
        }); };
        this.deleteDashboardPlugin = function (ref) { return __awaiter(_this, void 0, void 0, function () {
            var id;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToIdentifier(ref, this.authCall)];
                    case 1:
                        id = _a.sent();
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.entities.deleteEntityDashboardPlugins({
                                    objectId: id,
                                    workspaceId: _this.workspace,
                                }, {
                                    headers: jsonApiHeaders,
                                });
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.getDashboardPlugin = function (ref) { return __awaiter(_this, void 0, void 0, function () {
            var objectId, result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToIdentifier(ref, this.authCall)];
                    case 1:
                        objectId = _a.sent();
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.entities.getEntityDashboardPlugins({
                                    workspaceId: _this.workspace,
                                    objectId: objectId,
                                }, {
                                    headers: jsonApiHeaders,
                                });
                            })];
                    case 2:
                        result = _a.sent();
                        return [2 /*return*/, convertDashboardPluginFromBackend(result.data)];
                }
            });
        }); };
        this.getDashboardPlugins = function () { return __awaiter(_this, void 0, void 0, function () {
            var result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authCall(function (client) {
                            return MetadataUtilities.getAllPagesOf(client, client.entities.getAllEntitiesDashboardPlugins, { workspaceId: _this.workspace }, { headers: ValidateRelationsHeader })
                                .then(MetadataUtilities.mergeEntitiesResults)
                                .then(MetadataUtilities.filterValidEntities);
                        })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data.map(convertDashboardPluginWithLinksFromBackend)];
                }
            });
        }); };
        this.validateDashboardsExistence = function (dashboardRefs) { return __awaiter(_this, void 0, void 0, function () {
            var entitiesGraph, analyticalDashboards, validDashboardRefs;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authCall(function (client) {
                            return client.actions
                                .getDependentEntitiesGraph({
                                workspaceId: _this.workspace,
                            })
                                .then(function (res) { return res.data.graph; });
                        })];
                    case 1:
                        entitiesGraph = _a.sent();
                        analyticalDashboards = entitiesGraph.nodes.filter(function (_a) {
                            var type = _a.type;
                            return type === "analyticalDashboard";
                        });
                        validDashboardRefs = dashboardRefs.filter(function (ref) {
                            var dashboardId = objRefToString(ref);
                            return analyticalDashboards.some(function (_a) {
                                var id = _a.id;
                                return id === dashboardId;
                            });
                        });
                        return [2 /*return*/, validDashboardRefs.map(function (ref) { return ({
                                ref: ref,
                                identifier: objRefToString(ref),
                                uri: "",
                            }); })];
                }
            });
        }); };
        //
        //
        //
        this.createFilterContext = function (filterContext) { return __awaiter(_this, void 0, void 0, function () {
            var tigerFilterContext, result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tigerFilterContext = convertFilterContextToBackend(filterContext);
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.entities.createEntityFilterContexts({
                                    workspaceId: _this.workspace,
                                    jsonApiFilterContextInDocument: {
                                        data: {
                                            id: uuidv4(),
                                            type: JsonApiFilterContextInTypeEnum.FILTER_CONTEXT,
                                            attributes: {
                                                content: tigerFilterContext,
                                                title: filterContext.title || "",
                                                description: filterContext.description || "",
                                            },
                                        },
                                    },
                                }, {
                                    headers: jsonApiHeaders,
                                });
                            })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, convertFilterContextFromBackend(result.data)];
                }
            });
        }); };
        this.getDashboardPermissions = function (ref) { return __awaiter(_this, void 0, void 0, function () {
            var workspaceWithPermissionsResponse, workspacePermissions, dashboardObjectId_1, dashboardWithPermissionsResponse, dashboardPermissions, _a;
            var _this = this;
            var _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 4, , 5]);
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.entities.getEntityWorkspaces({
                                    id: _this.workspace,
                                    metaInclude: ["permissions"],
                                });
                            })];
                    case 1:
                        workspaceWithPermissionsResponse = _d.sent();
                        workspacePermissions = (_b = workspaceWithPermissionsResponse.data.data.meta.permissions) !== null && _b !== void 0 ? _b : [];
                        if (workspacePermissions.indexOf("MANAGE") >= 0) {
                            return [2 /*return*/, buildDashboardPermissions(["EDIT"])];
                        }
                        return [4 /*yield*/, objRefToIdentifier(ref, this.authCall)];
                    case 2:
                        dashboardObjectId_1 = _d.sent();
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.entities.getEntityAnalyticalDashboards({
                                    workspaceId: _this.workspace,
                                    objectId: dashboardObjectId_1,
                                    metaInclude: ["permissions"],
                                });
                            })];
                    case 3:
                        dashboardWithPermissionsResponse = _d.sent();
                        dashboardPermissions = (_c = dashboardWithPermissionsResponse.data.data.meta.permissions) !== null && _c !== void 0 ? _c : [];
                        return [2 /*return*/, buildDashboardPermissions(dashboardPermissions)];
                    case 4:
                        _a = _d.sent();
                        return [2 /*return*/, buildDashboardPermissions([])];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        this.processFilterContextUpdate = function (originalFilterContext, updatedFilterContext) { return __awaiter(_this, void 0, void 0, function () {
            var shouldUpdateFilterContext;
            return __generator(this, function (_a) {
                if (isTempFilterContext(originalFilterContext)) {
                    throw new UnexpectedError("Cannot update temp filter context!");
                }
                else if (isFilterContextDefinition(updatedFilterContext)) {
                    // Create a new filter context
                    return [2 /*return*/, this.createFilterContext(updatedFilterContext)];
                }
                else if (isFilterContext(updatedFilterContext)) {
                    shouldUpdateFilterContext = !isEqual(originalFilterContext, updatedFilterContext);
                    if (shouldUpdateFilterContext) {
                        return [2 /*return*/, this.updateFilterContext(updatedFilterContext)];
                    }
                }
                // No change, return the original filter context
                return [2 /*return*/, originalFilterContext];
            });
        }); };
        this.updateFilterContext = function (filterContext) { return __awaiter(_this, void 0, void 0, function () {
            var tigerFilterContext, objectId, result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tigerFilterContext = convertFilterContextToBackend(filterContext);
                        return [4 /*yield*/, objRefToIdentifier(filterContext.ref, this.authCall)];
                    case 1:
                        objectId = _a.sent();
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.entities.updateEntityFilterContexts({
                                    workspaceId: _this.workspace,
                                    objectId: objectId,
                                    jsonApiFilterContextInDocument: {
                                        data: {
                                            id: objectId,
                                            type: JsonApiFilterContextInTypeEnum.FILTER_CONTEXT,
                                            attributes: {
                                                content: tigerFilterContext,
                                                title: filterContext.title || "",
                                                description: filterContext.description || "",
                                            },
                                        },
                                    },
                                }, {
                                    headers: jsonApiHeaders,
                                });
                            })];
                    case 2:
                        result = _a.sent();
                        return [2 /*return*/, convertFilterContextFromBackend(result.data)];
                }
            });
        }); };
        this.getFilterContext = function (filterContextRef) { return __awaiter(_this, void 0, void 0, function () {
            var filterContextId, result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToIdentifier(filterContextRef, this.authCall)];
                    case 1:
                        filterContextId = _a.sent();
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.entities.getEntityFilterContexts({
                                    workspaceId: _this.workspace,
                                    objectId: filterContextId,
                                }, {
                                    headers: jsonApiHeaders,
                                });
                            })];
                    case 2:
                        result = _a.sent();
                        return [2 /*return*/, convertFilterContextFromBackend(result.data)];
                }
            });
        }); };
        // prepare filter context with priority for given filtercontext options
        this.prepareFilterContext = function (exportId, filterContextRef, includedFilterContext) {
            if (includedFilterContext === void 0) { includedFilterContext = []; }
            return __awaiter(_this, void 0, void 0, function () {
                var filterContextByRef, _a, filterContextByExportId, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!filterContextRef) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.getFilterContext(filterContextRef)];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            _a = undefined;
                            _c.label = 3;
                        case 3:
                            filterContextByRef = _a;
                            if (!exportId) return [3 /*break*/, 5];
                            return [4 /*yield*/, this.getFilterContextFromExportId(exportId)];
                        case 4:
                            _b = _c.sent();
                            return [3 /*break*/, 6];
                        case 5:
                            _b = undefined;
                            _c.label = 6;
                        case 6:
                            filterContextByExportId = _b;
                            return [2 /*return*/, (filterContextByExportId ||
                                    filterContextByRef ||
                                    getFilterContextFromIncluded(includedFilterContext))];
                    }
                });
            });
        };
    }
    TigerWorkspaceDashboards.prototype.handleExportResultPolling = function (client, payload) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var i, result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        i = 0;
                        _b.label = 1;
                    case 1:
                        if (!(i < MAX_POLL_ATTEMPTS)) return [3 /*break*/, 5];
                        return [4 /*yield*/, client.export.getExportedFile(payload, {
                                transformResponse: function (x) { return x; },
                            })];
                    case 2:
                        result = _b.sent();
                        if ((result === null || result === void 0 ? void 0 : result.status) === 200) {
                            return [2 /*return*/, ((_a = result === null || result === void 0 ? void 0 : result.config) === null || _a === void 0 ? void 0 : _a.url) || ""];
                        }
                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, DEFAULT_POLL_DELAY); })];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 1];
                    case 5: throw new TimeoutError("Export timeout for export id \"" + payload.exportId + "\" in workspace \"" + payload.workspaceId + "\"");
                }
            });
        });
    };
    return TigerWorkspaceDashboards;
}());
export { TigerWorkspaceDashboards };
//# sourceMappingURL=index.js.map