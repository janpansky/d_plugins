import { __assign } from "tslib";
// (C) 2022 GoodData Corporation
import { isAttributeDescriptor, isMeasureGroupDescriptor, measureMasterIdentifier, } from "@gooddata/sdk-model";
import isEmpty from "lodash/isEmpty";
/**
 * Resolves custom override value for export payload.
 *
 * @param dimensions - the source of default values
 * @param definition - the source of custom values
 */
export var resolveCustomOverride = function (dimensions, definition) {
    var _a, _b;
    var customOverride = prepareCustomOverride(dimensions);
    var metrics = setDerivedMetrics(definition, setCustomMetrics(definition, (_a = customOverride === null || customOverride === void 0 ? void 0 : customOverride.metrics) !== null && _a !== void 0 ? _a : {}));
    var labels = setCustomLabels(definition, (_b = customOverride === null || customOverride === void 0 ? void 0 : customOverride.labels) !== null && _b !== void 0 ? _b : {});
    var result = {};
    if (!isEmpty(metrics)) {
        result.metrics = metrics;
    }
    if (!isEmpty(labels)) {
        result.labels = labels;
    }
    return isEmpty(result) ? undefined : result;
};
/**
 * Fills measures/metrics and attributes/labels with the lowest priority values, which serve as default.
 *
 * @param dimensions - the source of default values
 */
export var prepareCustomOverride = function (dimensions) {
    var metrics = {};
    var labels = {};
    for (var _i = 0, dimensions_1 = dimensions; _i < dimensions_1.length; _i++) {
        var dimension = dimensions_1[_i];
        for (var _a = 0, _b = dimension.headers; _a < _b.length; _a++) {
            var header = _b[_a];
            if (isMeasureGroupDescriptor(header)) {
                header.measureGroupHeader.items.forEach(function (_a) {
                    var measureHeaderItem = _a.measureHeaderItem;
                    var localIdentifier = measureHeaderItem.localIdentifier, name = measureHeaderItem.name, format = measureHeaderItem.format;
                    metrics[localIdentifier] = {
                        title: name,
                        format: format,
                    };
                });
            }
            if (isAttributeDescriptor(header)) {
                var _c = header.attributeHeader, localIdentifier = _c.localIdentifier, formOf = _c.formOf;
                labels[localIdentifier] = {
                    title: formOf.name,
                };
            }
        }
    }
    return {
        metrics: metrics,
        labels: labels,
    };
};
/**
 * Overwrites default measure/metric values with custom ones.
 * This function should be used after {@link prepareCustomOverride}, because it relies upon its output.
 *
 * @param definition - the source of custom values
 * @param metrics - return values from {@link prepareCustomOverride}
 */
export var setCustomMetrics = function (definition, metrics) {
    return definition.measures.reduce(function (result, measure) {
        var _a;
        var _b;
        var _c = measure.measure, localIdentifier = _c.localIdentifier, alias = _c.alias, title = _c.title, format = _c.format;
        return __assign(__assign({}, result), (_a = {}, _a[localIdentifier] = {
            title: (_b = alias !== null && alias !== void 0 ? alias : title) !== null && _b !== void 0 ? _b : result[localIdentifier].title,
            format: format !== null && format !== void 0 ? format : result[localIdentifier].format,
        }, _a));
    }, metrics);
};
/**
 * Overwrites formats of derived measures/metrics with values from master, which they should inherit.
 * This function should be used after {@link setCustomMetrics}, because it relies upon its output.
 *
 * @param definition - the source of data
 * @param metrics - return values from {@link setCustomMetrics}
 */
export var setDerivedMetrics = function (definition, metrics) {
    return definition.measures.reduce(function (result, measure) {
        var _a;
        var masterId = measureMasterIdentifier(measure);
        if (!masterId) {
            return result;
        }
        var derivedId = measure.measure.localIdentifier;
        if (metrics[masterId].format) {
            return __assign(__assign({}, result), (_a = {}, _a[derivedId] = __assign(__assign({}, result[derivedId]), { format: metrics[masterId].format }), _a));
        }
        return result;
    }, metrics);
};
/**
 * Overwrites default attribute/label values with custom ones.
 * This function should be used after {@link prepareCustomOverride}, because it relies upon its output.
 *
 * @param definition - the source of custom values
 * @param labels - return values from {@link prepareCustomOverride}
 */
export var setCustomLabels = function (definition, labels) {
    return definition.attributes.reduce(function (result, attribute) {
        var _a;
        var _b = attribute.attribute, localIdentifier = _b.localIdentifier, alias = _b.alias;
        return __assign(__assign({}, result), (_a = {}, _a[localIdentifier] = {
            title: alias !== null && alias !== void 0 ? alias : result[localIdentifier].title,
        }, _a));
    }, labels);
};
//# sourceMappingURL=utils.js.map