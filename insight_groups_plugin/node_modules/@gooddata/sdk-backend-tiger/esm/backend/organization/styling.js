// (C) 2022 GoodData Corporation
import { __awaiter, __generator } from "tslib";
import { v4 as uuidv4 } from "uuid";
import { jsonApiHeaders, MetadataUtilities, } from "@gooddata/api-client-tiger";
import { idRef, } from "@gooddata/sdk-model";
import { objRefToIdentifier } from "../../utils/api";
import { convertTheme as convertThemeFromBackend, convertThemeWithLinks, } from "../../convertors/fromBackend/ThemeConverter";
import { convertColorPalette as convertColorPaletteFromBackend, convertColorPaletteWithLinks, getColorPaletteFromMDObject, isValidColorPalette, } from "../../convertors/fromBackend/ColorPaletteConverter";
import { convertTheme as convertThemeToBackend } from "../../convertors/toBackend/ThemeConverter";
import { convertColorPalette as convertColorPaletteToBackend } from "../../convertors/toBackend/ColorPaletteConverter";
var OrganizationStylingService = /** @class */ (function () {
    function OrganizationStylingService(authCall) {
        var _this = this;
        this.authCall = authCall;
        this.getActiveTheme = function () { return _this.getActiveSetting("activeTheme"); };
        this.getActiveColorPalette = function () { return _this.getActiveSetting("activeColorPalette"); };
    }
    OrganizationStylingService.prototype.getThemes = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authCall(function (client) {
                            return MetadataUtilities.getAllPagesOf(client, client.entities.getAllEntitiesThemes, {
                                sort: ["name"],
                            })
                                .then(MetadataUtilities.mergeEntitiesResults)
                                .then(function (themes) { return themes.data.map(convertThemeWithLinks); });
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    OrganizationStylingService.prototype.getActiveSetting = function (setting) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authCall(function (client) {
                            return client.entities
                                .getAllEntitiesOrganizationSettings({ filter: "id==" + setting })
                                .then(function (result) {
                                var _a;
                                var data = result.data;
                                if (data.data.length) {
                                    return idRef(((_a = data.data[0].attributes) === null || _a === void 0 ? void 0 : _a.content).id);
                                }
                                return undefined;
                            });
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    OrganizationStylingService.prototype.setActiveTheme = function (themeRef) {
        return __awaiter(this, void 0, void 0, function () {
            var themeId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToIdentifier(themeRef, this.authCall)];
                    case 1:
                        themeId = _a.sent();
                        // It is not possible to PUT activeTheme if it does not exist already,
                        // therefore we first clear it and POST a new one
                        return [4 /*yield*/, this.clearActiveTheme()];
                    case 2:
                        // It is not possible to PUT activeTheme if it does not exist already,
                        // therefore we first clear it and POST a new one
                        _a.sent();
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.entities.createEntityOrganizationSettings({
                                    jsonApiOrganizationSettingInDocument: {
                                        data: {
                                            type: "organizationSetting",
                                            id: "activeTheme",
                                            attributes: {
                                                content: { id: themeId, type: "theme" },
                                            },
                                        },
                                    },
                                });
                            })];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    OrganizationStylingService.prototype.clearActiveTheme = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authCall(function (client) {
                            return client.entities.deleteEntityOrganizationSettings({
                                id: "activeTheme",
                            });
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    OrganizationStylingService.prototype.createTheme = function (theme) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authCall(function (client) {
                            return client.entities
                                .createEntityThemes({
                                jsonApiThemeInDocument: {
                                    data: convertThemeToBackend(uuidv4(), theme),
                                },
                            }, {
                                headers: jsonApiHeaders,
                            })
                                .then(_this.parseResult);
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    OrganizationStylingService.prototype.updateTheme = function (theme) {
        return __awaiter(this, void 0, void 0, function () {
            var id;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!theme.ref) {
                            return [2 /*return*/, this.createTheme(theme)];
                        }
                        return [4 /*yield*/, objRefToIdentifier(theme.ref, this.authCall)];
                    case 1:
                        id = _a.sent();
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.entities
                                    .updateEntityThemes({
                                    id: id,
                                    jsonApiThemeInDocument: {
                                        data: convertThemeToBackend(id, theme),
                                    },
                                }, {
                                    headers: jsonApiHeaders,
                                })
                                    .then(_this.parseResult);
                            })];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    OrganizationStylingService.prototype.parseResult = function (result) {
        var data = result.data;
        return convertThemeFromBackend(data);
    };
    OrganizationStylingService.prototype.deleteTheme = function (themeRef) {
        return __awaiter(this, void 0, void 0, function () {
            var id;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToIdentifier(themeRef, this.authCall)];
                    case 1:
                        id = _a.sent();
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.entities.deleteEntityThemes({
                                    id: id,
                                });
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    OrganizationStylingService.prototype.getColorPalettes = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authCall(function (client) {
                            return MetadataUtilities.getAllPagesOf(client, client.entities.getAllEntitiesColorPalettes, {
                                sort: ["name"],
                            })
                                .then(MetadataUtilities.mergeEntitiesResults)
                                .then(function (colorPalettes) {
                                return colorPalettes.data
                                    .filter(function (colorPaletteData) {
                                    return isValidColorPalette(getColorPaletteFromMDObject(colorPaletteData));
                                })
                                    .map(convertColorPaletteWithLinks);
                            });
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    OrganizationStylingService.prototype.setActiveColorPalette = function (colorPaletteRef) {
        return __awaiter(this, void 0, void 0, function () {
            var colorPaletteId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToIdentifier(colorPaletteRef, this.authCall)];
                    case 1:
                        colorPaletteId = _a.sent();
                        // It is not possible to PUT activeColorPalette if it does not exist already,
                        // therefore we first clear it and POST a new one
                        return [4 /*yield*/, this.clearActiveColorPalette()];
                    case 2:
                        // It is not possible to PUT activeColorPalette if it does not exist already,
                        // therefore we first clear it and POST a new one
                        _a.sent();
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.entities.createEntityOrganizationSettings({
                                    jsonApiOrganizationSettingInDocument: {
                                        data: {
                                            type: "organizationSetting",
                                            id: "activeColorPalette",
                                            attributes: {
                                                content: { id: colorPaletteId, type: "colorPalette" },
                                            },
                                        },
                                    },
                                });
                            })];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    OrganizationStylingService.prototype.clearActiveColorPalette = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authCall(function (client) {
                            return client.entities.deleteEntityOrganizationSettings({
                                id: "activeColorPalette",
                            });
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    OrganizationStylingService.prototype.createColorPalette = function (colorPalette) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!isValidColorPalette(colorPalette.colorPalette)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.entities
                                    .createEntityColorPalettes({
                                    jsonApiColorPaletteInDocument: {
                                        data: convertColorPaletteToBackend(uuidv4(), colorPalette),
                                    },
                                }, {
                                    headers: jsonApiHeaders,
                                })
                                    .then(_this.parseColorPaletteResult);
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: throw new Error("Invalid color palette format");
                }
            });
        });
    };
    OrganizationStylingService.prototype.updateColorPalette = function (colorPalette) {
        return __awaiter(this, void 0, void 0, function () {
            var id_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!colorPalette.ref) {
                            return [2 /*return*/, this.createColorPalette(colorPalette)];
                        }
                        if (!isValidColorPalette(colorPalette.colorPalette)) return [3 /*break*/, 3];
                        return [4 /*yield*/, objRefToIdentifier(colorPalette.ref, this.authCall)];
                    case 1:
                        id_1 = _a.sent();
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.entities
                                    .updateEntityColorPalettes({
                                    id: id_1,
                                    jsonApiColorPaletteInDocument: {
                                        data: convertColorPaletteToBackend(id_1, colorPalette),
                                    },
                                }, {
                                    headers: jsonApiHeaders,
                                })
                                    .then(_this.parseColorPaletteResult);
                            })];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3: throw new Error("Invalid color palette format");
                }
            });
        });
    };
    OrganizationStylingService.prototype.deleteColorPalette = function (colorPaletteRef) {
        return __awaiter(this, void 0, void 0, function () {
            var id;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToIdentifier(colorPaletteRef, this.authCall)];
                    case 1:
                        id = _a.sent();
                        return [4 /*yield*/, this.authCall(function (client) { return client.entities.deleteEntityColorPalettes({ id: id }); })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    OrganizationStylingService.prototype.parseColorPaletteResult = function (result) {
        var data = result.data;
        return convertColorPaletteFromBackend(data);
    };
    return OrganizationStylingService;
}());
export { OrganizationStylingService };
//# sourceMappingURL=styling.js.map