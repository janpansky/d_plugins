import { __assign, __awaiter, __generator, __spreadArrays } from "tslib";
import axios from "axios";
import { mapFeatures } from "./feature";
var state = {};
var FH_TIMEOUT = 30000; //wait max 30s to FeatureHub
export function getFeatureHubFeatures(features, wsContext) {
    if (wsContext === void 0) { wsContext = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var configuration, context, data, featuresMap, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    configuration = features.configuration, context = features.context;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, loadHubFeatures(configuration, __assign(__assign({}, context), wsContext), state)];
                case 2:
                    data = _a.sent();
                    featuresMap = data.reduce(function (prev, item) {
                        var _a;
                        return (__assign(__assign({}, prev), (_a = {}, _a[item.key] = item, _a)));
                    }, {});
                    return [2 /*return*/, mapFeatures(featuresMap)];
                case 3:
                    err_1 = _a.sent();
                    console.error("Loading features from FeatureHub was not successful. Err: " + err_1);
                    return [2 /*return*/, {}];
                case 4: return [2 /*return*/];
            }
        });
    });
}
//NOTE: Use FeatureHub SDK after we upgrade version of typescript
// - more info in ticket RAIL-4279
function loadHubFeatures(configuration, context, state) {
    return __awaiter(this, void 0, void 0, function () {
        var host, key;
        return __generator(this, function (_a) {
            host = configuration.host, key = configuration.key;
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    function callFailed() {
                        delete state[key];
                        reject(new Error("FeatureHub is not ready, is not available or api key is wrong."));
                    }
                    var promise = getFeatureHubData(host, key, context, state[key]);
                    promise.then(function (_a) {
                        var data = _a.data, headers = _a.headers, status = _a.status;
                        if (status === 304) {
                            loadFeatures(state[key].data, resolve, callFailed);
                            return;
                        }
                        state[key] = {
                            etag: headers["etag"],
                            data: data || [],
                        };
                        loadFeatures(data, resolve, callFailed);
                    });
                    promise.catch(callFailed);
                })];
        });
    });
}
function loadFeatures(data, resolveFn, errFn) {
    var record = data[data.length - 1];
    if (record) {
        resolveFn(record.features);
        return;
    }
    errFn();
}
function getFeatureHubData(host, key, context, state) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, axios.get("/features", {
                    method: "GET",
                    baseURL: host,
                    params: {
                        sdkUrl: key,
                    },
                    timeout: FH_TIMEOUT,
                    headers: __assign({ "Content-type": "application/json", "X-FeatureHub": Object.keys(context)
                            .reduce(function (prev, item) {
                            return __spreadArrays(prev, [
                                item + "=" + encodeURIComponent(context[item].toString()),
                            ]);
                        }, [])
                            .join(",") }, (state ? { "if-none-match": state.etag } : {})),
                    validateStatus: function (status) {
                        return (status >= 200 && status < 300) || status === 304;
                    },
                })];
        });
    });
}
//# sourceMappingURL=hub.js.map