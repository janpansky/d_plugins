import { __assign } from "tslib";
import { idRef } from "@gooddata/sdk-model";
import { isInheritedObject } from "./ObjectInheritance";
import { convertVisualizationObject } from "./visualizationObjects/VisualizationObjectConverter";
export var insightFromInsightDefinition = function (insight, id, uri, tags, isLocked) {
    return {
        insight: __assign(__assign({}, insight.insight), { identifier: id, uri: uri, ref: idRef(id, "insight"), isLocked: isLocked,
            tags: tags }),
    };
};
export var visualizationObjectsItemToInsight = function (visualizationObject) {
    var id = visualizationObject.id, attributes = visualizationObject.attributes, links = visualizationObject.links;
    var _a = attributes, content = _a.content, title = _a.title, description = _a.description, tags = _a.tags;
    return insightFromInsightDefinition(convertVisualizationObject(content, title, description, tags), id, links.self, tags, 
    // TODO: TIGER-HACK: inherited objects must be locked; they are read-only for all
    isInheritedObject(visualizationObject));
};
//# sourceMappingURL=InsightConverter.js.map