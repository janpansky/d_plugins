// (C) 2020-2022 GoodData Corporation
import { InvariantError } from "ts-invariant";
import { insightAttributes, insightBuckets, insightSetBuckets, insightSorts } from ".";
import { bucketAttributeIndex, bucketSetTotals, bucketTotals } from "../execution/buckets";
import { isAttributeSort, isMeasureSort, sortEntityIds } from "../execution/base/sort";
import { attributeLocalId } from "../execution/attribute";
/**
 * Makes sure the insight does not have any nonsensical data (like totals that no longer make sense, etc.), before it is saved.
 *
 * @param insight - the insight or insight definition to sanitize
 * @public
 */
export function insightSanitize(insight) {
    return removeInvalidTotalsFromInsight(insight);
}
function removeInvalidTotalsFromInsight(insight) {
    var sortItems = insightSorts(insight);
    var attributeIdentifiers = insightAttributes(insight).map(attributeLocalId);
    var sanitizedBuckets = insightBuckets(insight).map(function (bucket) {
        var sanitizedTotals = sanitizeBucketTotals(bucket, sortItems).filter(function (total) {
            return attributeIdentifiers.includes(total.attributeIdentifier);
        });
        if (sanitizedTotals.length !== bucketTotals(bucket).length) {
            return bucketSetTotals(bucket, sanitizedTotals);
        }
        return bucket;
    });
    return insightSetBuckets(insight, sanitizedBuckets);
}
/**
 * Takes totals from a bucket and removes all subtotals if the bucket is sorted on other than the first attribute.
 *
 * @param bucket - a grouping of attributes, measures and totals to sanitize
 * @param sortItems - a specification of the sort
 * @param totals - if specified these totals instead of the bucket totals will be sanitized in regard to the bucket
 * @returns sanitized totals
 * @internal
 */
export function sanitizeBucketTotals(bucket, sortItems, totals) {
    var originalTotals = totals !== null && totals !== void 0 ? totals : bucketTotals(bucket);
    if (isSortedOnDifferentThanFirstAttributeInBucket(bucket, sortItems)) {
        return getTotalsWithoutSubtotals(originalTotals, bucket);
    }
    else {
        return originalTotals;
    }
}
function isSortedOnDifferentThanFirstAttributeInBucket(bucket, sortItems) {
    return sortItems.some(function (sortItem) {
        if (isAttributeSort(sortItem)) {
            var attributeIdentifier = sortEntityIds(sortItem).attributeIdentifiers[0];
            var attributeIndex = bucketAttributeIndex(bucket, attributeIdentifier);
            return attributeIndex > 0;
        }
        else if (isMeasureSort(sortItem)) {
            return true;
        }
        throw new InvariantError('Unexpected sortType, only supported sortTypes are "attributeSortItem" and "measureSortItem"');
    });
}
function getTotalsWithoutSubtotals(totals, bucket) {
    return totals.filter(function (total) { return bucketAttributeIndex(bucket, total.attributeIdentifier) === 0; });
}
//# sourceMappingURL=sanitization.js.map