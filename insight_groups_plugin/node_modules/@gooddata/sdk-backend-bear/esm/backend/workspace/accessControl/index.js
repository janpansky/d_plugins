import { __assign, __awaiter, __generator, __spreadArrays } from "tslib";
import { objRefToUri } from "../../../utils/api";
import { convertGranteeEntry, convertWorkspaceUserGroupToAvailableUserGroupAccessGrantee, convertWorkspaceUserToAvailableUserAccessGrantee, convertGranularAccessGranteeToAcessGrantee, } from "../../../convertors/fromBackend/AccessControlConverter";
import { BearWorkspaceUsersQuery } from "../users";
import { BearWorkspaceUserGroupsQuery } from "../userGroups";
var BearWorkspaceAccessControlService = /** @class */ (function () {
    function BearWorkspaceAccessControlService(authCall, workspace) {
        this.authCall = authCall;
        this.workspace = workspace;
        this.users = new BearWorkspaceUsersQuery(this.authCall, this.workspace);
        this.userGroups = new BearWorkspaceUserGroupsQuery(this.authCall, this.workspace);
    }
    BearWorkspaceAccessControlService.prototype.getAccessList = function (sharedObject) {
        return __awaiter(this, void 0, void 0, function () {
            var objectUri, granteesList, items;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToUri(sharedObject, this.workspace, this.authCall)];
                    case 1:
                        objectUri = _a.sent();
                        return [4 /*yield*/, this.authCall(function (sdk) { return sdk.project.getGranteesInfo(objectUri, {}); })];
                    case 2:
                        granteesList = _a.sent();
                        items = granteesList.grantees.items;
                        return [2 /*return*/, items.map(convertGranteeEntry)];
                }
            });
        });
    };
    BearWorkspaceAccessControlService.prototype.grantAccess = function (sharedObject, grantees) {
        return __awaiter(this, void 0, void 0, function () {
            var objectUri, granteeUris;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToUri(sharedObject, this.workspace, this.authCall)];
                    case 1:
                        objectUri = _a.sent();
                        return [4 /*yield*/, Promise.all(grantees.map(function (grantee) { return objRefToUri(grantee.granteeRef, _this.workspace, _this.authCall); }))];
                    case 2:
                        granteeUris = _a.sent();
                        return [2 /*return*/, this.authCall(function (sdk) { return sdk.project.addGrantees(objectUri, granteeUris); })];
                }
            });
        });
    };
    BearWorkspaceAccessControlService.prototype.revokeAccess = function (sharedObject, grantees) {
        return __awaiter(this, void 0, void 0, function () {
            var objectUri, granteeUris;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToUri(sharedObject, this.workspace, this.authCall)];
                    case 1:
                        objectUri = _a.sent();
                        return [4 /*yield*/, Promise.all(grantees.map(function (grantee) { return objRefToUri(grantee.granteeRef, _this.workspace, _this.authCall); }))];
                    case 2:
                        granteeUris = _a.sent();
                        return [2 /*return*/, this.authCall(function (sdk) { return sdk.project.removeGrantees(objectUri, granteeUris); })];
                }
            });
        });
    };
    /**
     * Bear has no granular permissions, which means that the user or group either have permissions
     * or they don't. An empty array of grantee permissions will result in revoking the access
     * for the grantee. An array of grantee permissions with some content will result in granting
     * access for the grantee.
     */
    BearWorkspaceAccessControlService.prototype.changeAccess = function (sharedObject, grantees) {
        return __awaiter(this, void 0, void 0, function () {
            var granteesToGrantAccess, granteesToRevokeAccess;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        granteesToGrantAccess = grantees
                            .filter(function (grantee) { return grantee.permissions.length > 0; })
                            .map(convertGranularAccessGranteeToAcessGrantee);
                        granteesToRevokeAccess = grantees
                            .filter(function (grantee) { return grantee.permissions.length === 0; })
                            .map(convertGranularAccessGranteeToAcessGrantee);
                        if (!granteesToGrantAccess.length) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.grantAccess(sharedObject, granteesToGrantAccess)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!granteesToRevokeAccess.length) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.revokeAccess(sharedObject, granteesToRevokeAccess)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    BearWorkspaceAccessControlService.prototype.getAvailableGrantees = function (_sharedObject, search) {
        return __awaiter(this, void 0, void 0, function () {
            var usersOption, groupsOption, workspaceUsersQuery, workspaceGroupsQuery, _a, users, groups;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        usersOption = {};
                        groupsOption = {};
                        if (search) {
                            usersOption = __assign(__assign({}, usersOption), { search: "%" + search });
                            groupsOption = __assign(__assign({}, groupsOption), { search: "" + search });
                        }
                        workspaceUsersQuery = this.users.withOptions(usersOption).query();
                        workspaceGroupsQuery = this.userGroups.query(groupsOption);
                        return [4 /*yield*/, Promise.all([workspaceUsersQuery, workspaceGroupsQuery])];
                    case 1:
                        _a = _b.sent(), users = _a[0], groups = _a[1];
                        return [2 /*return*/, __spreadArrays(users.items.map(convertWorkspaceUserToAvailableUserAccessGrantee), groups.items.map(convertWorkspaceUserGroupToAvailableUserGroupAccessGrantee))];
                }
            });
        });
    };
    return BearWorkspaceAccessControlService;
}());
export { BearWorkspaceAccessControlService };
//# sourceMappingURL=index.js.map