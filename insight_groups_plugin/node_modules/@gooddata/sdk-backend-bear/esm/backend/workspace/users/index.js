import { __awaiter, __generator } from "tslib";
import { convertWorkspaceUser } from "../../../convertors/fromBackend/UsersConverter";
import { ServerPaging } from "@gooddata/sdk-backend-base";
var BearWorkspaceUsersQuery = /** @class */ (function () {
    function BearWorkspaceUsersQuery(authCall, workspace) {
        this.authCall = authCall;
        this.workspace = workspace;
        this.options = {};
    }
    BearWorkspaceUsersQuery.prototype.withOptions = function (options) {
        this.options = options;
        return this;
    };
    BearWorkspaceUsersQuery.prototype.queryAll = function () {
        return __awaiter(this, void 0, void 0, function () {
            var usersQuery;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.query()];
                    case 1:
                        usersQuery = _a.sent();
                        return [2 /*return*/, usersQuery.all()];
                }
            });
        });
    };
    BearWorkspaceUsersQuery.prototype.queryWorker = function (options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var search;
            var _this = this;
            return __generator(this, function (_b) {
                search = options.search;
                return [2 /*return*/, ServerPaging.for(function (_a) {
                        var limit = _a.limit, offset = _a.offset;
                        return __awaiter(_this, void 0, void 0, function () {
                            var data, _b, items, totalCount;
                            var _this = this;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0: return [4 /*yield*/, this.authCall(function (sdk) {
                                            return sdk.project.getUserListWithPaging(_this.workspace, {
                                                prefixSearch: search,
                                                userState: "ACTIVE",
                                                offset: offset,
                                                limit: limit,
                                            });
                                        })];
                                    case 1:
                                        data = _c.sent();
                                        _b = data.userList, items = _b.items, totalCount = _b.paging.totalCount;
                                        return [2 /*return*/, {
                                                items: items.map(convertWorkspaceUser),
                                                totalCount: totalCount,
                                            }];
                                }
                            });
                        });
                    }, (_a = this.options.limit) !== null && _a !== void 0 ? _a : 1000, this.options.offset)];
            });
        });
    };
    BearWorkspaceUsersQuery.prototype.query = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.queryWorker(this.options)];
            });
        });
    };
    return BearWorkspaceUsersQuery;
}());
export { BearWorkspaceUsersQuery };
//# sourceMappingURL=index.js.map