import { __assign, __awaiter, __generator, __spreadArrays } from "tslib";
import partition from "lodash/partition";
import uniq from "lodash/uniq";
import flatMap from "lodash/flatMap";
import keyBy from "lodash/keyBy";
import { isCatalogFact, isCatalogMeasure, } from "@gooddata/sdk-model";
import { GdcCatalog, GdcMetadata } from "@gooddata/api-model-bear";
import { convertAttribute, convertDateDataset, convertFact, convertGroup, convertItemType, convertMeasure, isCompatibleCatalogItemType, } from "../../../convertors/fromBackend/CatalogConverter";
import { BearWorkspaceCatalog } from "./catalog";
import { objRefsToIdentifiers, objRefToIdentifier } from "../../../utils/api";
var bearCatalogItemToCatalogItem = function (displayForms, attributes) {
    return function (item) {
        if (GdcCatalog.isCatalogAttribute(item)) {
            return convertAttribute(item, displayForms, attributes);
        }
        else if (GdcCatalog.isCatalogMetric(item)) {
            return convertMeasure(item);
        }
        return convertFact(item);
    };
};
var createLookups = function (displayFormsAndAttributes) {
    var _a = partition(displayFormsAndAttributes, GdcMetadata.isWrappedAttribute), attributes = _a[0], displayForms = _a[1];
    var unwrappedDisplayForms = displayForms.map(function (df) { return df.attributeDisplayForm; });
    var attributeByUri = keyBy(attributes, function (item) { return item.attribute.meta.uri; });
    var attributeById = keyBy(attributes, function (item) { return item.attribute.meta.identifier; });
    var displayFormByUri = keyBy(unwrappedDisplayForms, function (item) { return item.meta.uri; });
    var displayFormById = keyBy(unwrappedDisplayForms, function (item) { return item.meta.identifier; });
    var attributeByDisplayFormUri = Object.keys(displayFormByUri).reduce(function (acc, displayFormUri) {
        var displayForm = displayFormByUri[displayFormUri];
        var attributeUri = displayForm.content.formOf;
        var attribute = attributeByUri[attributeUri];
        acc[displayFormUri] = attribute;
        return acc;
    }, {});
    return {
        attributeById: attributeById,
        attributeByDisplayFormUri: attributeByDisplayFormUri,
        displayFormById: displayFormById,
        displayFormByUri: displayFormByUri,
    };
};
var getProductionFlag = function (_a) {
    var production = _a.production, dataset = _a.dataset;
    // if production is undefined, leave it as is - it has meaning
    if (production === undefined) {
        return production;
    }
    // if a dataset is specified, production must be false
    var sanitizedProduction = !dataset && production;
    return sanitizedProduction ? 1 : 0;
};
var groupableCatalogItemTypes = ["attribute", "measure", "fact"];
var isGroupableCatalogItemType = function (type) { return groupableCatalogItemTypes.includes(type); };
var BearWorkspaceCatalogFactory = /** @class */ (function () {
    function BearWorkspaceCatalogFactory(authCall, workspace, options) {
        var _this = this;
        if (options === void 0) { options = {
            types: ["attribute", "measure", "fact", "dateDataset"],
            excludeTags: [],
            includeTags: [],
            loadGroups: true,
        }; }
        this.authCall = authCall;
        this.workspace = workspace;
        this.options = options;
        this.tagsAndDatasetIdsPromise = null;
        this.loadAllCatalogItemsAndMappings = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, bearCatalogItems, bearDateDatasets, bearAttributes, bearDisplayFormsAndAttributes, _b, attributeByDisplayFormUri, displayFormById, displayFormByUri, attributeById, catalogItems, dateDatasets, allCatalogItems, measureById, factById, dateAttributeById;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            this.loadBearCatalogItems(),
                            this.loadDateDatasets(),
                        ])];
                    case 1:
                        _a = _c.sent(), bearCatalogItems = _a[0], bearDateDatasets = _a[1];
                        return [4 /*yield*/, this.loadBearAttributes(bearCatalogItems, flatMap(bearDateDatasets, function (dd) { var _a; return (_a = dd.availableDateAttributes) !== null && _a !== void 0 ? _a : []; }))];
                    case 2:
                        bearAttributes = _c.sent();
                        bearDisplayFormsAndAttributes = extractDisplayFormsFromBearAttributes(bearAttributes);
                        _b = createLookups(bearDisplayFormsAndAttributes), attributeByDisplayFormUri = _b.attributeByDisplayFormUri, displayFormById = _b.displayFormById, displayFormByUri = _b.displayFormByUri, attributeById = _b.attributeById;
                        catalogItems = bearCatalogItems.map(bearCatalogItemToCatalogItem(displayFormByUri, attributeById));
                        dateDatasets = bearDateDatasets.map(function (dd) { return convertDateDataset(dd, attributeById); });
                        allCatalogItems = catalogItems.concat(dateDatasets);
                        measureById = keyBy(catalogItems.filter(isCatalogMeasure).map(function (el) { return el.measure; }), function (el) { return el.id; });
                        factById = keyBy(catalogItems.filter(isCatalogFact).map(function (el) { return el.fact; }), function (el) { return el.id; });
                        dateAttributeById = keyBy(flatMap(dateDatasets, function (dd) { return dd.dateAttributes; }), function (attr) { return attr.attribute.id; });
                        return [2 /*return*/, {
                                allCatalogItems: allCatalogItems,
                                mappings: {
                                    attributeById: attributeById,
                                    attributeByDisplayFormUri: attributeByDisplayFormUri,
                                    displayFormById: displayFormById,
                                    measureById: measureById,
                                    factById: factById,
                                    dateAttributeById: dateAttributeById,
                                },
                            }];
                }
            });
        }); };
        this.loadDateDatasets = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, types, production, includeDateGranularities, includeDateDatasets, _b, includeTagsIds, excludeTagsIds, dataSetId, shouldReturnAllDateDataSets, result;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = this.options, types = _a.types, production = _a.production, includeDateGranularities = _a.includeDateGranularities;
                        includeDateDatasets = types.includes("dateDataset");
                        if (!includeDateDatasets) {
                            return [2 /*return*/, []];
                        }
                        return [4 /*yield*/, this.getTagsAndDatasetIds()];
                    case 1:
                        _b = _c.sent(), includeTagsIds = _b.includeTagsIds, excludeTagsIds = _b.excludeTagsIds, dataSetId = _b.dataSetId;
                        shouldReturnAllDateDataSets = !production && !dataSetId;
                        return [4 /*yield*/, this.authCall(function (sdk) {
                                return sdk.catalogue.loadDateDataSets(_this.workspace, {
                                    returnAllDateDataSets: shouldReturnAllDateDataSets,
                                    dataSetIdentifier: dataSetId,
                                    excludeObjectsWithTags: excludeTagsIds.length ? excludeTagsIds : undefined,
                                    includeObjectsWithTags: includeTagsIds.length ? includeTagsIds : undefined,
                                    includeDateGranularities: includeDateGranularities,
                                });
                            })];
                    case 2:
                        result = _c.sent();
                        return [2 /*return*/, result.dateDataSets];
                }
            });
        }); };
        this.loadBearCatalogItems = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, types, dataset, compatibleBearItemTypes, _b, includeTagsIds, excludeTagsIds, dataSetId, bearItemTypes;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = this.options, types = _a.types, dataset = _a.dataset;
                        compatibleBearItemTypes = types.filter(isCompatibleCatalogItemType);
                        if (compatibleBearItemTypes.length === 0) {
                            return [2 /*return*/, []];
                        }
                        return [4 /*yield*/, this.getTagsAndDatasetIds()];
                    case 1:
                        _b = _c.sent(), includeTagsIds = _b.includeTagsIds, excludeTagsIds = _b.excludeTagsIds, dataSetId = _b.dataSetId;
                        bearItemTypes = compatibleBearItemTypes.map(convertItemType);
                        return [2 /*return*/, this.authCall(function (sdk) {
                                return sdk.catalogue.loadAllItems(_this.workspace, {
                                    types: bearItemTypes,
                                    includeWithTags: includeTagsIds.length ? includeTagsIds : undefined,
                                    excludeWithTags: excludeTagsIds.length ? excludeTagsIds : undefined,
                                    production: getProductionFlag(_this.options),
                                    csvDataSets: dataset ? [dataSetId] : [],
                                });
                            })];
                }
            });
        }); };
        this.loadBearAttributes = function (bearCatalogItems, dateDatasetAttributes) { return __awaiter(_this, void 0, void 0, function () {
            var types, shouldLoadAttributes, bearCatalogAttributes, attributeUris, dateAttributeUris;
            var _this = this;
            return __generator(this, function (_a) {
                types = this.options.types;
                shouldLoadAttributes = types.some(function (type) { return type === "attribute" || type === "dateDataset"; });
                if (!shouldLoadAttributes) {
                    return [2 /*return*/, []];
                }
                bearCatalogAttributes = bearCatalogItems.filter(GdcCatalog.isCatalogAttribute);
                attributeUris = bearCatalogAttributes.map(function (attr) { return attr.links.self; });
                dateAttributeUris = dateDatasetAttributes.map(function (attr) { return attr.attributeMeta.uri; });
                return [2 /*return*/, this.authCall(function (sdk) {
                        return sdk.md.getObjects(_this.workspace, uniq(__spreadArrays(attributeUris, dateAttributeUris)));
                    })];
            });
        }); };
        this.loadCatalogGroups = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, types, loadGroups, shouldLoadGroups, dataset, _b, includeTagsIds, excludeTagsIds, dataSetId, bearCatalogGroups;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = this.options, types = _a.types, loadGroups = _a.loadGroups;
                        shouldLoadGroups = loadGroups && types.some(isGroupableCatalogItemType);
                        if (!shouldLoadGroups) {
                            return [2 /*return*/, []];
                        }
                        dataset = this.options.dataset;
                        return [4 /*yield*/, this.getTagsAndDatasetIds()];
                    case 1:
                        _b = _c.sent(), includeTagsIds = _b.includeTagsIds, excludeTagsIds = _b.excludeTagsIds, dataSetId = _b.dataSetId;
                        return [4 /*yield*/, this.authCall(function (sdk) {
                                return sdk.catalogue.loadGroups(_this.workspace, {
                                    includeWithTags: includeTagsIds.length ? includeTagsIds : undefined,
                                    excludeWithTags: excludeTagsIds.length ? excludeTagsIds : undefined,
                                    production: getProductionFlag(_this.options),
                                    csvDataSets: dataset ? [dataSetId] : [],
                                });
                            })];
                    case 2:
                        bearCatalogGroups = _c.sent();
                        return [2 /*return*/, bearCatalogGroups.map(convertGroup)];
                }
            });
        }); };
        this.getTagsAndDatasetIds = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, dataset, includeTags, excludeTags;
            return __generator(this, function (_b) {
                if (!this.tagsAndDatasetIdsPromise) {
                    _a = this.options, dataset = _a.dataset, includeTags = _a.includeTags, excludeTags = _a.excludeTags;
                    this.tagsAndDatasetIdsPromise = Promise.all([
                        objRefsToIdentifiers(includeTags, this.authCall),
                        objRefsToIdentifiers(excludeTags, this.authCall),
                        dataset ? objRefToIdentifier(dataset, this.authCall) : Promise.resolve(""),
                    ]).then(function (_a) {
                        var includeTagsIds = _a[0], excludeTagsIds = _a[1], dataSetId = _a[2];
                        return ({
                            dataSetId: dataSetId,
                            excludeTagsIds: excludeTagsIds,
                            includeTagsIds: includeTagsIds,
                        });
                    });
                }
                return [2 /*return*/, this.tagsAndDatasetIdsPromise];
            });
        }); };
    }
    BearWorkspaceCatalogFactory.prototype.withOptions = function (options) {
        var newOptions = __assign(__assign({}, this.options), options);
        return new BearWorkspaceCatalogFactory(this.authCall, this.workspace, newOptions);
    };
    BearWorkspaceCatalogFactory.prototype.forDataset = function (dataset) {
        return this.withOptions({
            dataset: dataset,
        });
    };
    BearWorkspaceCatalogFactory.prototype.forTypes = function (types) {
        return this.withOptions({
            types: types,
        });
    };
    BearWorkspaceCatalogFactory.prototype.includeTags = function (tags) {
        return this.withOptions({
            includeTags: tags,
        });
    };
    BearWorkspaceCatalogFactory.prototype.excludeTags = function (tags) {
        return this.withOptions({
            excludeTags: tags,
        });
    };
    BearWorkspaceCatalogFactory.prototype.withGroups = function (loadGroups) {
        return this.withOptions({
            loadGroups: loadGroups,
        });
    };
    BearWorkspaceCatalogFactory.prototype.load = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, allCatalogItems, mappings, catalogGroups;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            this.loadAllCatalogItemsAndMappings(),
                            this.loadCatalogGroups(),
                        ])];
                    case 1:
                        _a = _c.sent(), _b = _a[0], allCatalogItems = _b.allCatalogItems, mappings = _b.mappings, catalogGroups = _a[1];
                        return [2 /*return*/, new BearWorkspaceCatalog(this.authCall, this.workspace, catalogGroups, allCatalogItems, this.options, mappings)];
                }
            });
        });
    };
    return BearWorkspaceCatalogFactory;
}());
export { BearWorkspaceCatalogFactory };
function extractDisplayFormsFromBearAttributes(attributes) {
    return flatMap(attributes, function (attribute) { return __spreadArrays([
        attribute
    ], attribute.attribute.content.displayForms.map(function (df) { return ({ attributeDisplayForm: df }); })); });
}
//# sourceMappingURL=factory.js.map