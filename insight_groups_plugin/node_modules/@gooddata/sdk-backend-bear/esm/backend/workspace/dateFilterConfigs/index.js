import { __awaiter, __generator } from "tslib";
import invariant from "ts-invariant";
import { convertDateFilterConfig } from "../../../convertors/fromBackend/DateFilterConfigConverter";
import { ServerPaging } from "@gooddata/sdk-backend-base";
var BearWorkspaceDateFilterConfigsQuery = /** @class */ (function () {
    function BearWorkspaceDateFilterConfigsQuery(authCall, workspace) {
        this.authCall = authCall;
        this.workspace = workspace;
    }
    BearWorkspaceDateFilterConfigsQuery.prototype.withLimit = function (limit) {
        invariant(limit > 0, "limit must be a positive number, got: " + limit);
        this.limit = limit;
        return this;
    };
    BearWorkspaceDateFilterConfigsQuery.prototype.withOffset = function (offset) {
        this.offset = offset;
        return this;
    };
    BearWorkspaceDateFilterConfigsQuery.prototype.query = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.queryWorker()];
            });
        });
    };
    BearWorkspaceDateFilterConfigsQuery.prototype.queryWorker = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, ServerPaging.for(function (_a) {
                        var limit = _a.limit, offset = _a.offset;
                        return __awaiter(_this, void 0, void 0, function () {
                            var data, items, totalCount;
                            var _this = this;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0: return [4 /*yield*/, this.authCall(function (sdk) {
                                            return sdk.md.getObjectsByQueryWithPaging(_this.workspace, {
                                                offset: offset,
                                                limit: limit,
                                                category: "dateFilterConfig",
                                                getTotalCount: true,
                                            });
                                        })];
                                    case 1:
                                        data = _b.sent();
                                        items = data.items, totalCount = data.paging.totalCount;
                                        return [2 /*return*/, {
                                                items: items.map(convertDateFilterConfig),
                                                totalCount: totalCount,
                                            }];
                                }
                            });
                        });
                    }, this.limit, this.offset)];
            });
        });
    };
    return BearWorkspaceDateFilterConfigsQuery;
}());
export { BearWorkspaceDateFilterConfigsQuery };
//# sourceMappingURL=index.js.map