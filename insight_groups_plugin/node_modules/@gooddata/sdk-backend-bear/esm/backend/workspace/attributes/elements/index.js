import { __assign, __awaiter, __generator, __rest } from "tslib";
// (C) 2019-2023 GoodData Corporation
import { isValueBasedElementsQueryOptionsElements, } from "@gooddata/sdk-backend-spi";
import { filterObjRef, isAttributeFilter, filterAttributeElements, isAttributeElementsByRef, isRelativeDateFilter, } from "@gooddata/sdk-model";
import invariant from "ts-invariant";
import { objRefToUri, getObjectIdFromUri } from "../../../../utils/api";
import { LimitingAfmFactory } from "./limitingAfmFactory";
import { InMemoryPaging, ServerPaging } from "@gooddata/sdk-backend-base";
var BearWorkspaceElements = /** @class */ (function () {
    function BearWorkspaceElements(authCall, workspace) {
        this.authCall = authCall;
        this.workspace = workspace;
    }
    BearWorkspaceElements.prototype.forDisplayForm = function (ref) {
        return new BearWorkspaceElementsQuery(this.authCall, ref, this.workspace);
    };
    BearWorkspaceElements.prototype.forFilter = function (filter, dateFilterDisplayForm) {
        return new BearWorkspaceFilterElementsQuery(this.authCall, filter, dateFilterDisplayForm, this.workspace);
    };
    return BearWorkspaceElements;
}());
export { BearWorkspaceElements };
var BearWorkspaceElementsQuery = /** @class */ (function () {
    function BearWorkspaceElementsQuery(authCall, displayFormRef, workspace) {
        this.authCall = authCall;
        this.displayFormRef = displayFormRef;
        this.workspace = workspace;
        this.limit = 50;
        this.offset = 0;
    }
    BearWorkspaceElementsQuery.prototype.withLimit = function (limit) {
        invariant(limit > 0, "limit must be a positive number, got: " + limit);
        this.limit = limit;
        return this;
    };
    BearWorkspaceElementsQuery.prototype.withOffset = function (offset) {
        this.offset = offset;
        return this;
    };
    BearWorkspaceElementsQuery.prototype.withAttributeFilters = function (filters) {
        this.attributeFilters = filters;
        return this;
    };
    BearWorkspaceElementsQuery.prototype.withDateFilters = function (filters) {
        this.dateFilters = filters;
        return this;
    };
    BearWorkspaceElementsQuery.prototype.withMeasures = function (measures) {
        this.measures = measures.length > 0 ? measures : undefined;
        return this;
    };
    BearWorkspaceElementsQuery.prototype.withOptions = function (options) {
        this.options = options;
        return this;
    };
    BearWorkspaceElementsQuery.prototype.withSignal = function (_) {
        console.warn("Cancelling requests is not supported on bear backend.");
        return this;
    };
    BearWorkspaceElementsQuery.prototype.query = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var limitingAfmFactory, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        limitingAfmFactory = new LimitingAfmFactory(this.authCall, this.displayFormRef, this.workspace);
                        _b = this;
                        return [4 /*yield*/, limitingAfmFactory.getAfm(this.attributeFilters, this.measures, this.dateFilters)];
                    case 1:
                        _b.limitingAfm = _c.sent();
                        return [2 /*return*/, this.queryWorker((_a = this.options) !== null && _a !== void 0 ? _a : {})];
                }
            });
        });
    };
    BearWorkspaceElementsQuery.prototype.getObjectId = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.objectId) return [3 /*break*/, 2];
                        return [4 /*yield*/, objRefToUri(this.displayFormRef, this.workspace, this.authCall)];
                    case 1:
                        uri = _a.sent();
                        this.objectId = getObjectIdFromUri(uri);
                        _a.label = 2;
                    case 2: return [2 /*return*/, this.objectId];
                }
            });
        });
    };
    BearWorkspaceElementsQuery.prototype.queryWorker = function (options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var objectId, elements, uris, restOptions, urisToUse;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getObjectId()];
                    case 1:
                        objectId = _b.sent();
                        elements = options.elements, uris = options.uris, restOptions = __rest(options, ["elements", "uris"]);
                        if (elements && uris) {
                            console.warn("Both 'elements' and 'uris' used in IElementsQueryOptions, 'uris' property will be ignored.");
                        }
                        invariant(!isValueBasedElementsQueryOptionsElements(elements), "Specifying elements by value is not supported.");
                        urisToUse = (_a = elements === null || elements === void 0 ? void 0 : elements.uris) !== null && _a !== void 0 ? _a : uris;
                        invariant(!urisToUse || urisToUse.every(function (item) { return item !== null; }), "Nulls are not supported as attribute element uris on bear");
                        return [2 /*return*/, ServerPaging.for(function (_a) {
                                var limit = _a.limit, offset = _a.offset;
                                return __awaiter(_this, void 0, void 0, function () {
                                    var params, data, _b, items, paging, totalCount;
                                    var _this = this;
                                    return __generator(this, function (_c) {
                                        switch (_c.label) {
                                            case 0:
                                                params = __assign(__assign(__assign({}, restOptions), { uris: urisToUse }), { limit: limit,
                                                    offset: offset, afm: this.limitingAfm });
                                                return [4 /*yield*/, this.authCall(function (sdk) {
                                                        return sdk.md.getValidElements(_this.workspace, objectId, params);
                                                    })];
                                            case 1:
                                                data = _c.sent();
                                                _b = data.validElements, items = _b.items, paging = _b.paging;
                                                totalCount = Number.parseInt(paging.total, 10);
                                                return [2 /*return*/, {
                                                        items: items.map(function (_a) {
                                                            var element = _a.element;
                                                            return element;
                                                        }),
                                                        totalCount: totalCount,
                                                    }];
                                        }
                                    });
                                });
                            }, this.limit, this.offset)];
                }
            });
        });
    };
    return BearWorkspaceElementsQuery;
}());
var BearWorkspaceFilterElementsQuery = /** @class */ (function () {
    function BearWorkspaceFilterElementsQuery(authCall, filter, dateDf, workspace) {
        this.authCall = authCall;
        this.filter = filter;
        this.workspace = workspace;
        this.limit = 50;
        this.offset = 0;
        var ref = filterObjRef(filter);
        if (isRelativeDateFilter(filter)) {
            invariant(dateDf, "Date filter's display form needs to be defined");
            ref = dateDf;
        }
        this.elementsQuery = new BearWorkspaceElementsQuery(this.authCall, ref, this.workspace);
    }
    // eslint-disable-next-line sonarjs/no-identical-functions
    BearWorkspaceFilterElementsQuery.prototype.withLimit = function (limit) {
        invariant(limit > 0, "limit must be a positive number, got: " + limit);
        this.limit = limit;
        return this;
    };
    BearWorkspaceFilterElementsQuery.prototype.withOffset = function (offset) {
        this.offset = offset;
        return this;
    };
    BearWorkspaceFilterElementsQuery.prototype.query = function () {
        return __awaiter(this, void 0, void 0, function () {
            var selectedElements;
            return __generator(this, function (_a) {
                if (isAttributeFilter(this.filter)) {
                    selectedElements = filterAttributeElements(this.filter);
                    if (isAttributeElementsByRef(selectedElements)) {
                        return [2 /*return*/, this.resultForElementsByRef(selectedElements)];
                    }
                    return [2 /*return*/, this.resultForElementsByValue(selectedElements)];
                }
                else {
                    return [2 /*return*/, this.elementsQuery.withDateFilters([this.filter]).query()];
                }
                return [2 /*return*/];
            });
        });
    };
    BearWorkspaceFilterElementsQuery.prototype.resultForElementsByRef = function (selectedElements) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (selectedElements.uris.length) {
                    return [2 /*return*/, this.elementsQuery
                            .withOptions({
                            uris: selectedElements.uris,
                        })
                            .withOffset(this.offset)
                            .withLimit(this.limit)
                            .query()];
                }
                // Filter with empty selection resolves to empty values
                return [2 /*return*/, Promise.resolve(new InMemoryPaging([], this.limit, this.offset))];
            });
        });
    };
    BearWorkspaceFilterElementsQuery.prototype.resultForElementsByValue = function (selectedElements) {
        return __awaiter(this, void 0, void 0, function () {
            var items;
            return __generator(this, function (_a) {
                items = selectedElements.values.map(function (element) { return ({
                    title: element,
                    uri: element,
                }); });
                return [2 /*return*/, Promise.resolve(new InMemoryPaging(items, this.limit, this.offset))];
            });
        });
    };
    return BearWorkspaceFilterElementsQuery;
}());
//# sourceMappingURL=index.js.map