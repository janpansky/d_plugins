import { __awaiter, __generator } from "tslib";
// (C) 2019-2022 GoodData Corporation
import { ServerPaging } from "@gooddata/sdk-backend-base";
import { NotSupported, } from "@gooddata/sdk-backend-spi";
import { convertUserProject } from "../../convertors/toBackend/WorkspaceConverter";
import { userLoginMd5FromAuthenticatedPrincipal } from "../../utils/api";
import { BearWorkspace } from "../workspace";
var BearWorkspaceQueryFactory = /** @class */ (function () {
    function BearWorkspaceQueryFactory(authCall) {
        this.authCall = authCall;
    }
    BearWorkspaceQueryFactory.prototype.forUser = function (userId) {
        return new BearWorkspaceQuery(this.authCall, userId);
    };
    BearWorkspaceQueryFactory.prototype.forCurrentUser = function () {
        return new BearWorkspaceQuery(this.authCall);
    };
    return BearWorkspaceQueryFactory;
}());
export { BearWorkspaceQueryFactory };
var BearWorkspaceQuery = /** @class */ (function () {
    function BearWorkspaceQuery(authCall, userId) {
        this.authCall = authCall;
        this.userId = userId;
        this.limit = 100;
        this.offset = 0;
        this.search = undefined;
    }
    BearWorkspaceQuery.prototype.withLimit = function (limit) {
        this.limit = limit;
        return this;
    };
    BearWorkspaceQuery.prototype.withOffset = function (offset) {
        this.offset = offset;
        return this;
    };
    BearWorkspaceQuery.prototype.withParent = function () {
        throw new NotSupported("not supported");
    };
    BearWorkspaceQuery.prototype.withSearch = function (search) {
        this.search = search;
        return this;
    };
    BearWorkspaceQuery.prototype.query = function () {
        return this.queryWorker();
    };
    BearWorkspaceQuery.prototype.queryWorker = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, ServerPaging.for(function (_a) {
                        var limit = _a.limit, offset = _a.offset;
                        return __awaiter(_this, void 0, void 0, function () {
                            var data, _b, items, totalCount;
                            var _this = this;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0: return [4 /*yield*/, this.authCall(function (sdk, _a) {
                                            var getPrincipal = _a.getPrincipal;
                                            return __awaiter(_this, void 0, void 0, function () {
                                                var userId, _b;
                                                return __generator(this, function (_c) {
                                                    switch (_c.label) {
                                                        case 0:
                                                            _b = this.userId;
                                                            if (_b) return [3 /*break*/, 2];
                                                            return [4 /*yield*/, userLoginMd5FromAuthenticatedPrincipal(getPrincipal)];
                                                        case 1:
                                                            _b = (_c.sent());
                                                            _c.label = 2;
                                                        case 2:
                                                            userId = _b;
                                                            return [2 /*return*/, sdk.project.getProjectsWithPaging(userId, offset, limit, this.search)];
                                                    }
                                                });
                                            });
                                        })];
                                    case 1:
                                        data = _c.sent();
                                        _b = data.userProjects, items = _b.items, totalCount = _b.paging.totalCount;
                                        return [2 /*return*/, {
                                                items: items.map(function (item) {
                                                    var descriptor = convertUserProject(item);
                                                    return new BearWorkspace(_this.authCall, descriptor.id, descriptor);
                                                }),
                                                totalCount: totalCount,
                                            }];
                                }
                            });
                        });
                    }, this.limit, this.offset)];
            });
        });
    };
    return BearWorkspaceQuery;
}());
//# sourceMappingURL=index.js.map