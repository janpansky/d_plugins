import { __assign, __awaiter, __generator } from "tslib";
// (C) 2019-2023 GoodData Corporation
import { factory as createSdk } from "@gooddata/api-client-bear";
import { NotAuthenticated, isNotAuthenticated, } from "@gooddata/sdk-backend-spi";
import invariant from "ts-invariant";
import isEmpty from "lodash/isEmpty";
import isError from "lodash/isError";
import { convertApiError, isApiResponseError } from "../utils/errorHandling";
import { BearWorkspace } from "./workspace";
import { BearWorkspaceQueryFactory } from "./workspaces";
import { BearUserService } from "./user";
import { convertInsight } from "../convertors/toBackend/InsightConverter";
import { sanitizeDrillingActivationPostMessageData } from "./drillingPostMessageData";
import { NoopAuthProvider, AuthProviderCallGuard, } from "@gooddata/sdk-backend-base";
import { BearOrganization, BearOrganizations } from "./organization";
import packageJson from "../../package.json";
import { BearEntitlements } from "./entitlements";
var CAPABILITIES = {
    canCalculateGrandTotals: true,
    canCalculateSubTotals: true,
    canCalculateTotals: true,
    canCalculateNativeTotals: true,
    canExportCsv: true,
    canExportXlsx: true,
    canSortData: true,
    canTransformExistingResult: false,
    canWorkspaceManagerSeeEverySharedObject: false,
    maxDimensions: 2,
    supportsElementUris: true,
    supportsObjectUris: true,
    supportsCsvUploader: true,
    supportsLegacyReports: true,
    supportsRankingFilter: true,
    supportsRankingFilterWithMeasureValueFilter: true,
    supportsElementsQueryParentFiltering: true,
    supportsKpiWidget: true,
    supportsWidgetEntity: true,
    supportsHyperlinkAttributeLabels: true,
    supportsGenericDateAttributeElements: true,
    supportsExplain: false,
    supportsAccessControl: true,
    usesStrictAccessControl: false,
    supportsOwners: true,
    allowsInconsistentRelations: false,
    supportsTimeGranularities: false,
    supportsHierarchicalWorkspaces: false,
    supportsCustomColorPalettes: true,
    supportsOrganizationSettings: false,
    supportsInlineMeasures: false,
    supportsBootstrapResource: true,
    supportsMetadataObjectLocking: true,
    supportsGranularAccessControl: false,
    supportsEveryoneUserGroupForAccessControl: true,
    supportsNonProductionDatasets: true,
    supportsShowAllAttributeValues: false,
    supportsSeparateLatitudeLongitudeLabels: false,
};
/**
 * This implementation of analytical backend uses the gooddata-js API client to realize the SPI.
 *
 * The only thing worth noting about this impl is the handling of SDK instance creation and authentication:
 *
 * - New instance of SDK is created for each instance of BearBackend; new instance of BearBackend is created
 *   every time onHostname, withCredentials or withTelemetry methods are called (similar to how we did it
 *   so far with the clone())
 *
 * - Authentication (login) WILL be done every time credentials are provided using the
 *   withCredentials. No other methods in the bear backend lead to login.
 *
 * - Authentication is done at construction time; the constructor MAY receive an instance of deferred authentication -
 *   this is to cater for cases when withCredentials is called, new instance of backend is returned and then
 *   someone calls withTelemetry on this instance â‡’ in that case there is no need to re-initiate login.
 *
 */
var BearBackend = /** @class */ (function () {
    function BearBackend(config, implConfig, telemetry, authProvider) {
        var _this = this;
        var _a, _b;
        this.capabilities = CAPABILITIES;
        this.isAuthenticated = function () { return __awaiter(_this, void 0, void 0, function () {
            var err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.authProvider.getCurrentPrincipal({ client: this.sdk, backend: this })];
                    case 1: 
                    // the return await is crucial here so that we also catch the async errors
                    return [2 /*return*/, _a.sent()];
                    case 2:
                        err_1 = _a.sent();
                        if (isNotAuthenticatedResponse(err_1)) {
                            return [2 /*return*/, null];
                        }
                        throw err_1;
                    case 3: return [2 /*return*/];
                }
            });
        }); };
        this.authenticate = function (force) {
            if (!force) {
                return _this.authApiCall(function (sdk) { return __awaiter(_this, void 0, void 0, function () {
                    var principal;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.authProvider.getCurrentPrincipal({ client: sdk, backend: this })];
                            case 1:
                                principal = _a.sent();
                                invariant(principal, "Principal must be defined");
                                return [2 /*return*/, principal];
                        }
                    });
                }); });
            }
            return _this.triggerAuthentication(true);
        };
        /**
         * Perform API call that requires authentication. The call will be decorated with error handling
         * such that not authenticated errors will trigger authentication flow AND other errors will be
         * converted using the provided converter and throw.
         *
         * @param call - a call which requires an authenticated session
         * @param errorConverter - converter from rest client errors to analytical backend errors
         */
        this.authApiCall = function (call, errorConverter) {
            if (errorConverter === void 0) { errorConverter = convertApiError; }
            return __awaiter(_this, void 0, void 0, function () {
                var _a, _b, err_2, _c, _d, err2_1;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            _e.trys.push([0, 3, , 10]);
                            _a = call;
                            _b = [this.sdk];
                            return [4 /*yield*/, this.getAsyncCallContext()];
                        case 1: return [4 /*yield*/, _a.apply(void 0, _b.concat([_e.sent()]))];
                        case 2: 
                        // the return await is crucial here so that we also catch the async errors
                        return [2 /*return*/, _e.sent()];
                        case 3:
                            err_2 = _e.sent();
                            invariant(isError(err_2)); // if this bombs, the code in the try block threw something strange
                            // if we receive some other error than missing auth, we fail fast: no need to try the auth
                            // one more time, since it was not the problem in the first place
                            if (!isNotAuthenticatedResponse(err_2)) {
                                throw this.handleNotAuthenticated(errorConverter(err_2));
                            }
                            _e.label = 4;
                        case 4:
                            _e.trys.push([4, 8, , 9]);
                            return [4 /*yield*/, this.triggerAuthentication()];
                        case 5:
                            _e.sent();
                            _c = call;
                            _d = [this.sdk];
                            return [4 /*yield*/, this.getAsyncCallContext()];
                        case 6: return [4 /*yield*/, _c.apply(void 0, _d.concat([_e.sent()]))];
                        case 7: 
                        // the return await is crucial here so that we also catch the async errors
                        return [2 /*return*/, _e.sent()];
                        case 8:
                            err2_1 = _e.sent();
                            invariant(isError(err2_1)); // if this bombs, the code in the try block threw something strange
                            throw this.handleNotAuthenticated(errorConverter(err2_1));
                        case 9: return [3 /*break*/, 10];
                        case 10: return [2 /*return*/];
                    }
                });
            });
        };
        this.getAuthenticationContext = function () { return ({ client: _this.sdk, backend: _this }); };
        this.triggerAuthentication = function (reset) {
            if (reset === void 0) { reset = false; }
            return __awaiter(_this, void 0, void 0, function () {
                var e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.authProvider) {
                                throw new NotAuthenticated("Backend is not set up with authentication provider.");
                            }
                            if (reset) {
                                this.authProvider.reset();
                            }
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.authProvider.authenticate(this.getAuthenticationContext())];
                        case 2: 
                        // the return await is crucial here so that we also catch the async errors
                        return [2 /*return*/, _a.sent()];
                        case 3:
                            e_1 = _a.sent();
                            invariant(isError(e_1)); // if this bombs, the code in the try block threw something strange
                            throw this.handleNotAuthenticated(convertApiError(e_1));
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Triggers onNotAuthenticated handler of the the authProvider if the provided error is an instance
         * of {@link @gooddata/sdk-backend-spi#NotAuthenticated}.
         *
         * @param err - error to observe and trigger handler for
         * @returns the original error to facilitate re-throwing
         */
        this.handleNotAuthenticated = function (err) {
            var _a, _b;
            if (isNotAuthenticated(err)) {
                (_b = (_a = _this.authProvider).onNotAuthenticated) === null || _b === void 0 ? void 0 : _b.call(_a, { client: _this.sdk, backend: _this }, err);
            }
            return err;
        };
        this.getAsyncCallContext = function () { return __awaiter(_this, void 0, void 0, function () {
            var getPrincipal;
            var _this = this;
            return __generator(this, function (_a) {
                getPrincipal = function () { return __awaiter(_this, void 0, void 0, function () {
                    var principal;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!this.authProvider) {
                                    throw new NotAuthenticated("Cannot obtain principal without an authProvider.");
                                }
                                return [4 /*yield*/, this.authProvider.getCurrentPrincipal({
                                        client: this.sdk,
                                        backend: this,
                                    })];
                            case 1:
                                principal = _a.sent();
                                return [2 /*return*/, principal !== null && principal !== void 0 ? principal : this.authProvider.authenticate(this.getAuthenticationContext())];
                        }
                    });
                }); };
                return [2 /*return*/, {
                        getPrincipal: getPrincipal,
                    }];
            });
        }); };
        this.config = configSanitize(config);
        this.implConfig = bearConfigSanitize(implConfig);
        this.telemetry = telemetrySanitize(telemetry);
        this.authProvider = authProvider || new NoopAuthProvider();
        this.sdk = newSdkInstance(this.config, this.implConfig, this.telemetry);
        // do the ajax setup without the need to call the ajaxSetup legacy function
        // this is useful when deriving new instance using withTelemetry and similar functions
        if (this.implConfig.ajaxSettings) {
            this.sdk.xhr.ajaxSetup(this.implConfig.ajaxSettings);
        }
        (_b = (_a = this.authProvider).initializeClient) === null || _b === void 0 ? void 0 : _b.call(_a, this.sdk);
        if (this.implConfig.onLegacyCallbacksReady) {
            var legacyFunctions = {
                openAsReport: function (workspace, insight) {
                    var visualizationObject = convertInsight(insight);
                    return _this.authApiCall(function (sdk) {
                        return sdk.md.openVisualizationAsReport(workspace, { visualizationObject: visualizationObject });
                    });
                },
                getBootstrapResource: function (options) {
                    return _this.authApiCall(function (sdk) { return sdk.user.getBootstrapResource(options); });
                },
                ajaxSetup: function (settings) {
                    // store the last used settings so that we can use them if copying this backend in withTelemetry for example
                    _this.lastAjaxSetupSettings = settings;
                    _this.sdk.xhr.ajaxSetup(settings);
                },
                log: function (uri, logMessages) { return _this.sdk.xhr.post(uri, { data: JSON.stringify({ logMessages: logMessages }) }); },
                updateProfileCurrentWorkspace: function (workspace, profileSetting) { return __awaiter(_this, void 0, void 0, function () {
                    var userId, newProfileSetting;
                    var _a, _b;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                userId = (_b = (_a = profileSetting.links) === null || _a === void 0 ? void 0 : _a.profile) === null || _b === void 0 ? void 0 : _b.split("/").pop();
                                invariant(userId, "Cannot obtain userId from IProfileSetting");
                                newProfileSetting = __assign(__assign({}, profileSetting), { currentProjectUri: "/gdc/projects/" + workspace });
                                return [4 /*yield*/, this.authApiCall(function (sdk) {
                                        return sdk.user.updateProfileSettings(userId, { profileSetting: newProfileSetting });
                                    })];
                            case 1:
                                _c.sent();
                                return [2 /*return*/];
                        }
                    });
                }); },
                sanitizeDrillingActivationPostMessageData: function (workspace, postMessageData) {
                    return sanitizeDrillingActivationPostMessageData(workspace, postMessageData, function (workspace, identifiers) {
                        return _this.authApiCall(function (sdk) { return sdk.md.getUrisFromIdentifiers(workspace, identifiers); });
                    });
                },
                getProjectDashboards: function (workspace) {
                    return _this.authApiCall(function (sdk) { return sdk.md.getProjectDashboards(workspace); });
                },
                getUrisFromIdentifiers: function (workspace, identifiers) {
                    return _this.authApiCall(function (sdk) { return sdk.md.getUrisFromIdentifiers(workspace, identifiers); });
                },
                getObjectsByUri: function (workspace, uris) {
                    return _this.authApiCall(function (sdk) { return sdk.md.getObjects(workspace, uris); });
                },
                getVisualizationObject: function (workspace, uri) {
                    return _this.authApiCall(function (sdk) { return __awaiter(_this, void 0, void 0, function () {
                        var visObject;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, sdk.md.getObjects(workspace, [uri])];
                                case 1:
                                    visObject = (_a.sent())[0];
                                    return [2 /*return*/, visObject];
                            }
                        });
                    }); });
                },
                getUISettings: function () {
                    return _this.sdk.xhr
                        .get("/gdc/account/organization/settings")
                        .then(function (response) { return response.getData(); });
                },
                isDomainAdmin: function (domainUri) {
                    return _this.authApiCall(function (sdk) {
                        return sdk.xhr
                            .get(domainUri + "/config")
                            .then(function (_) { return true; })
                            .catch(function (error) {
                            if (isApiResponseError(error)) {
                                // when user _is not_ domain admin, then attempting to retrieve domain config
                                // will fail fast with 403
                                return error.response.status !== 403;
                            }
                            return true;
                        });
                    });
                },
            };
            this.implConfig.onLegacyCallbacksReady(legacyFunctions);
        }
    }
    BearBackend.prototype.onHostname = function (hostname) {
        return new BearBackend(__assign(__assign({}, this.config), { hostname: hostname }), this.implConfig, this.telemetry);
    };
    BearBackend.prototype.withTelemetry = function (componentName, props) {
        return new BearBackend(this.config, __assign(__assign({}, this.implConfig), { ajaxSettings: this.lastAjaxSetupSettings }), { componentName: componentName, props: Object.keys(props) }, this.authProvider);
    };
    BearBackend.prototype.withAuthentication = function (provider) {
        var guardedAuthProvider = new AuthProviderCallGuard(provider);
        return new BearBackend(this.config, this.implConfig, this.telemetry, guardedAuthProvider);
    };
    BearBackend.prototype.deauthenticate = function () {
        if (!this.authProvider) {
            throw new NotAuthenticated("Backend is not set up with authentication provider.");
        }
        return this.authProvider.deauthenticate(this.getAuthenticationContext());
    };
    BearBackend.prototype.organization = function (organizationId) {
        return new BearOrganization(this.authApiCall, organizationId);
    };
    BearBackend.prototype.organizations = function () {
        return new BearOrganizations(this.authApiCall);
    };
    BearBackend.prototype.entitlements = function () {
        return new BearEntitlements();
    };
    BearBackend.prototype.currentUser = function () {
        return new BearUserService(this.authApiCall);
    };
    BearBackend.prototype.workspace = function (id) {
        return new BearWorkspace(this.authApiCall, id);
    };
    BearBackend.prototype.workspaces = function () {
        return new BearWorkspaceQueryFactory(this.authApiCall);
    };
    return BearBackend;
}());
export { BearBackend };
//
// internals
//
function isNotAuthenticatedResponse(err) {
    return isApiResponseError(err) && err.response.status === 401;
}
function configSanitize(config) {
    return config !== null && config !== void 0 ? config : {};
}
function bearConfigSanitize(implConfig) {
    return implConfig !== null && implConfig !== void 0 ? implConfig : {};
}
function telemetrySanitize(telemetry) {
    return telemetry !== null && telemetry !== void 0 ? telemetry : {};
}
function newSdkInstance(config, implConfig, telemetry) {
    var sdk = implConfig.factory ? implConfig.factory() : createSdk();
    if (config.hostname) {
        sdk.config.setCustomDomain(config.hostname);
    }
    if (implConfig.packageName && implConfig.packageVersion) {
        sdk.config.setJsPackage(implConfig.packageName, implConfig.packageVersion);
    }
    else {
        sdk.config.setJsPackage(packageJson.name, packageJson.version);
    }
    if (telemetry.componentName) {
        sdk.config.setRequestHeader("X-GDC-JS-SDK-COMP", telemetry.componentName);
        if (telemetry.props && !isEmpty(telemetry.props)) {
            sdk.config.setRequestHeader("X-GDC-JS-SDK-COMP-PROPS", telemetry.props.join(","));
        }
    }
    return sdk;
}
//# sourceMappingURL=index.js.map