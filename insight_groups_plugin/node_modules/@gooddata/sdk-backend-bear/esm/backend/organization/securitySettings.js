import { __awaiter, __generator } from "tslib";
// (C) 2021-2022 GoodData Corporation
import { validatePluginUrlIsSane } from "@gooddata/sdk-backend-base";
import isEmpty from "lodash/isEmpty";
var SecuritySettingsService = /** @class */ (function () {
    /**
     * Constructs a new SecuritySettingsService
     * @param authCall - call guard to perform API calls through
     * @param scope - URI of the scope. For now only the organization (domain) URI is supported by the backend.
     *  The plan is to support also workspace URI and user profile URI.
     */
    function SecuritySettingsService(authCall, scope) {
        var _this = this;
        this.authCall = authCall;
        this.scope = scope;
        this.isUrlValid = function (url, context) {
            return _this.authCall(function (sdk) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, sdk.xhr
                            .postParsed("/gdc/securitySettings/validate", {
                            body: {
                                validationRequest: {
                                    type: context,
                                    value: url,
                                    scope: this.scope,
                                },
                            },
                        })
                            .then(function (_a) {
                            var validationResponse = _a.validationResponse;
                            return validationResponse.valid;
                        })];
                });
            }); });
        };
        this.isDashboardPluginUrlValid = function (url, workspace) { return __awaiter(_this, void 0, void 0, function () {
            var sanitizationError, setting;
            var _this = this;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        sanitizationError = validatePluginUrlIsSane(url);
                        if (sanitizationError) {
                            console.warn("Dashboard plugin URL is not valid: ", sanitizationError);
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, this.authCall(function (sdk) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    return [2 /*return*/, sdk.project.getConfigItem(workspace, "dashboardPluginHosts")];
                                });
                            }); })];
                    case 1:
                        setting = _b.sent();
                        return [2 /*return*/, validateAgainstList(url, (_a = setting === null || setting === void 0 ? void 0 : setting.settingItem) === null || _a === void 0 ? void 0 : _a.value)];
                }
            });
        }); };
    }
    return SecuritySettingsService;
}());
export { SecuritySettingsService };
export function validateAgainstList(url, listContent) {
    if (!listContent || isEmpty(listContent) || typeof listContent !== "string") {
        return false;
    }
    var allowedHosts = listContent
        .split(";")
        .map(function (entry) { return entry.trim(); })
        .filter(function (entry) { return !isEmpty(entry); });
    return allowedHosts.some(function (host) { return url.startsWith(host); });
}
//# sourceMappingURL=securitySettings.js.map