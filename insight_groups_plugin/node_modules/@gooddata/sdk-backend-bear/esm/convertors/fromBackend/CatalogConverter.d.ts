import { CatalogItemType, CatalogItem, ICatalogGroup, ICatalogAttribute, ICatalogFact, ICatalogMeasure, ICatalogDateDataset } from "@gooddata/sdk-model";
import { GdcCatalog, GdcMetadata, GdcDateDataSets } from "@gooddata/api-model-bear";
import { IDisplayFormByKey, IAttributeByKey } from "../../types/catalog";
export declare type CompatibleCatalogItemType = Exclude<CatalogItemType, "dateDataset">;
export declare type CompatibleCatalogItem = Exclude<CatalogItem, ICatalogDateDataset>;
export declare const isCompatibleCatalogItemType: (type: CatalogItemType) => type is "measure" | "fact" | "attribute";
export declare const convertItemType: (type: CompatibleCatalogItemType) => GdcCatalog.CatalogItemType;
export declare const convertAttribute: (attribute: GdcCatalog.ICatalogAttribute, displayForms: IDisplayFormByKey, attributes: IAttributeByKey) => ICatalogAttribute;
export declare const convertMeasure: (metric: GdcCatalog.ICatalogMetric) => ICatalogMeasure;
export declare const convertFact: (fact: GdcCatalog.ICatalogFact) => ICatalogFact;
export declare const convertDateDataset: (dateDataset: GdcDateDataSets.IDateDataSet, attributeById: IAttributeByKey) => ICatalogDateDataset;
export declare const convertWrappedFact: (fact: GdcMetadata.IWrappedFact) => ICatalogFact;
export declare const convertWrappedAttribute: (attribute: GdcMetadata.IWrappedAttribute) => ICatalogAttribute;
export declare const convertMetric: (metric: GdcMetadata.IWrappedMetric) => ICatalogMeasure;
export declare const convertGroup: (group: GdcCatalog.ICatalogGroup) => ICatalogGroup;
//# sourceMappingURL=CatalogConverter.d.ts.map