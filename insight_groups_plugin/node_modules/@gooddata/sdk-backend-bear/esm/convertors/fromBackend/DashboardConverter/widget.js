// (C) 2019-2022 GoodData Corporation
import { __assign } from "tslib";
import { GdcKpi, GdcExtendedDateFilters } from "@gooddata/api-model-bear";
import { uriRef } from "@gooddata/sdk-model";
import { convertVisualizationWidgetDrill, convertKpiDrill } from "./drills";
import { convertReferencesToUris } from "../ReferenceConverter";
import { deserializeProperties } from "../PropertiesConverter";
export var convertFilterReference = function (filterReference) {
    if (GdcExtendedDateFilters.isDateFilterReference(filterReference)) {
        return {
            type: "dateFilterReference",
            dataSet: uriRef(filterReference.dateFilterReference.dataSet),
        };
    }
    return {
        type: "attributeFilterReference",
        displayForm: uriRef(filterReference.attributeFilterReference.displayForm),
    };
};
export var convertVisualizationWidget = function (visualizationWidget) {
    var _a = visualizationWidget.visualizationWidget, _b = _a.content, visualization = _b.visualization, ignoreDashboardFilters = _b.ignoreDashboardFilters, dateDataSet = _b.dateDataSet, drills = _b.drills, references = _b.references, properties = _b.properties, configuration = _b.configuration, _c = _a.meta, identifier = _c.identifier, uri = _c.uri, title = _c.title, summary = _c.summary;
    var convertedProperties = convertReferencesToUris({
        properties: deserializeProperties(properties),
        references: references || {},
    }).properties;
    return __assign({ type: "insight", ref: uriRef(uri), identifier: identifier, uri: uri, title: title, description: summary, insight: uriRef(visualization), dateDataSet: dateDataSet ? uriRef(dateDataSet) : undefined, ignoreDashboardFilters: ignoreDashboardFilters
            ? ignoreDashboardFilters.map(convertFilterReference)
            : [], drills: drills ? drills.map(convertVisualizationWidgetDrill) : [], properties: convertedProperties }, (configuration ? { configuration: configuration } : {}));
};
export var convertKpi = function (kpi) {
    var _a = kpi.kpi, content = _a.content, _b = _a.content, dateDataSet = _b.dateDataSet, ignoreDashboardFilters = _b.ignoreDashboardFilters, drillTo = _b.drillTo, configuration = _b.configuration, _c = _a.meta, identifier = _c.identifier, uri = _c.uri, title = _c.title, summary = _c.summary;
    return __assign(__assign({ type: "kpi", ref: uriRef(uri), identifier: identifier, uri: uri, title: title, description: summary, dateDataSet: dateDataSet ? uriRef(dateDataSet) : undefined, ignoreDashboardFilters: ignoreDashboardFilters
            ? ignoreDashboardFilters.map(convertFilterReference)
            : [], drills: drillTo ? [convertKpiDrill(kpi)] : [] }, (configuration ? { configuration: configuration } : {})), { kpi: GdcKpi.isKpiContentWithoutComparison(content)
            ? {
                comparisonType: content.comparisonType,
                metric: uriRef(content.metric),
            }
            : {
                comparisonType: content.comparisonType,
                comparisonDirection: content.comparisonDirection,
                metric: uriRef(content.metric),
            } });
};
export var convertWidget = function (widget) {
    if (GdcKpi.isWrappedKpi(widget)) {
        return convertKpi(widget);
    }
    return convertVisualizationWidget(widget);
};
//# sourceMappingURL=widget.js.map