import { __assign, __extends } from "tslib";
// (C) 2007-2022 GoodData Corporation
import React from "react";
import { IntlProvider, createIntl } from "react-intl";
import { messagesMap } from "./messagesMap";
import { DefaultLocale, isLocale } from "./Locale";
import { wrapDisplayName } from "../react/wrapDisplayName";
/**
 * @internal
 */
export function createIntlMock(customMessages, locale) {
    if (customMessages === void 0) { customMessages = {}; }
    if (locale === void 0) { locale = "en-US"; }
    return createIntl({
        locale: locale,
        messages: __assign(__assign({}, messagesMap[locale]), customMessages),
    });
}
/**
 * @internal
 */
export function withIntl(WrappedComponent, customLocale, customMessages) {
    var WithIntl = /** @class */ (function (_super) {
        __extends(WithIntl, _super);
        function WithIntl() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        WithIntl.prototype.render = function () {
            var locale = customLocale ? customLocale : DefaultLocale;
            var messages = customMessages ? customMessages : messagesMap[locale];
            return (React.createElement(IntlProvider, { locale: locale, messages: messages },
                React.createElement(WrappedComponent, __assign({}, this.props))));
        };
        return WithIntl;
    }(React.Component));
    return wrapDisplayName("withIntl", WrappedComponent)(WithIntl);
}
/**
 * Resolves parameter into {@link ILocale} or {@link DefaultLocale}.
 *
 * @param locale - value of the locale to check for support
 *
 * @internal
 */
export var resolveLocale = function (locale) {
    return isLocale(locale) ? locale : DefaultLocale;
};
/**
 * Returns a string meant to represent a header with an empty value.
 * @param intl - the source of i18n strings
 * @internal
 */
export function emptyHeaderTitleFromIntl(intl) {
    return "(" + intl.formatMessage({ id: "visualization.emptyValue" }) + ")";
}
//# sourceMappingURL=intlUtils.js.map