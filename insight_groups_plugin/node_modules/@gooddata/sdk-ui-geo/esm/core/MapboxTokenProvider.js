import { __assign, __extends } from "tslib";
// (C) 2021-2022 GoodData Corporation
import React, { useContext } from "react";
import invariant from "ts-invariant";
/**
 * @alpha
 */
export var MapboxTokenContext = React.createContext({
    mapboxToken: undefined
});
/**
 * @alpha
 */
export var MapboxTokenProvider = function (_a) {
    var token = _a.token, children = _a.children;
    return (React.createElement(MapboxTokenContext.Provider, { value: { mapboxToken: token } }, children));
};
/**
 * @internal
 */
export function withMapboxToken(InnerComponent) {
    var _a;
    return _a = /** @class */ (function (_super) {
            __extends(MapboxTokenHOC, _super);
            function MapboxTokenHOC() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MapboxTokenHOC.prototype.render = function () {
                var mapboxToken = this.context.mapboxToken;
                var props = this.props;
                return (React.createElement(React.Fragment, null,
                    React.createElement(InnerComponent, __assign({}, props, { config: enrichMapboxToken(props.config, mapboxToken) }))));
            };
            return MapboxTokenHOC;
        }(React.Component)),
        _a.contextType = MapboxTokenContext,
        _a;
}
/**
 * @internal
 */
export function enrichMapboxToken(config, mapboxToken) {
    return mapboxToken
        ? __assign(__assign({}, (config || {})), { mapboxToken: (config === null || config === void 0 ? void 0 : config.mapboxToken) || mapboxToken })
        : config;
}
/**
 * @alpha
 */
export function useMapboxTokenStrict(mapboxToken) {
    var context = useContext(MapboxTokenContext);
    var token = mapboxToken !== null && mapboxToken !== void 0 ? mapboxToken : context.mapboxToken;
    invariant(token, "Mapbox token was not provided. Use <MapboxTokenProvider /> to provide token.");
    return token;
}
/**
 * @alpha
 */
export function useMapboxToken(mapboxToken) {
    var context = useContext(MapboxTokenContext);
    return mapboxToken !== null && mapboxToken !== void 0 ? mapboxToken : context.mapboxToken;
}
//# sourceMappingURL=MapboxTokenProvider.js.map