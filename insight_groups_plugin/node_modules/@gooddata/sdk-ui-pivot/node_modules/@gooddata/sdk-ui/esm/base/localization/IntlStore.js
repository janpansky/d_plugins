import { __assign } from "tslib";
// (C) 2007-2022 GoodData Corporation
import isEmpty from "lodash/isEmpty";
import { createIntl } from "react-intl";
import { DefaultLocale } from "./Locale";
import { messagesMap } from "./messagesMap";
var intlStore = {};
/**
 * Gets react-intl's IntlShape set up for the provided locale.
 *
 * @param locale - one of the supported locales, if not specified returns shape for `DefaultLocale`
 * @internal
 */
export function getIntl(locale) {
    if (locale === void 0) { locale = DefaultLocale; }
    var usedLocale = locale;
    if (isEmpty(locale)) {
        usedLocale = DefaultLocale;
    }
    return (intlStore[usedLocale] ||
        (intlStore[usedLocale] = createIntl({
            locale: usedLocale,
            messages: messagesMap[locale],
        })));
}
/**
 * Convenience function to return translated and formatted string for given key and locale; optionally specify
 * values of parameters to substitute in the translated string.
 *
 * @param translationId - id of the localized string
 * @param locale - target locale
 * @param values - parameters, optional
 *
 * @internal
 */
export function getTranslation(translationId, locale, values) {
    if (values === void 0) { values = {}; }
    var intl = getIntl(locale);
    var desc = typeof translationId === "object"
        ? __assign(__assign({}, translationId), { defaultMessage: translationId.id }) : { id: translationId, defaultMessage: translationId };
    return intl.formatMessage(desc, values);
}
//# sourceMappingURL=IntlStore.js.map