import { __assign, __read } from "tslib";
// (C) 2007-2022 GoodData Corporation
import memoizeOne from "memoize-one";
var getNewKey = function (key, stringToRemove) { return key.replace(stringToRemove, ""); };
var pickCorrectInsightWordingInner = function (translations, isEnabledInsightToReport) {
    var modifiedTranslations = {};
    Object.keys(translations).forEach(function (key) {
        if (key.includes("|report") || key.includes("|insight")) {
            var newKey = getNewKey(key, isEnabledInsightToReport ? "|report" : "|insight");
            modifiedTranslations[newKey] = translations[key];
        }
    });
    return __assign(__assign({}, translations), modifiedTranslations);
};
/**
 * Even this simple translations-reference-based cache is very effective as most of the time the 'translations'
 * objects come from some static constant.
 */
var memoizedPickCorrectInsightWordingInner = memoizeOne(pickCorrectInsightWordingInner);
/**
 * @beta
 */
export var pickCorrectInsightWording = function (translations, settings) {
    var isEnabledInsightToReport = !!(settings === null || settings === void 0 ? void 0 : settings.enableInsightToReport);
    return memoizedPickCorrectInsightWordingInner(translations, isEnabledInsightToReport);
};
var pickCorrectMetricWordingInner = function (translations, isEnabledRenamingMeasureToMetric) {
    var modifiedTranslations = {};
    Object.keys(translations).forEach(function (key) {
        if (key.includes("._metric") || key.includes("._measure")) {
            var newKey = getNewKey(key, isEnabledRenamingMeasureToMetric ? "._metric" : "._measure");
            modifiedTranslations[newKey] = translations[key];
        }
    });
    return __assign(__assign({}, translations), modifiedTranslations);
};
/**
 * Even this simple translations-reference-based cache is very effective as most of the time the 'translations'
 * objects come from some static constant.
 */
var memoizedPickCorrectMetricWordingInner = memoizeOne(pickCorrectMetricWordingInner);
/**
 * The function to pick correct wording 'measure' or 'metric'
 * @beta
 */
export var pickCorrectMetricWording = function (translations, settings) {
    var isEnabledRenamingMeasureToMetric = !!(settings === null || settings === void 0 ? void 0 : settings.enableRenamingMeasureToMetric);
    return memoizedPickCorrectMetricWordingInner(translations, isEnabledRenamingMeasureToMetric);
};
/**
 * @beta
 */
export var pickCorrectWording = function (translations, settings) {
    return pickCorrectMetricWording(pickCorrectInsightWording(translations, settings), settings);
};
/**
 * @beta
 */
export var removeAllInsightToReportTranslations = function (translations) {
    return Object.fromEntries(Object.entries(translations).filter(function (_a) {
        var _b = __read(_a, 1), key = _b[0];
        return !key.includes("|report") && !key.includes("|insight");
    }));
};
/**
 * The function to remove all translation keys that contain special suffixes "|report", "|insight", "._measure" or "._metric"
 * @beta
 */
export var removeAllWordingTranslationsWithSpecialSuffix = function (translations) {
    return Object.fromEntries(Object.entries(translations).filter(function (_a) {
        var _b = __read(_a, 1), key = _b[0];
        return !key.includes("|report") &&
            !key.includes("|insight") &&
            !key.includes("._measure") &&
            !key.includes("._metric");
    }));
};
//# sourceMappingURL=utils.js.map