// (C) 2019-2022 GoodData Corporation
import { __awaiter, __generator } from "tslib";
import partial from "lodash/partial";
import last from "lodash/last";
/**
 * Resolves LCM workspace identifiers. This function will use the data product and client information
 * and consult the backend in order to obtain identifier of workspace contains analytics for that
 * data product & client combination.
 *
 * Note that at the moment only the bear Analytical Backend supports the workspace identification using
 * LCM workspace identifiers. Attempting to use this function for other backends will yield empty
 * result.
 *
 * @param backend - analytical backend to resolve client workspace identifiers on
 * @param clientWorkspace - client workspace identifiers; must contain data product and client identifier
 * @returns resolved IClientWorkspaceIdentifiers or an empty object if resolution is not possible
 * @alpha
 */
export function resolveLCMWorkspaceIdentifiers(
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
backend, _a) {
    var client = _a.client, dataProduct = _a.dataProduct, workspace = _a.workspace;
    return __awaiter(this, void 0, void 0, function () {
        var projectLcmIdentifiers;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, getProjectLcmIdentifiers(backend, workspace, dataProduct, client)];
                case 1:
                    projectLcmIdentifiers = _b.sent();
                    if (!projectLcmIdentifiers) {
                        return [2 /*return*/, {}];
                    }
                    return [2 /*return*/, getLCMWorkspaceIdentifiersFromProjectLcmIdentifiers(projectLcmIdentifiers)];
            }
        });
    });
}
function emptyPromise() {
    return Promise.resolve();
}
function unwrapDecoratedBackend(backend) {
    if (backend === null || backend === void 0 ? void 0 : backend.decorated) {
        return unwrapDecoratedBackend(backend.decorated);
    }
    return backend;
}
function getBackendAuthApiCallPrivateMethod(backend) {
    var _a;
    return (_a = backend.authApiCall) !== null && _a !== void 0 ? _a : emptyPromise;
}
function extractDomainIdFromPrincipal(getPrincipal) {
    var _a, _b, _c, _d;
    return __awaiter(this, void 0, void 0, function () {
        var principal, domainLink;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0: return [4 /*yield*/, getPrincipal()];
                case 1:
                    principal = _e.sent();
                    domainLink = (_c = (_b = (_a = principal.userMeta) === null || _a === void 0 ? void 0 : _a.links) === null || _b === void 0 ? void 0 : _b.domain) !== null && _c !== void 0 ? _c : "";
                    return [2 /*return*/, (_d = last(domainLink.split("/"))) !== null && _d !== void 0 ? _d : null];
            }
        });
    });
}
function getBearClientProjectLcmIdentifiersMethod(client, getPrincipal) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var method, domainId, _b, methodWithSetDomain;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    method = (_a = client === null || client === void 0 ? void 0 : client.project) === null || _a === void 0 ? void 0 : _a.getProjectLcmIdentifiers.bind(client === null || client === void 0 ? void 0 : client.project);
                    if (!getPrincipal) return [3 /*break*/, 2];
                    return [4 /*yield*/, extractDomainIdFromPrincipal(getPrincipal)];
                case 1:
                    _b = _c.sent();
                    return [3 /*break*/, 3];
                case 2:
                    _b = null;
                    _c.label = 3;
                case 3:
                    domainId = _b;
                    methodWithSetDomain = partial(method, domainId);
                    return [2 /*return*/, methodWithSetDomain !== null && methodWithSetDomain !== void 0 ? methodWithSetDomain : emptyPromise];
            }
        });
    });
}
function getProjectLcmIdentifiers(backend, projectId, productId, clientId) {
    return __awaiter(this, void 0, void 0, function () {
        var unwrappedBackend, authApiCall;
        var _this = this;
        return __generator(this, function (_a) {
            unwrappedBackend = unwrapDecoratedBackend(backend);
            authApiCall = getBackendAuthApiCallPrivateMethod(unwrappedBackend);
            return [2 /*return*/, authApiCall(function (client, _a) {
                    var getPrincipal = _a.getPrincipal;
                    return __awaiter(_this, void 0, void 0, function () {
                        var getProjectLcmIdentifiers;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0: return [4 /*yield*/, getBearClientProjectLcmIdentifiersMethod(client, getPrincipal)];
                                case 1:
                                    getProjectLcmIdentifiers = _b.sent();
                                    return [2 /*return*/, getProjectLcmIdentifiers(projectId, productId, clientId)];
                            }
                        });
                    });
                })];
        });
    });
}
function getLCMWorkspaceIdentifiersFromProjectLcmIdentifiers(projectLcmResponse) {
    var _a;
    var _b = (_a = projectLcmResponse === null || projectLcmResponse === void 0 ? void 0 : projectLcmResponse.projectLcm) !== null && _a !== void 0 ? _a : {}, client = _b.clientId, dataProduct = _b.dataProductId, segment = _b.segmentId, workspace = _b.projectId;
    return {
        dataProduct: dataProduct,
        client: client,
        segment: segment,
        workspace: workspace,
    };
}
//# sourceMappingURL=resolveLCMWorkspaceIdentifiers.js.map