import { __awaiter, __generator } from "tslib";
// (C) 2007-2022 GoodData Corporation
import once from "lodash/once";
import { bucketsFind, bucketTotals, sanitizeBucketTotals, } from "@gooddata/sdk-model";
import { BucketNames } from "@gooddata/sdk-ui";
function getScrollbarWidthBody() {
    var _a;
    var outer = document.createElement("div");
    outer.style.visibility = "hidden";
    outer.style.width = "100px";
    document.body.appendChild(outer);
    var widthNoScroll = outer.offsetWidth;
    // force scrollbars
    outer.style.overflow = "scroll";
    // add inner div
    var inner = document.createElement("div");
    inner.style.width = "100%";
    outer.appendChild(inner);
    var widthWithScroll = inner.offsetWidth;
    // remove divs
    (_a = outer.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(outer);
    return widthNoScroll - widthWithScroll;
}
/**
 * Returns the current actual scrollbar width.
 * For performance reasons this is memoized as the value is highly unlikely to change
 */
export var getScrollbarWidth = once(getScrollbarWidthBody);
export function sleep(delay) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve) {
                    setTimeout(resolve, delay);
                })];
        });
    });
}
/**
 * Get only valid totals from an execution definition given a list of sort items
 *
 * @param definition - an execution definition to sanitize
 * @param sortItems - a specification of the sort, if not provided definition.sortBy will be used
 * @param totals - totals to be sanitized, if not provided ATTRIBUTE bucket totals will be used
 */
export function sanitizeDefTotals(definition, sortItems, totals) {
    var buckets = definition.buckets, sortBy = definition.sortBy;
    var attributeBucket = bucketsFind(buckets, BucketNames.ATTRIBUTE);
    return attributeBucket
        ? sanitizeBucketTotals(attributeBucket, sortItems !== null && sortItems !== void 0 ? sortItems : sortBy, totals !== null && totals !== void 0 ? totals : bucketTotals(attributeBucket))
        : [];
}
//# sourceMappingURL=utils.js.map