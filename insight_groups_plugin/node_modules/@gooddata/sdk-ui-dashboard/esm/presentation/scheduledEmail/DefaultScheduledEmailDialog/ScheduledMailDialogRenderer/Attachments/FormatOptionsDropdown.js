import { __read } from "tslib";
// (C) 2022 GoodData Corporation
import * as React from "react";
import { useCallback, useState } from "react";
import { Dropdown, DropdownButton, DropdownList, SingleSelectListItem, Icon } from "@gooddata/sdk-ui-kit";
import { FormattedMessage, useIntl } from "react-intl";
import { ScheduleDropdown } from "./ScheduleDropdown";
import { useTheme } from "@gooddata/sdk-ui-theme-provider";
import { DEFAULT_DROPDOWN_ALIGN_POINTS, DEFAULT_DROPDOWN_ZINDEX } from "../../constants";
var ICON_SIZE_BUTTON = 18;
var DROPDOWN_WIDTH = 70;
export var FormatOptionsDropdown = function (props) {
    var _a, _b;
    var onApply = props.onApply;
    var intl = useIntl();
    var theme = useTheme();
    var FORMAT_VALUES = ["csv", "xlsx"];
    var _c = __read(useState(props.format), 2), format = _c[0], setFormat = _c[1];
    var _d = __read(useState(props.mergeHeaders), 2), mergeHeaders = _d[0], setMergeHeaders = _d[1];
    var _e = __read(useState(props.includeFilters), 2), includeFilters = _e[0], setIncludeFilters = _e[1];
    var canApply = format !== props.format ||
        mergeHeaders !== props.mergeHeaders ||
        includeFilters !== props.includeFilters;
    var handleOnApply = useCallback(function () {
        return onApply({
            format: format,
            mergeHeaders: mergeHeaders,
            includeFilters: includeFilters,
        });
    }, [format, mergeHeaders, includeFilters, onApply]);
    var handleOnCancel = useCallback(function () {
        setFormat(props.format);
        setMergeHeaders(props.mergeHeaders);
        setIncludeFilters(props.includeFilters);
    }, [props.format, props.mergeHeaders, props.includeFilters]);
    var renderBodyContentSelector = function () {
        return (React.createElement("div", { className: "gd-format-options-dropdown-selector" },
            React.createElement("span", { className: "input-label-text" },
                React.createElement(FormattedMessage, { id: "dialogs.schedule.email.insight.format" })),
            React.createElement("div", null,
                React.createElement(Dropdown, { overlayPositionType: "sameAsTarget", className: "s-format-options-dropdown", alignPoints: DEFAULT_DROPDOWN_ALIGN_POINTS, overlayZIndex: DEFAULT_DROPDOWN_ZINDEX, renderButton: function (_a) {
                        var isOpen = _a.isOpen, toggleDropdown = _a.toggleDropdown;
                        return (React.createElement(DropdownButton, { className: "s-format-options-format-dropdown-button", value: format.toUpperCase(), isOpen: isOpen, onClick: toggleDropdown }));
                    }, renderBody: function (_a) {
                        var closeDropdown = _a.closeDropdown;
                        return (React.createElement(DropdownList, { width: DROPDOWN_WIDTH, items: FORMAT_VALUES, renderItem: function (_a) {
                                var item = _a.item;
                                return (React.createElement(SingleSelectListItem, { className: "s-format-options-dropdown-content schedule-dropdown-ignore-click", title: item.toUpperCase(), onClick: function () {
                                        setFormat(item);
                                        closeDropdown();
                                    } }));
                            } }));
                    } }))));
    };
    var renderBodyContentSelectorOptions = function () {
        return (React.createElement("div", { className: "gd-format-options-dropdown-xlsx" },
            React.createElement("div", null,
                React.createElement("label", { className: "input-checkbox-label" },
                    React.createElement("input", { type: "checkbox", className: "input-checkbox s-attachments-merge-headers", checked: mergeHeaders, onChange: function (event) { return setMergeHeaders(event.target.checked); } }),
                    React.createElement("span", { className: "input-label-text" },
                        React.createElement(FormattedMessage, { id: "dialogs.schedule.email.attribute.merged" })))),
            React.createElement("div", null,
                React.createElement("label", { className: "input-checkbox-label s-attachments-include-filters" },
                    React.createElement("input", { type: "checkbox", className: "input-checkbox", checked: includeFilters, onChange: function (event) { return setIncludeFilters(event.target.checked); } }),
                    React.createElement("span", { className: "input-label-text" },
                        React.createElement(FormattedMessage, { id: "dialogs.schedule.email.show.filters" }))))));
    };
    return (React.createElement(ScheduleDropdown, { title: intl.formatMessage({ id: "dialogs.schedule.email.format.options" }), applyDisabled: !canApply, onApply: handleOnApply, onCancel: handleOnCancel, buttonClassName: "s-schedule-format-options-button", bodyClassName: "s-schedule-format-options-body", iconComponent: React.createElement(Icon.SettingsGear, { color: (_b = (_a = theme === null || theme === void 0 ? void 0 : theme.palette) === null || _a === void 0 ? void 0 : _a.complementary) === null || _b === void 0 ? void 0 : _b.c6, width: ICON_SIZE_BUTTON, height: ICON_SIZE_BUTTON }), contentComponent: React.createElement("div", { className: "gd-format-options-dropdown" },
            renderBodyContentSelector(),
            format === "xlsx" && renderBodyContentSelectorOptions()) }));
};
//# sourceMappingURL=FormatOptionsDropdown.js.map