// (C) 2019-2022 GoodData Corporation
import * as React from "react";
import { FormattedMessage } from "react-intl";
import identity from "lodash/identity";
import { objRefToString } from "@gooddata/sdk-model";
import { AttachmentsSelectionDropdown } from "./AttachmentsSelectionDropdown";
import { FormatOptionsDropdown } from "./FormatOptionsDropdown";
var AttachmentItem = function (_a) {
    var format = _a.format, children = _a.children;
    return (React.createElement("div", { className: "gd-dashboard-attachment s-gd-dashboard-attachment" },
        React.createElement("span", { className: "gd-dashboard-attachment-format" }, format),
        React.createElement("span", { className: "gd-dashboard-attachment-name" }, children)));
};
export var Attachments = function (props) {
    var dashboardTitle = props.dashboardTitle, dashboardSelected = props.dashboardSelected, widgetsSelected = props.widgetsSelected, _a = props.insightWidgets, insightWidgets = _a === void 0 ? [] : _a, configuration = props.configuration, canExportReport = props.canExportReport, onAttachmentsSelectionChanged = props.onAttachmentsSelectionChanged, onAttachmentsConfigurationChanged = props.onAttachmentsConfigurationChanged;
    var isSomeWidgetSelected = Object.values(widgetsSelected).some(identity);
    var selectedWidgetsTitles = insightWidgets
        .filter(function (widget) { return widgetsSelected[objRefToString(widget)]; })
        .map(function (widget) { return widget.title; });
    return (React.createElement("div", { className: "gd-input-component gd-schedule-email-attachments s-schedule-email-attachments" },
        React.createElement("label", { className: "gd-label" },
            React.createElement(FormattedMessage, { id: "dialogs.schedule.email.attachments.label" })),
        React.createElement("div", { className: "gd-dashboard-attachment-list" },
            React.createElement("div", { className: "gd-dashboard-attachment-list-content" },
                dashboardSelected && (React.createElement(AttachmentItem, { format: "pdf" },
                    React.createElement("span", { className: "shortened-name" }, dashboardTitle))),
                selectedWidgetsTitles.length !== 0 && (React.createElement(AttachmentItem, { format: configuration.format },
                    React.createElement("span", { className: "shortened-name", title: selectedWidgetsTitles.join(",\n") }, selectedWidgetsTitles.join(", ")),
                    selectedWidgetsTitles.length > 1 && (React.createElement("span", null, "(" + selectedWidgetsTitles.length + ")"))))),
            canExportReport && (React.createElement("div", { className: "gd-schedule-email-dialog-attachments" },
                React.createElement(AttachmentsSelectionDropdown, { dashboardTitle: dashboardTitle, dashboardSelected: dashboardSelected, insightWidgets: insightWidgets, widgetsSelected: widgetsSelected, onApply: onAttachmentsSelectionChanged }),
                isSomeWidgetSelected && (React.createElement(FormatOptionsDropdown, { format: configuration.format, mergeHeaders: configuration.mergeHeaders, includeFilters: configuration.includeFilters, onApply: onAttachmentsConfigurationChanged })))))));
};
//# sourceMappingURL=Attachments.js.map