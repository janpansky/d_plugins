// (C) 2022 GoodData Corporation
import { __read } from "tslib";
import React, { useCallback, useState } from "react";
import { FormattedMessage, useIntl } from "react-intl";
import { Button, Dialog, Typography, Tabs } from "@gooddata/sdk-ui-kit";
import { ScheduledEmails } from "./ScheduledEmails";
import { useScheduledEmailManagement } from "./useScheduledEmailManagement";
import { DeleteScheduleConfirmDialog } from "./DeleteScheduleConfirmDialog";
import { selectCurrentUser, useDashboardSelector, selectCanManageScheduledMail } from "../../../model";
import { areObjRefsEqual } from "@gooddata/sdk-model";
import { messages } from "../../../locales";
/**
 * @alpha
 */
export var ScheduledEmailManagementDialog = function (props) {
    var onAdd = props.onAdd, onEdit = props.onEdit, onDelete = props.onDeleteSuccess, onClose = props.onClose, onLoadError = props.onLoadError, onDeleteError = props.onDeleteError;
    var _a = __read(useState(null), 2), scheduledEmailToDelete = _a[0], setScheduledEmailToDelete = _a[1];
    var _b = __read(useState(true), 2), isLoading = _b[0], setIsLoading = _b[1];
    var _c = __read(useState([]), 2), scheduledEmailsByUser = _c[0], setScheduledEmailsByUser = _c[1];
    var _d = __read(useState([]), 2), scheduledEmails = _d[0], setScheduledEmails = _d[1];
    var _e = __read(useState(messages.scheduleManagementTabUser.id), 2), selectedTabId = _e[0], setSelectedTabId = _e[1];
    var _f = __read(useState(true), 2), isFirstLoaded = _f[0], setIsFirstLoaded = _f[1];
    var canManageScheduledMail = useDashboardSelector(selectCanManageScheduledMail);
    var currentUser = useDashboardSelector(selectCurrentUser);
    var intl = useIntl();
    var onLoadSuccess = useCallback(function (emails) {
        var emailsByUser = emails.filter(function (email) { var _a; return areObjRefsEqual(currentUser.ref, (_a = email.createdBy) === null || _a === void 0 ? void 0 : _a.ref); });
        setIsLoading(false);
        setScheduledEmails(emails);
        setScheduledEmailsByUser(canManageScheduledMail ? emailsByUser : emails);
        if (isFirstLoaded) {
            if (emailsByUser.length === 0 && canManageScheduledMail) {
                setSelectedTabId(messages.scheduleManagementTabAll.id);
            }
            setIsFirstLoaded(false);
        }
    }, []);
    var handleScheduleDelete = useCallback(function (scheduledEmail) {
        setScheduledEmailToDelete(scheduledEmail);
    }, []);
    var handleScheduleEdit = useCallback(function (scheduledEmail) {
        onEdit === null || onEdit === void 0 ? void 0 : onEdit(scheduledEmail);
    }, []);
    var handleScheduleDeleteSuccess = useCallback(function () {
        onDelete === null || onDelete === void 0 ? void 0 : onDelete();
        setScheduledEmailToDelete(null);
        setIsLoading(true);
    }, []);
    var handleTabChange = useCallback(function (tab) {
        setSelectedTabId(tab.id);
    }, []);
    useScheduledEmailManagement({
        loadScheduledMails: isLoading,
        onError: onLoadError,
        onSuccess: onLoadSuccess,
    });
    var noSchedulesMessageId = selectedTabId === messages.scheduleManagementTabAll.id
        ? messages.scheduleManagementNoSchedules.id
        : messages.scheduleManagementNoSchedulesByUser.id;
    return (React.createElement(React.Fragment, null,
        React.createElement(Dialog, { displayCloseButton: true, onCancel: onClose, className: "gd-scheduled-email-management-dialog s-scheduled-email-management-dialog" },
            React.createElement("div", { className: "gd-scheduled-email-management-dialog-title" },
                React.createElement(Typography, { tagName: "h3", className: "gd-dialog-header" },
                    React.createElement(FormattedMessage, { id: "dialogs.schedule.management.title" }))),
            !isFirstLoaded && canManageScheduledMail && (React.createElement(Tabs, { className: "gd-scheduled-email-management-dialog-tabs", tabs: [messages.scheduleManagementTabUser, messages.scheduleManagementTabAll], selectedTabId: selectedTabId, onTabSelect: handleTabChange })),
            React.createElement("div", { className: "gd-scheduled-emails-content" },
                React.createElement(ScheduledEmails, { onDelete: handleScheduleDelete, onEdit: handleScheduleEdit, isLoading: isLoading, scheduledEmails: selectedTabId === messages.scheduleManagementTabAll.id
                        ? scheduledEmails
                        : scheduledEmailsByUser, currentUserEmail: currentUser === null || currentUser === void 0 ? void 0 : currentUser.email, noSchedulesMessageId: noSchedulesMessageId, canManageScheduledMail: canManageScheduledMail })),
            React.createElement("div", { className: "gd-content-divider" }),
            React.createElement("div", { className: "gd-buttons" },
                React.createElement(Button, { onClick: onAdd, className: "gd-button-secondary gd-add-button s-add-button", iconLeft: "gd-icon-plus", value: intl.formatMessage({ id: "dialogs.schedule.management.addSchedule" }) }),
                React.createElement(Button, { onClick: onClose, className: "gd-button-secondary s-close-button", value: intl.formatMessage({ id: "close" }) }))),
        scheduledEmailToDelete && (React.createElement(DeleteScheduleConfirmDialog, { scheduledEmail: scheduledEmailToDelete, onCancel: function () { return setScheduledEmailToDelete(null); }, onSuccess: handleScheduleDeleteSuccess, onError: onDeleteError }))));
};
//# sourceMappingURL=ScheduledEmailManagementDialog.js.map