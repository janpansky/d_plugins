import { __read } from "tslib";
// (C) 2022 GoodData Corporation
import React from "react";
import classNames from "classnames";
import { useDashboardSelector, selectIsInEditMode } from "../../../model";
import { AttributeFilterDropZoneHint } from "./AttributeFilterDropZoneHint";
import { useDashboardDrag } from "../useDashboardDrag";
export function DraggableAttributeFilter(_a) {
    var FilterComponent = _a.FilterComponent, filter = _a.filter, filterIndex = _a.filterIndex, onAttributeFilterChanged = _a.onAttributeFilterChanged, onAttributeFilterAdded = _a.onAttributeFilterAdded;
    var isInEditMode = useDashboardSelector(selectIsInEditMode);
    var _b = __read(useDashboardDrag({
        dragItem: {
            type: "attributeFilter",
            filter: filter,
            filterIndex: filterIndex,
        },
    }, [filter, filterIndex]), 2), isDragging = _b[0].isDragging, dragRef = _b[1];
    var showDropZones = isInEditMode && !isDragging;
    return (React.createElement("div", { style: { position: "relative" } },
        showDropZones && (React.createElement(AttributeFilterDropZoneHint, { hintPosition: "prev", targetIndex: filterIndex, onAddAttributePlaceholder: onAttributeFilterAdded })),
        React.createElement("div", { className: classNames("dash-filters-notdate", "dash-filters-attribute", {
                "is-dragging": isDragging,
            }), ref: dragRef },
            React.createElement(FilterComponent, { filter: filter, onFilterChanged: onAttributeFilterChanged, isDraggable: isInEditMode })),
        showDropZones && (React.createElement(AttributeFilterDropZoneHint, { hintPosition: "next", targetIndex: filterIndex, onAddAttributePlaceholder: onAttributeFilterAdded }))));
}
//# sourceMappingURL=DraggableAttributeFilter.js.map