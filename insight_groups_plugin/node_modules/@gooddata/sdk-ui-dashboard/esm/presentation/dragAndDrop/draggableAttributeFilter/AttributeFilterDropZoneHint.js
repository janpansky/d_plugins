import { __read } from "tslib";
// (C) 2022 GoodData Corporation
import cx from "classnames";
import React from "react";
import { moveAttributeFilter, useDashboardDispatch } from "../../../model";
import { getDropZoneDebugStyle } from "../debug";
import { isAttributeFilterDraggableItem, isAttributeFilterPlaceholderDraggableItem } from "../types";
import { useDashboardDrop } from "../useDashboardDrop";
function getIgnoreIndexes(placement, position, targetIndex) {
    if (placement === "outside") {
        return [targetIndex];
    }
    if (position === "next") {
        return [targetIndex, targetIndex + 1];
    }
    return [targetIndex, targetIndex - 1];
}
export function AttributeFilterDropZoneHint(_a) {
    var _b = _a.placement, placement = _b === void 0 ? "inside" : _b, hintPosition = _a.hintPosition, targetIndex = _a.targetIndex, _c = _a.acceptPlaceholder, acceptPlaceholder = _c === void 0 ? true : _c, onAddAttributePlaceholder = _a.onAddAttributePlaceholder;
    var dispatch = useDashboardDispatch();
    var inactiveIndexes = getIgnoreIndexes(placement, hintPosition, targetIndex);
    var _d = __read(useDashboardDrop(acceptPlaceholder ? ["attributeFilter", "attributeFilter-placeholder"] : "attributeFilter", {
        canDrop: function (item) {
            if (isAttributeFilterDraggableItem(item)) {
                return !inactiveIndexes.includes(item.filterIndex);
            }
            return isAttributeFilterPlaceholderDraggableItem(item);
        },
        drop: function (item) {
            if (isAttributeFilterDraggableItem(item)) {
                var identifier = item.filter.attributeFilter.localIdentifier;
                dispatch(moveAttributeFilter(identifier, targetIndex));
            }
            if (isAttributeFilterPlaceholderDraggableItem(item) && onAddAttributePlaceholder) {
                var index = placement === "inside" && hintPosition === "next" ? targetIndex + 1 : targetIndex;
                return onAddAttributePlaceholder(index);
            }
        },
    }, [inactiveIndexes, targetIndex]), 2), _e = _d[0], canDrop = _e.canDrop, isOver = _e.isOver, dropRef = _d[1];
    var isActive = canDrop && isOver;
    var isHidden = !canDrop;
    var className = cx("attr-filter-dropzone", hintPosition, {
        outside: placement === "outside",
        hidden: isHidden,
    });
    var debugStyle = getDropZoneDebugStyle({ isOver: isOver });
    return (React.createElement("div", { className: className, style: debugStyle, ref: dropRef }, isActive && React.createElement("div", { className: "drop-hint" })));
}
//# sourceMappingURL=AttributeFilterDropZoneHint.js.map