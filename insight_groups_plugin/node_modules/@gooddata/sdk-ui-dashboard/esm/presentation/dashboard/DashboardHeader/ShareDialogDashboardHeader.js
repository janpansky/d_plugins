// (C) 2020-2022 GoodData Corporation
import React, { useCallback } from "react";
import { useToastMessage } from "@gooddata/sdk-ui-kit";
import { useDashboardSelector, selectIsShareDialogOpen, useDashboardDispatch, uiActions, selectPersistedDashboard, selectCurrentUserRef, useDashboardCommandProcessing, changeSharing, selectCanManageWorkspace, } from "../../../model";
import { ShareDialog } from "../../shareDialog";
import { useBackendStrict, useWorkspaceStrict } from "@gooddata/sdk-ui";
import { messages } from "../../../locales";
var useShareDialogDashboardHeader = function () {
    var dispatch = useDashboardDispatch();
    var _a = useToastMessage(), addSuccess = _a.addSuccess, addError = _a.addError;
    var isShareDialogOpen = useDashboardSelector(selectIsShareDialogOpen);
    var persistedDashboard = useDashboardSelector(selectPersistedDashboard);
    var currentUserRef = useDashboardSelector(selectCurrentUserRef);
    var isLockingSupported = useDashboardSelector(selectCanManageWorkspace);
    var backend = useBackendStrict();
    var workspace = useWorkspaceStrict();
    var runChangeSharing = useDashboardCommandProcessing({
        commandCreator: changeSharing,
        successEvent: "GDC.DASH/EVT.SHARING.CHANGED",
        errorEvent: "GDC.DASH/EVT.COMMAND.FAILED",
        onSuccess: function () {
            addSuccess(messages.messagesSharingChangedSuccess);
        },
        onError: function () {
            addError(messages.messagesSharingChangedError);
        },
    }).run;
    var closeShareDialog = useCallback(function () { return dispatch(uiActions.closeShareDialog()); }, [dispatch]);
    var onCloseShareDialog = useCallback(function () {
        closeShareDialog();
    }, [closeShareDialog]);
    var onApplyShareDialog = useCallback(function (payload) {
        closeShareDialog();
        runChangeSharing(payload);
    }, [closeShareDialog, runChangeSharing]);
    var onErrorShareDialog = useCallback(function () {
        dispatch(uiActions.closeShareDialog());
        addError(messages.messagesSharingDialogError);
    }, [dispatch, addError]);
    return {
        backend: backend,
        workspace: workspace,
        isShareDialogOpen: isShareDialogOpen,
        persistedDashboard: persistedDashboard,
        currentUserRef: currentUserRef,
        onCloseShareDialog: onCloseShareDialog,
        onApplyShareDialog: onApplyShareDialog,
        onErrorShareDialog: onErrorShareDialog,
        isLockingSupported: isLockingSupported,
    };
};
/**
 * @internal
 */
export var ShareDialogDashboardHeader = function () {
    var _a = useShareDialogDashboardHeader(), backend = _a.backend, workspace = _a.workspace, isShareDialogOpen = _a.isShareDialogOpen, persistedDashboard = _a.persistedDashboard, currentUserRef = _a.currentUserRef, onCloseShareDialog = _a.onCloseShareDialog, onApplyShareDialog = _a.onApplyShareDialog, onErrorShareDialog = _a.onErrorShareDialog, isLockingSupported = _a.isLockingSupported;
    if (!isShareDialogOpen) {
        return null;
    }
    return (React.createElement(ShareDialog, { backend: backend, workspace: workspace, isVisible: isShareDialogOpen, currentUserRef: currentUserRef, sharedObject: persistedDashboard, onCancel: onCloseShareDialog, onApply: onApplyShareDialog, onError: onErrorShareDialog, isLockingSupported: isLockingSupported }));
};
//# sourceMappingURL=ShareDialogDashboardHeader.js.map