import { __read } from "tslib";
// (C) 2022 GoodData Corporation
import React, { useState, useEffect, useCallback } from "react";
import { useIntl } from "react-intl";
import { insightTitle, insightVisualizationUrl, insightUpdated, insightIsLocked, isUriRef, } from "@gooddata/sdk-model";
import debounce from "lodash/debounce";
import range from "lodash/range";
import { useBackendStrict, usePagedResource, useWorkspaceStrict } from "@gooddata/sdk-ui";
import { InsightListItem, DropdownList } from "@gooddata/sdk-ui-kit";
import { InsightListNoData } from "./InsightListNoData";
import { selectCurrentUserRef, useDashboardSelector } from "../../model";
import { messages } from "../../locales";
var ITEMS_PER_PAGE = 50;
var ITEM_HEIGHT = 40;
var LIST_WIDTH = 229;
export function getInsightListSourceItem(insight) {
    var insightUrl = insightVisualizationUrl(insight);
    var insightType = insightUrl === null || insightUrl === void 0 ? void 0 : insightUrl.split(":")[1];
    return {
        insight: insight,
        insightType: insightType,
    };
}
var dropdownTabsTranslationIds = [messages.tabsMy, messages.tabsAll];
/**
 * @internal
 */
export var InsightList = function (_a) {
    var height = _a.height, searchAutofocus = _a.searchAutofocus, noDataButton = _a.noDataButton;
    var intl = useIntl();
    var backend = useBackendStrict();
    var workspaceId = useWorkspaceStrict();
    var _b = __read(useState(false), 2), initialLoadCompleted = _b[0], setInitialLoadCompleted = _b[1];
    var _c = __read(useState([0]), 2), pagesToLoad = _c[0], setPagesToLoad = _c[1]; // first page loaded
    var _d = __read(useState(""), 2), search = _d[0], setSearch = _d[1];
    var _e = __read(useState(messages.tabsMy.id), 2), selectedTabId = _e[0], setSelectedTabId = _e[1];
    var userRef = useDashboardSelector(selectCurrentUserRef);
    var userUri = isUriRef(userRef) ? userRef.uri : undefined;
    var params = pagesToLoad.map(function (pageNumber) { return ({
        limit: ITEMS_PER_PAGE,
        offset: pageNumber * ITEMS_PER_PAGE,
        title: search,
        author: selectedTabId === messages.tabsMy.id && !search ? userUri : undefined,
    }); });
    var _f = usePagedResource(function (_a) {
        var limit = _a.limit, offset = _a.offset, title = _a.title, author = _a.author;
        var options = {
            limit: limit,
            offset: offset,
            author: author,
            title: title,
            orderBy: "updated",
        };
        return backend.workspace(workspaceId).insights().getInsights(options);
    }, params, [backend, pagesToLoad, search, selectedTabId], [search, selectedTabId, pagesToLoad.length === 0]), insights = _f.items, totalInsightsCount = _f.totalItemsCount, isLoading = _f.isLoading;
    useEffect(function () {
        if (!initialLoadCompleted && typeof totalInsightsCount !== "undefined") {
            setInitialLoadCompleted(true);
            if (totalInsightsCount === 0) {
                // when the user has no insights of their own, switch to the All tab
                setSelectedTabId(messages.tabsAll.id);
            }
        }
    }, [initialLoadCompleted, totalInsightsCount]);
    var onSearch = useCallback(debounce(function (searchString) {
        setPagesToLoad([0]);
        setSearch(searchString);
    }, 250), []);
    var itemHeightGetter = function (index) {
        // Modify item heights for first/last item so that their hover states don't overlap.
        // Also @see styles and keep this value in sync with what's in css styles
        // for is-first and is-last in visualization items in the list
        var firstLastItemMargin = 10;
        var isFirstOrLast = totalInsightsCount ? index === 0 || index === totalInsightsCount - 1 : false;
        return isFirstOrLast ? ITEM_HEIGHT + firstLastItemMargin : ITEM_HEIGHT;
    };
    var TABS_AND_SEARCHFIELD_HEIGHT = 70;
    var SEARCHFIELD_HEIGHT = 47;
    // need to subtract height of controls from the overall size which was measured
    var controlsHeight = search ? SEARCHFIELD_HEIGHT : TABS_AND_SEARCHFIELD_HEIGHT;
    return (React.createElement(DropdownList, { width: LIST_WIDTH, height: height - controlsHeight, isMobile: false, isLoading: isLoading && insights.length === 0, showSearch: initialLoadCompleted, searchString: search, searchFieldSize: "small", searchPlaceholder: intl.formatMessage({ id: "search_insights" }), onSearch: onSearch, disableAutofocus: !searchAutofocus, showTabs: initialLoadCompleted && !search, tabs: backend.capabilities.supportsOwners && userUri ? dropdownTabsTranslationIds : undefined, selectedTabId: selectedTabId, onTabSelect: function (_a) {
            var id = _a.id;
            setPagesToLoad([0]);
            setSelectedTabId(id);
        }, itemHeight: ITEM_HEIGHT, itemHeightGetter: itemHeightGetter, items: insights, itemsCount: totalInsightsCount, renderItem: function (_a) {
            var insight = _a.item, width = _a.width;
            if (!insight) {
                return React.createElement(InsightListItem, { isLoading: true });
            }
            var title = insightTitle(insight);
            var insightListSourceItem = getInsightListSourceItem(insight);
            return (React.createElement(InsightListItem, { title: title, type: insightListSourceItem.insightType, width: width, updated: insightUpdated(insightListSourceItem.insight), isLocked: insightIsLocked(insightListSourceItem.insight) }));
        }, renderNoData: function (_a) {
            var hasNoMatchingData = _a.hasNoMatchingData;
            return (React.createElement(InsightListNoData, { isUserInsights: selectedTabId === messages.tabsMy.id, hasNoMatchingData: hasNoMatchingData, button: noDataButton }));
        }, onScrollEnd: function (startIndex, endIndex) {
            var startPage = Math.floor(startIndex / ITEMS_PER_PAGE);
            var endPage = Math.floor(endIndex / ITEMS_PER_PAGE);
            var pagesToLoad = range(startPage, endPage + 1);
            setPagesToLoad(pagesToLoad);
        } }));
};
//# sourceMappingURL=InsightList.js.map