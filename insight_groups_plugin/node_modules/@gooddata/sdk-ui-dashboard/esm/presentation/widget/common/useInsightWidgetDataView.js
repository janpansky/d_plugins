// (C) 2022 GoodData Corporation
import { useBackendStrict, useExecutionDataView, useWorkspaceStrict, } from "@gooddata/sdk-ui";
import { useMemo } from "react";
import { insightSetFilters } from "@gooddata/sdk-model";
import stringify from "json-stable-stringify";
import { selectInsightByRef, useDashboardSelector } from "../../../model";
import { useWidgetFilters } from "./useWidgetFilters";
/**
 * This hook provides an easy way to read a data view from insight widget.
 *
 * @param config - configuration of the hook
 *
 * @public
 */
export function useInsightWidgetDataView(config) {
    var insightWidget = config.insightWidget, onCancel = config.onCancel, onError = config.onError, onLoading = config.onLoading, onPending = config.onPending, onSuccess = config.onSuccess;
    var backend = useBackendStrict();
    var workspace = useWorkspaceStrict();
    var insight = useDashboardSelector(selectInsightByRef(insightWidget === null || insightWidget === void 0 ? void 0 : insightWidget.insight));
    var widgetFiltersPromise = useWidgetFilters(insightWidget);
    var insightWithAddedFilters = useMemo(function () { return insightSetFilters(insight, widgetFiltersPromise.result); }, [
        insight,
        /**
         * We use stringified value to avoid setting equal filters. This prevents cascading cache invalidation
         * and expensive re-renders down the line. The stringification is worth it as the filters are usually
         * pretty small thus saving more time than it is taking.
         */
        stringify(widgetFiltersPromise.result),
    ]);
    var insightExecution = useMemo(function () {
        return insightWithAddedFilters && insightWidget
            ? backend.workspace(workspace).execution().forInsight(insightWithAddedFilters)
            : undefined;
    }, [backend, workspace, insightWithAddedFilters, insightWidget]);
    return useExecutionDataView({
        execution: insightExecution,
        onCancel: onCancel,
        onError: onError,
        onLoading: onLoading,
        onPending: onPending,
        onSuccess: onSuccess,
    });
}
//# sourceMappingURL=useInsightWidgetDataView.js.map