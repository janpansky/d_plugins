import { __assign } from "tslib";
// (C) 2022 GoodData Corporation
import { UnexpectedSdkError, useExecutionDataView, } from "@gooddata/sdk-ui";
import { useWidgetFilters } from "./useWidgetFilters";
/**
 * This hook provides an easy way to read a data view from a custom widget. It resolves the appropriate filters
 * for the widget based on the filters currently set on the whole dashboard.
 *
 * @public
 */
export function useCustomWidgetExecutionDataView(_a) {
    var _b;
    var widget = _a.widget, execution = _a.execution, onCancel = _a.onCancel, onError = _a.onError, onLoading = _a.onLoading, onPending = _a.onPending, onSuccess = _a.onSuccess;
    var filterQueryTask = useWidgetFilters(widget);
    var dataViewTask = useExecutionDataView({
        execution: execution
            ? __assign(__assign({}, execution), { filters: filterQueryTask.result }) : undefined,
        onCancel: onCancel,
        onError: onError,
        onLoading: onLoading,
        onPending: onPending,
        onSuccess: onSuccess,
    });
    if (filterQueryTask.status === "pending" || dataViewTask.status === "pending") {
        return {
            error: undefined,
            result: undefined,
            status: "pending",
        };
    }
    if (filterQueryTask.status === "running" || dataViewTask.status === "loading") {
        return {
            error: undefined,
            result: undefined,
            status: "loading",
        };
    }
    if (filterQueryTask.status === "error" || dataViewTask.status === "error") {
        if (filterQueryTask.status === "error") {
            onError === null || onError === void 0 ? void 0 : onError(filterQueryTask.error);
        }
        return {
            error: ((_b = filterQueryTask.error) !== null && _b !== void 0 ? _b : dataViewTask.error),
            result: undefined,
            status: "error",
        };
    }
    if (filterQueryTask.status === "rejected") {
        var error = new UnexpectedSdkError("The widget filter query was rejected");
        onError === null || onError === void 0 ? void 0 : onError(error);
        return {
            error: error,
            result: undefined,
            status: "error",
        };
    }
    return {
        error: undefined,
        result: dataViewTask.result,
        status: "success",
    };
}
//# sourceMappingURL=useCustomWidgetExecutionDataView.js.map