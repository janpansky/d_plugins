import { __assign, __read, __spread } from "tslib";
// (C) 2020-2022 GoodData Corporation
import React, { useCallback, useMemo, useState } from "react";
import last from "lodash/last";
import { selectLocale, useDashboardSelector } from "../../../../model";
import { getDrillDownAttributeTitle, } from "../../../drill";
import { isDrillDownDefinition } from "../../../../types";
import { getDrillOriginLocalIdentifier } from "../../../../_staging/drills/drillingUtils";
import { DashboardInsightWithDrillSelect } from "./Insight/DashboardInsightWithDrillSelect";
import { InsightDrillDialog } from "./InsightDrillDialog/InsightDrillDialog";
/**
 * @internal
 */
export var DashboardInsightWithDrillDialog = function (props) {
    var _a = __read(useState([]), 2), drillSteps = _a[0], setDrillSteps = _a[1];
    var activeDrillStep = last(drillSteps);
    var insight = activeDrillStep === null || activeDrillStep === void 0 ? void 0 : activeDrillStep.insight;
    var widget = props.widget;
    var breadcrumbs = useMemo(function () {
        return drillSteps
            .filter(function (s) { return isDrillDownDefinition(s.drillDefinition); })
            .map(function (s) {
            return getDrillDownAttributeTitle(getDrillOriginLocalIdentifier(s.drillDefinition), s.drillEvent);
        });
    }, [drillSteps]);
    var locale = useDashboardSelector(selectLocale);
    var setNextDrillStep = useCallback(function (drillStep) {
        setDrillSteps(function (s) { return __spread(s, [drillStep]); });
    }, []);
    var goBack = useCallback(function () { return setDrillSteps(function (_a) {
        var _b = __read(_a, 1), firstDrill = _b[0];
        return [firstDrill];
    }); }, []);
    var onClose = useCallback(function () { return setDrillSteps([]); }, []);
    var onDrillDown = useCallback(function (evt) { return setNextDrillStep(evt.payload); }, [setNextDrillStep]);
    var onDrillToInsight = useCallback(function (evt) { return setNextDrillStep(evt.payload); }, [setNextDrillStep]);
    return (React.createElement(React.Fragment, null,
        React.createElement(DashboardInsightWithDrillSelect, __assign({}, props, { onDrillDown: onDrillDown, onDrillToInsight: onDrillToInsight })),
        activeDrillStep && (React.createElement(InsightDrillDialog, { locale: locale, breadcrumbs: breadcrumbs, widget: widget, insight: insight, onDrillDown: onDrillDown, onBackButtonClick: goBack, onClose: onClose }))));
};
//# sourceMappingURL=DashboardInsightWithDrillDialog.js.map