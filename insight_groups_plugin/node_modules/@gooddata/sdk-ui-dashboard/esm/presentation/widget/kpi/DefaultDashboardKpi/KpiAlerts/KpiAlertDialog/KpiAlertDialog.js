import { __extends } from "tslib";
// (C) 2007-2022 GoodData Corporation
import React, { Component } from "react";
import isEqual from "lodash/isEqual";
import last from "lodash/last";
import { FormattedMessage, injectIntl } from "react-intl";
import { Button, Input, Typography, Overlay, useMediaQuery, Spinner, Message } from "@gooddata/sdk-ui-kit";
import { isAttributeFilter, isDateFilter, isDashboardAttributeFilter, isDashboardDateFilter, } from "@gooddata/sdk-model";
import { KpiAlertDialogDateRange } from "./KpiAlertDialogDateRange";
import { kpiAlertDialogAlignPoints, kpiAlertDialogMobileAlignPoints } from "./alignPoints";
import { KpiAlertDialogBrokenFilters } from "./KpiAlertDialogBrokenFilters/KpiAlertDialogBrokenFilters";
import { thresholdFromDecimalToPercent, thresholdFromPercentToDecimal } from "../utils/alertThresholdUtils";
import { areKpiAlertFiltersSameAsDashboard } from "./utils/filterUtils";
import { KpiAlertDialogWhenTriggeredPicker } from "./KpiAlertDialogWhenTriggeredPicker";
var DEFAULT_WHEN_TRIGGERED = "aboveThreshold";
var KpiAlertDialogWrapper = function (_a) {
    var children = _a.children;
    var isMobile = useMediaQuery("mobileDevice");
    return children(isMobile);
};
var KpiAlertDialog = /** @class */ (function (_super) {
    __extends(KpiAlertDialog, _super);
    function KpiAlertDialog(props) {
        var _a, _b;
        var _this = _super.call(this, props) || this;
        _this.threshold = React.createRef();
        _this.saveButton = React.createRef();
        _this.onCloseClick = function (e) {
            e.stopPropagation();
            _this.closeDialog();
        };
        _this.onCancelClick = function (e) {
            e.stopPropagation();
            _this.closeDialog();
        };
        _this.closeDialog = function () {
            _this.props.onAlertDialogCloseClick();
        };
        _this.onSelect = function (alertType) {
            _this.setState({ alertType: alertType });
        };
        _this.onChange = function (value) {
            _this.setState({ threshold: value.toString() });
        };
        _this.saveKpiAlert = function () {
            var whenTriggered = _this.state.alertType;
            var threshold = parseFloat(_this.state.threshold); // convert e.g. valid .2 to 0.2
            threshold = _this.isThresholdRepresentingPercent()
                ? thresholdFromPercentToDecimal(threshold)
                : threshold;
            if (_this.isAlertValid() && !_this.isAlertEmpty()) {
                _this.props.onAlertDialogSaveClick(threshold, whenTriggered);
            }
        };
        _this.deleteKpiAlert = function () {
            _this.props.onAlertDialogDeleteClick();
        };
        _this.applyAlertFilterSetting = function () {
            setTimeout(function () {
                var _a, _b;
                (_b = (_a = _this.props).onApplyAlertFiltersClick) === null || _b === void 0 ? void 0 : _b.call(_a);
            }, 0);
        };
        _this.state = {
            alertType: (_b = (_a = props.alert) === null || _a === void 0 ? void 0 : _a.whenTriggered) !== null && _b !== void 0 ? _b : DEFAULT_WHEN_TRIGGERED,
            threshold: "" + _this.getVisualThreshold(),
        };
        return _this;
    }
    KpiAlertDialog.prototype.componentDidMount = function () {
        this.focusThresholdInput();
    };
    KpiAlertDialog.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.isAlertLoading) {
            this.focusThresholdInput();
        }
    };
    KpiAlertDialog.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {
        var _a, _b;
        if (this.props.isAlertLoading || !isEqual(this.props.alert, nextProps.alert)) {
            this.setState({
                alertType: (_b = (_a = nextProps.alert) === null || _a === void 0 ? void 0 : _a.whenTriggered) !== null && _b !== void 0 ? _b : DEFAULT_WHEN_TRIGGERED,
                threshold: "" + this.getVisualThreshold(nextProps),
            });
        }
        if (this.props.isKpiFormatLoading) {
            this.setState({
                threshold: "" + this.getVisualThreshold(nextProps),
            });
        }
    };
    KpiAlertDialog.prototype.render = function () {
        var _this = this;
        return (React.createElement(KpiAlertDialogWrapper, null, function (isMobile) {
            return (React.createElement(Overlay, { alignTo: ".is-alert-dialog.dash-item-content", alignPoints: isMobile ? kpiAlertDialogMobileAlignPoints : kpiAlertDialogAlignPoints, closeOnOutsideClick: !isMobile, onClose: _this.closeDialog, className: "kpi-alert-dialog-overlay" }, _this.renderDialogBox()));
        }));
    };
    KpiAlertDialog.prototype.renderAttributeFiltersInfo = function () {
        var _a;
        var _b = this.props, alert = _b.alert, filters = _b.filters;
        var attributeFilterCount = alert
            ? // for existing alerts, count the stored attribute filters
             (_a = alert.filterContext) === null || _a === void 0 ? void 0 : _a.filters.filter(isDashboardAttributeFilter).length : // otherwise (i.e. when creating a new alert) count attribute filters "from outside"
            filters.filter(isAttributeFilter).length;
        if (!attributeFilterCount) {
            return false;
        }
        return (React.createElement("div", { className: "kpi-alert-dialog-text text-info" },
            React.createElement(FormattedMessage, { id: "kpiAlertDialog.withAttributeFilters", values: { numFilters: attributeFilterCount } })));
    };
    KpiAlertDialog.prototype.getVisualThreshold = function (props) {
        var _a, _b, _c;
        if (props === void 0) { props = this.props; }
        var threshold = ((_a = props.alert) === null || _a === void 0 ? void 0 : _a.threshold) != undefined && this.isThresholdRepresentingPercent(props)
            ? thresholdFromDecimalToPercent((_b = props.alert) === null || _b === void 0 ? void 0 : _b.threshold)
            : (_c = props.alert) === null || _c === void 0 ? void 0 : _c.threshold;
        return threshold !== null && threshold !== void 0 ? threshold : "";
    };
    KpiAlertDialog.prototype.renderDialogBox = function () {
        return (React.createElement("div", { className: "kpi-alert-dialog" },
            React.createElement("div", { className: "action-close gd-icon-cross", onClick: this.onCloseClick }),
            this.renderDialogContent()));
    };
    KpiAlertDialog.prototype.renderDeleteLink = function () {
        var _a = this.props, alert = _a.alert, alertDeletingStatus = _a.alertDeletingStatus, intl = _a.intl;
        if (alert) {
            var isDeleting = alertDeletingStatus === "inProgress";
            var deleteButtonTitle = isDeleting
                ? intl.formatMessage({ id: "kpiAlertDialog.deleting" })
                : intl.formatMessage({ id: "kpiAlertDialog.delete" });
            return (React.createElement(Button, { key: "delete-button", className: "s-delete_button gd-button-link-dimmed delete-link", value: deleteButtonTitle, onClick: this.deleteKpiAlert, disabled: isDeleting }));
        }
        return false;
    };
    KpiAlertDialog.prototype.renderUpdateButton = function () {
        var _a = this.props, alert = _a.alert, alertUpdatingStatus = _a.alertUpdatingStatus, intl = _a.intl, onAlertDialogUpdateClick = _a.onAlertDialogUpdateClick;
        if (alert) {
            var isUpdating = alertUpdatingStatus === "inProgress";
            var updateButtonTitle = isUpdating
                ? intl.formatMessage({ id: "kpiAlertDialog.updatingTitle" })
                : intl.formatMessage({ id: "kpiAlertDialog.updateBrokenTitle" });
            return (React.createElement(Button, { key: "update-button", className: "s-update-button gd-button-action save-button", value: updateButtonTitle, onClick: onAlertDialogUpdateClick, disabled: isUpdating }));
        }
        return false;
    };
    KpiAlertDialog.prototype.renderBrokenAlert = function () {
        return (React.createElement("div", { className: "alert-broken" },
            React.createElement(Typography, { tagName: "h3" },
                React.createElement(FormattedMessage, { id: "kpiAlertDialog.brokenAlert" })),
            React.createElement(KpiAlertDialogBrokenFilters, { brokenFilters: this.props.brokenAlertFilters }),
            React.createElement("div", { className: "info" },
                React.createElement(FormattedMessage, { id: "kpiAlertDialog.brokenAlertAppeal" })),
            this.renderUpdatingErrorMessage(),
            this.renderDeletingErrorMessage(),
            React.createElement("div", { className: "buttons" },
                this.renderUpdateButton(),
                this.renderDeleteLink())));
    };
    KpiAlertDialog.prototype.renderDialogContent = function () {
        var _a = this.props, isAlertDialogOpening = _a.isAlertDialogOpening, isAlertLoading = _a.isAlertLoading, thresholdPlaceholder = _a.thresholdPlaceholder, isKpiFormatLoading = _a.isKpiFormatLoading, intl = _a.intl, brokenAlertFilters = _a.brokenAlertFilters, userEmail = _a.userEmail;
        var _b = this.state, threshold = _b.threshold, alertType = _b.alertType;
        if (isAlertDialogOpening || isAlertLoading || isKpiFormatLoading) {
            return (React.createElement("div", { className: "kpi-alert-dialog-content" },
                React.createElement(Spinner, { className: "gd-dot-spinner-centered" })));
        }
        if (brokenAlertFilters === null || brokenAlertFilters === void 0 ? void 0 : brokenAlertFilters.length) {
            return React.createElement("div", { className: "kpi-alert-dialog-content" }, this.renderBrokenAlert());
        }
        var inputSuffix = this.isThresholdRepresentingPercent() ? "%" : "";
        var hasError = !this.isAlertValid() && !this.isAlertEmpty();
        var emailMe = (React.createElement("span", { className: "underline-dotted", title: userEmail },
            React.createElement(FormattedMessage, { id: "kpiAlertDialog.emailMe" })));
        return (React.createElement("div", { className: "kpi-alert-dialog-content" },
            React.createElement("div", { className: "kpi-alert-dialog-text kpi-alert-dialog-text-on-top" },
                React.createElement(FormattedMessage, { id: "kpiAlertDialog.emailMeWhen", values: { emailMe: emailMe } })),
            React.createElement(KpiAlertDialogWhenTriggeredPicker, { whenTriggered: alertType, intl: intl, onWhenTriggeredChange: this.onSelect }),
            React.createElement("div", { className: "input-container" },
                React.createElement(Input, { className: "s-threshold-input", hasError: hasError, isSmall: true, maxlength: 16, onChange: this.onChange, onEscKeyPress: this.closeDialog, onEnterKeyPress: this.saveKpiAlert, placeholder: thresholdPlaceholder, ref: this.threshold, suffix: inputSuffix, value: threshold })),
            this.renderFiltersMessage(),
            this.renderFiltersDifferMessage(),
            this.renderValidationMessage(),
            this.renderSavingErrorMessage(),
            this.renderDeletingErrorMessage(),
            React.createElement("div", { className: "buttons" },
                React.createElement(Button, { ref: this.saveButton, className: "gd-button-action save-button s-save_button", value: this.getSaveButtonTitle(), onClick: this.saveKpiAlert, disabled: !this.isSavingEnabled() }),
                React.createElement(Button, { className: "gd-button-secondary cancel-button s-cancel_button", value: intl.formatMessage({ id: "cancel" }), onClick: this.onCancelClick }),
                this.renderDeleteLink())));
    };
    KpiAlertDialog.prototype.renderDateFilterInfo = function () {
        var _a, _b;
        if (this.props.isDateFilterIgnored) {
            return false;
        }
        var _c = this.props, dateFormat = _c.dateFormat, filters = _c.filters, alert = _c.alert;
        var dateFilters = alert
            ? (_b = (_a = alert.filterContext) === null || _a === void 0 ? void 0 : _a.filters.filter(isDashboardDateFilter)) !== null && _b !== void 0 ? _b : [] : filters.filter(isDateFilter);
        var dateFilter = last(dateFilters);
        return React.createElement(KpiAlertDialogDateRange, { filter: dateFilter, dateFormat: dateFormat });
    };
    KpiAlertDialog.prototype.renderFiltersMessage = function () {
        var _a = this.props, intl = _a.intl, userEmail = _a.userEmail;
        var emailInfo = intl.formatMessage({ id: "kpiAlertDialog.emailInfo" }, { userEmail: userEmail });
        return (React.createElement("div", null,
            React.createElement("div", null,
                React.createElement("div", { className: "kpi-alert-dialog-text text-info" },
                    this.renderDateFilterInfo(),
                    this.renderAttributeFiltersInfo()),
                React.createElement("div", { className: "kpi-alert-dialog-text email-info" }, emailInfo))));
    };
    KpiAlertDialog.prototype.renderFiltersDifferMessage = function () {
        var filtersDiffer = !areKpiAlertFiltersSameAsDashboard(this.props.alert, this.props.filters);
        var shouldShowFiltersDifferMessage = !!this.props.alert && filtersDiffer;
        return shouldShowFiltersDifferMessage ? (React.createElement(Message, { type: "warning" },
            React.createElement(FormattedMessage, { id: "kpiAlertDialog.filtersDiffer" }),
            !!this.props.onApplyAlertFiltersClick && (React.createElement(React.Fragment, null,
                " ",
                React.createElement("a", { className: "s-apply-alert-filters", onClick: this.applyAlertFilterSetting },
                    React.createElement(FormattedMessage, { id: "kpiAlertDialog.filtersApply" })))))) : (false);
    };
    KpiAlertDialog.prototype.renderValidationMessage = function () {
        if (!this.isAlertValid() && !this.isAlertEmpty()) {
            return (React.createElement(Message, { type: "error" },
                React.createElement(FormattedMessage, { id: "kpiAlertDialog.invalidNumber", values: {
                        strong: function (chunks) { return React.createElement("strong", null, chunks); },
                        br: React.createElement("br", null),
                    } })));
        }
        return false;
    };
    KpiAlertDialog.prototype.renderSavingErrorMessage = function () {
        if (this.props.alertSavingStatus === "error") {
            return (React.createElement(Message, { type: "error" },
                React.createElement(FormattedMessage, { id: "kpiAlertDialog.savingFailed" })));
        }
        return false;
    };
    KpiAlertDialog.prototype.renderUpdatingErrorMessage = function () {
        if (this.props.alertUpdatingStatus === "error") {
            return (React.createElement(Message, { type: "error" },
                React.createElement(FormattedMessage, { id: "kpiAlertDialog.updateBrokenFailed" })));
        }
        return false;
    };
    KpiAlertDialog.prototype.renderDeletingErrorMessage = function () {
        if (this.props.alertDeletingStatus === "error") {
            return (React.createElement(Message, { type: "error" },
                React.createElement(FormattedMessage, { id: "kpiAlertDialog.deleteingFailed" })));
        }
        return false;
    };
    KpiAlertDialog.prototype.getSaveButtonTitle = function () {
        return this.props.alertSavingStatus === "inProgress"
            ? this.getUpdatingOrSavingTitle()
            : this.getUpdateOrSetTitle();
    };
    KpiAlertDialog.prototype.getUpdateOrSetTitle = function () {
        var _a = this.props, alert = _a.alert, intl = _a.intl;
        return alert
            ? intl.formatMessage({ id: "kpiAlertDialog.updateTitle" })
            : intl.formatMessage({ id: "kpiAlertDialog.setTitle" });
    };
    KpiAlertDialog.prototype.getUpdatingOrSavingTitle = function () {
        var _a = this.props, alert = _a.alert, intl = _a.intl;
        return alert
            ? intl.formatMessage({ id: "kpiAlertDialog.updatingTitle" })
            : intl.formatMessage({ id: "kpiAlertDialog.settingTitle" });
    };
    KpiAlertDialog.prototype.isThresholdRepresentingPercent = function (props) {
        if (props === void 0) { props = this.props; }
        return !!props.isThresholdRepresentingPercent;
    };
    KpiAlertDialog.prototype.isSavingEnabled = function () {
        return this.isAlertValid() && !this.isAlertEmpty() && this.props.alertSavingStatus !== "inProgress";
    };
    KpiAlertDialog.prototype.isAlertValid = function () {
        // This is some special function, which works also with strings
        return !isNaN(this.state.threshold); // eslint-disable-line no-restricted-globals
    };
    KpiAlertDialog.prototype.isAlertEmpty = function () {
        return this.state.threshold === undefined || this.state.threshold === "";
    };
    KpiAlertDialog.prototype.focusThresholdInput = function () {
        var _this = this;
        setTimeout(function () {
            var _a, _b, _c;
            if ((_c = (_b = (_a = _this.threshold) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.inputNodeRef) === null || _c === void 0 ? void 0 : _c.inputNodeRef) {
                var thresholdInputElement = _this.threshold.current.inputNodeRef.inputNodeRef;
                thresholdInputElement.focus();
                thresholdInputElement.select();
            }
        }, 100);
    };
    KpiAlertDialog.defaultProps = {
        isAlertLoading: false,
        isKpiFormatLoading: false,
        thresholdPlaceholder: "",
        isDateFilterIgnored: false,
        isThresholdRepresentingPercent: false,
        filters: [],
        isAlertDialogOpening: false,
        alertDeletingStatus: "idle",
        alertSavingStatus: "idle",
        alertUpdatingStatus: "idle",
    };
    return KpiAlertDialog;
}(Component));
export { KpiAlertDialog };
export default injectIntl(KpiAlertDialog);
//# sourceMappingURL=KpiAlertDialog.js.map