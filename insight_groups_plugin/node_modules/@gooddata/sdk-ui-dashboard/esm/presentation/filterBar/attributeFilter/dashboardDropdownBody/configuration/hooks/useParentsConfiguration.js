import { __assign, __read, __spread, __values } from "tslib";
// (C) 2022 GoodData Corporation
import { areObjRefsEqual, } from "@gooddata/sdk-model";
import { useState, useMemo, useCallback } from "react";
import invariant from "ts-invariant";
import { setAttributeFilterParents, useDashboardSelector, useDispatchDashboardCommand, selectCatalogAttributes, selectConnectingAttributesMatrix, selectFiltersToIndexMap, } from "../../../../../../model";
export function useParentsConfiguration(neighborFilters, currentFilter) {
    var _a = currentFilter.attributeFilter, filterElementsBy = _a.filterElementsBy, currentFilterLocalId = _a.localIdentifier;
    var catalogAttributes = useDashboardSelector(selectCatalogAttributes);
    var connectingAttributesMatrix = useDashboardSelector(selectConnectingAttributesMatrix);
    var idToIndexMap = useDashboardSelector(selectFiltersToIndexMap);
    var saveParentFilterCommand = useDispatchDashboardCommand(setAttributeFilterParents);
    var originalParentFilterSelection = useMemo(function () {
        var originalSelection = new Map();
        neighborFilters.forEach(function (neighborFilter) {
            var neighborFilterLocalId = neighborFilter.attributeFilter.localIdentifier;
            invariant(neighborFilterLocalId, "Cannot initialize the attribute filter configuration panel, neighbor filter has missing 'localIdentifier' property");
            var isSelected = (filterElementsBy === null || filterElementsBy === void 0 ? void 0 : filterElementsBy.some(function (by) { return by.filterLocalIdentifier === neighborFilterLocalId; })) || false;
            originalSelection.set(neighborFilterLocalId, isSelected);
        });
        return originalSelection;
    }, []);
    var originalSelectedConnectingAttribute = useMemo(function () {
        var e_1, _a;
        var originalConnectingAttributes = new Map();
        try {
            for (var neighborFilters_1 = __values(neighborFilters), neighborFilters_1_1 = neighborFilters_1.next(); !neighborFilters_1_1.done; neighborFilters_1_1 = neighborFilters_1.next()) {
                var neighborFilter = neighborFilters_1_1.value;
                invariant(neighborFilter.attributeFilter.localIdentifier, "Cannot initialize the attribute filter configuration panel, neighbor filter has missing 'localIdentifier' property");
                originalConnectingAttributes.set(neighborFilter.attributeFilter.localIdentifier, getDefaultConnectingAttribute(neighborFilter.attributeFilter.localIdentifier, currentFilterLocalId));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (neighborFilters_1_1 && !neighborFilters_1_1.done && (_a = neighborFilters_1.return)) _a.call(neighborFilters_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return originalConnectingAttributes;
    }, []);
    var _b = __read(useState(function () {
        return neighborFilters.map(function (neighborFilter) {
            var _a;
            var neighborFilterLocalId = neighborFilter.attributeFilter.localIdentifier;
            var neighborFilterDisplayForm = neighborFilter.attributeFilter.displayForm;
            var isSelected = (filterElementsBy === null || filterElementsBy === void 0 ? void 0 : filterElementsBy.some(function (by) { return by.filterLocalIdentifier === neighborFilterLocalId; })) || false;
            var overAttributes = (_a = filterElementsBy === null || filterElementsBy === void 0 ? void 0 : filterElementsBy.find(function (by) { return by.filterLocalIdentifier === neighborFilterLocalId; })) === null || _a === void 0 ? void 0 : _a.over.attributes;
            var neighborFilterMetaData = catalogAttributes.find(function (md) {
                return md.displayForms.some(function (df) { return areObjRefsEqual(df.ref, neighborFilterDisplayForm); });
            });
            invariant(currentFilterLocalId, "Cannot initialize the attribute filter configuration panel, current filter has missing 'localIdentifier' property.");
            invariant(neighborFilterLocalId, "Cannot initialize the attribute filter configuration panel, neighbor filter has missing 'localIdentifier' property.");
            invariant(neighborFilterMetaData, "Cannot load metadata for the neighbor filter attribute.");
            invariant(connectingAttributesMatrix, "Cannot load 'connectingAttributesMatrix' property from filterContext state.");
            var selectedConnectingAttribute = getDefaultConnectingAttribute(neighborFilterLocalId, currentFilterLocalId);
            return {
                localIdentifier: neighborFilterLocalId,
                title: neighborFilterMetaData.attribute.title,
                isSelected: isSelected,
                overAttributes: overAttributes,
                selectedConnectingAttribute: selectedConnectingAttribute,
            };
        });
    }), 2), parents = _b[0], setParents = _b[1];
    function onParentSelect(localIdentifier, isSelected, overAttributes) {
        var changedParentIndex = parents.findIndex(function (parent) { return parent.localIdentifier === localIdentifier; });
        var changedItem = __assign({}, parents[changedParentIndex]);
        changedItem.isSelected = isSelected;
        changedItem.overAttributes = overAttributes;
        var changedParentItems = __spread(parents);
        changedParentItems[changedParentIndex] = changedItem;
        setParents(changedParentItems);
    }
    function onConnectingAttributeChanged(localIdentifier, selectedAttribute) {
        var changedParentIndex = parents.findIndex(function (parent) { return parent.localIdentifier === localIdentifier; });
        var changedItem = __assign({}, parents[changedParentIndex]);
        changedItem.selectedConnectingAttribute = selectedAttribute;
        var changedParentItems = __spread(parents);
        changedParentItems[changedParentIndex] = changedItem;
        setParents(changedParentItems);
    }
    var parentsConfigChanged = useMemo(function () {
        return parents.some(function (parentItem) {
            return parentItem.isSelected !== originalParentFilterSelection.get(parentItem.localIdentifier);
        });
    }, [parents]);
    var connectingAttributeChanged = useMemo(function () {
        return parents.some(function (parentItem) {
            return !areObjRefsEqual(parentItem.selectedConnectingAttribute, originalSelectedConnectingAttribute.get(parentItem.localIdentifier));
        });
    }, [parents]);
    var onParentFiltersChange = useCallback(function () {
        // dispatch the command only if the configuration changed
        if (parentsConfigChanged || connectingAttributeChanged) {
            var parentFilters_1 = [];
            parents.forEach(function (parentItem) {
                var _a;
                if (parentItem.isSelected && ((_a = parentItem.overAttributes) === null || _a === void 0 ? void 0 : _a.length)) {
                    parentFilters_1.push({
                        filterLocalIdentifier: parentItem.localIdentifier,
                        over: {
                            attributes: [parentItem.selectedConnectingAttribute],
                        },
                    });
                }
            });
            saveParentFilterCommand(currentFilter.attributeFilter.localIdentifier, parentFilters_1);
        }
    }, [parents]);
    // helper functions
    function getDefaultConnectingAttribute(neighborFilterLocalId, currentFilterLocalId) {
        var _a;
        var connectingAttributes = (_a = filterElementsBy === null || filterElementsBy === void 0 ? void 0 : filterElementsBy.find(function (by) { return by.filterLocalIdentifier === neighborFilterLocalId; })) === null || _a === void 0 ? void 0 : _a.over.attributes;
        invariant(idToIndexMap, "Cannot load 'filtersToIndexMap' property from filterContext state.");
        var currentFilterIndex = idToIndexMap[currentFilterLocalId];
        var neighborFilterIndex = idToIndexMap[neighborFilterLocalId];
        invariant(currentFilterIndex !== undefined, "Cannot initialize the attribute filter configuration panel state for parents, current filter index not found in mapping");
        invariant(neighborFilterIndex !== undefined, "Cannot initialize the attribute filter configuration panel state for parents, neighbor filter index not found in mapping");
        return connectingAttributes
            ? connectingAttributes[0]
            : connectingAttributesMatrix[currentFilterIndex][neighborFilterIndex][0].ref;
    }
    return {
        parents: parents,
        parentsConfigChanged: parentsConfigChanged,
        connectingAttributeChanged: connectingAttributeChanged,
        onParentSelect: onParentSelect,
        onConnectingAttributeChanged: onConnectingAttributeChanged,
        onParentFiltersChange: onParentFiltersChange,
    };
}
//# sourceMappingURL=useParentsConfiguration.js.map