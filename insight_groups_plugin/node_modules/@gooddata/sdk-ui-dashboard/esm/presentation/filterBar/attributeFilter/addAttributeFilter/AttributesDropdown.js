import { __read } from "tslib";
// (C) 2007-2022 GoodData Corporation
import React, { useCallback, useState } from "react";
import cx from "classnames";
import { stringUtils } from "@gooddata/util";
import { useIntl } from "react-intl";
import { ShortenedText, Dropdown, DropdownList } from "@gooddata/sdk-ui-kit";
import debounce from "lodash/debounce";
import { AddAttributeFilterButton } from "./AddAttributeFilterButton";
import { useDashboardSelector, selectCatalogAttributes } from "../../../../model";
var tooltipAlignPoints = [
    { align: "cr cl", offset: { x: 10, y: 0 } },
    { align: "cl cr", offset: { x: -10, y: 0 } },
];
var dropdownAlignPoints = [
    {
        align: "bl tl",
    },
    {
        align: "tr tl",
    },
    {
        align: "tr tl",
        offset: {
            x: 0,
            y: -100,
        },
    },
    {
        align: "tr tl",
        offset: {
            x: 0,
            y: -50,
        },
    },
    {
        align: "br tr",
        offset: {
            x: -10,
            y: 0,
        },
    },
    {
        align: "tl tr",
        offset: {
            x: 0,
            y: -100,
        },
    },
    {
        align: "tl tr",
        offset: {
            x: 0,
            y: -50,
        },
    },
];
function AttributeListItem(_a) {
    var item = _a.item, isMobile = _a.isMobile, onClick = _a.onClick;
    if (!item) {
        return null;
    }
    var metricItemClassNames = cx("s-" + stringUtils.simplifyText(item.attribute.title), {
        "gd-list-item": true,
        "gd-list-item-shortened": true,
    });
    var title = isMobile ? (item.attribute.title) : (React.createElement(ShortenedText, { tooltipAlignPoints: tooltipAlignPoints }, item.attribute.title));
    return (React.createElement("div", { key: item.attribute.id, className: metricItemClassNames, onClick: onClick }, title));
}
/**
 * @internal
 */
export function AttributesDropdown(_a) {
    var className = _a.className, bodyClassName = _a.bodyClassName, onClose = _a.onClose, onSelect = _a.onSelect;
    var intl = useIntl();
    var _b = __read(useState(""), 2), searchQuery = _b[0], setSearchQuery = _b[1];
    var attributes = useDashboardSelector(selectCatalogAttributes);
    // eslint-disable-next-line react-hooks/exhaustive-deps
    var onSearch = useCallback(debounce(function (query) {
        setSearchQuery(query);
    }, 250), []);
    var onDropdownStateChange = useCallback(function (isOpen) {
        if (!isOpen) {
            onClose();
        }
    }, [onClose]);
    var dropdownClassName = cx(className, "s-attribute_select", "attribute-filter-dropdown", "add-attribute-filter-dropdown");
    var filteredMeasures = searchQuery
        ? attributes.filter(function (a) { return a.attribute.title.toLowerCase().includes(searchQuery.toLowerCase()); })
        : attributes;
    return (React.createElement(Dropdown, { className: dropdownClassName, onOpenStateChanged: onDropdownStateChange, closeOnParentScroll: true, closeOnMouseDrag: true, closeOnOutsideClick: true, alignPoints: dropdownAlignPoints, openOnInit: true, renderButton: function (_a) {
            var isOpen = _a.isOpen;
            return (React.createElement(AddAttributeFilterButton, { className: "attribute-filter-button mobile-dropdown-button", isOpen: isOpen }));
        }, renderBody: function (_a) {
            var closeDropdown = _a.closeDropdown;
            return (React.createElement("div", { className: cx(bodyClassName, "metrics-dropdown") },
                React.createElement(DropdownList, { items: filteredMeasures, searchFieldSize: "small", showSearch: true, onSearch: onSearch, searchString: searchQuery, searchPlaceholder: intl.formatMessage({
                        id: "attributesDropdown.placeholder",
                    }), renderItem: function (_a) {
                        var item = _a.item;
                        return (React.createElement(AttributeListItem, { item: item, onClick: function () {
                                onSelect(item);
                                closeDropdown();
                            } }));
                    } })));
        } }));
}
//# sourceMappingURL=AttributesDropdown.js.map