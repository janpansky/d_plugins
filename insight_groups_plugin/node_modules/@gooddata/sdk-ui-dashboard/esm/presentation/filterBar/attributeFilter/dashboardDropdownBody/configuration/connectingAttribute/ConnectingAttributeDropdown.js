// (C) 2022 GoodData Corporation
import React from "react";
import { Dropdown, DropdownButton, DropdownList } from "@gooddata/sdk-ui-kit";
import { areObjRefsEqual } from "@gooddata/sdk-model";
import { selectCatalogAttributes, useDashboardSelector } from "../../../../../../model";
import { ConnectingAttributeItem } from "./ConnectingAttributeItem";
import invariant from "ts-invariant";
var DROPDOWN_BODY_WIDTH = 205;
var ALIGN_POINTS = [
    {
        align: "br tr",
    },
    {
        align: "tr br",
    },
];
export var ConnectingAttributeDropdown = function (props) {
    var itemLocalId = props.itemLocalId, selectedConnectingAttributeRef = props.selectedConnectingAttributeRef, connectingAttributes = props.connectingAttributes, onSelect = props.onSelect;
    var catalogAttributes = useDashboardSelector(selectCatalogAttributes);
    var selectedConnectingAttribute = catalogAttributes.find(function (attr) {
        return areObjRefsEqual(attr.attribute.ref, selectedConnectingAttributeRef);
    });
    invariant(selectedConnectingAttribute, "Cannot find connecting attribute in the catalog attribute items.");
    return (React.createElement(Dropdown, { className: "connecting-attributes-dropdown s-connecting-attributes-dropdown", closeOnParentScroll: true, closeOnMouseDrag: true, closeOnOutsideClick: true, alignPoints: ALIGN_POINTS, renderButton: function (_a) {
            var isOpen = _a.isOpen, toggleDropdown = _a.toggleDropdown;
            return (React.createElement(DropdownButton, { value: selectedConnectingAttribute.attribute.title, iconLeft: "gd-icon-attribute", title: selectedConnectingAttribute.attribute.title, isOpen: isOpen, onClick: toggleDropdown }));
        }, renderBody: function (_a) {
            var closeDropdown = _a.closeDropdown;
            return (React.createElement(DropdownList, { className: "connecting-attributes-dropdown-body s-connecting-attributes-dropdown-body", width: DROPDOWN_BODY_WIDTH, items: connectingAttributes, renderItem: function (_a) {
                    var item = _a.item;
                    var selected = areObjRefsEqual(item.ref, selectedConnectingAttributeRef);
                    var onClick = function () {
                        closeDropdown();
                        if (!selected) {
                            onSelect(itemLocalId, item.ref);
                        }
                    };
                    return (React.createElement(ConnectingAttributeItem, { title: item.title, icon: "gd-icon-attribute", selected: selected, onClick: onClick }));
                } }));
        } }));
};
//# sourceMappingURL=ConnectingAttributeDropdown.js.map