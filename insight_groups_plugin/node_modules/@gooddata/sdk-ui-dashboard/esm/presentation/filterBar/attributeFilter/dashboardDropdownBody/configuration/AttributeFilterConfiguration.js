// (C) 2022 GoodData Corporation
import React, { useCallback } from "react";
import { useIntl } from "react-intl";
import { DropdownControls } from "../common/DropdownControls";
import { ConfigurationCategory } from "./ConfigurationCategory";
import { ConfigurationPanelHeader } from "./ConfigurationPanelHeader";
import { useDashboardSelector, selectOtherContextAttributeFilters, selectFilterContextAttributeFilters, } from "../../../../../model";
import { ParentFiltersList } from "./parentFilters/ParentFiltersList";
import invariant from "ts-invariant";
import { useDisplayFormConfiguration } from "./hooks/useDisplayFormConfiguration";
import { useParentsConfiguration } from "./hooks/useParentsConfiguration";
import { AttributeDisplayFormsDropdown } from "./displayForms/AttributeDisplayFormsDropdown";
export var AttributeFilterConfiguration = function (props) {
    var closeHandler = props.closeHandler, filterRef = props.filterRef;
    var intl = useIntl();
    var neighborFilters = useDashboardSelector(selectOtherContextAttributeFilters(filterRef));
    var currentFilter = useDashboardSelector(selectFilterContextAttributeFilters).find(function (filter) {
        return neighborFilters.every(function (neighborFilter) {
            return filter.attributeFilter.localIdentifier !== neighborFilter.attributeFilter.localIdentifier;
        });
    });
    invariant(currentFilter, "Cannot find current filter in the filter context store.");
    var _a = useParentsConfiguration(neighborFilters, currentFilter), parents = _a.parents, onParentSelect = _a.onParentSelect, parentsConfigChanged = _a.parentsConfigChanged, onConnectingAttributeChanged = _a.onConnectingAttributeChanged, connectingAttributeChanged = _a.connectingAttributeChanged, onParentFiltersChange = _a.onParentFiltersChange;
    var _b = useDisplayFormConfiguration(currentFilter), onDisplayFormSelect = _b.onDisplayFormSelect, filterDisplayForms = _b.filterDisplayForms, displayFormChanged = _b.displayFormChanged, onDisplayFormChange = _b.onDisplayFormChange;
    var onConfigurationSave = useCallback(function () {
        onParentFiltersChange();
        onDisplayFormChange();
    }, [onParentFiltersChange, onDisplayFormChange]);
    var showDisplayFormPicker = filterDisplayForms.availableDisplayForms.length > 1;
    if (!filterRef) {
        return null;
    }
    return (React.createElement("div", { className: "s-attribute-filter-dropdown-configuration attribute-filter-dropdown-configuration" },
        React.createElement(ConfigurationPanelHeader, null),
        parents.length > 0 && (React.createElement(ConfigurationCategory, { categoryTitle: intl.formatMessage({ id: "attributesDropdown.filterBy" }) })),
        React.createElement(ParentFiltersList, { currentFilterLocalId: currentFilter.attributeFilter.localIdentifier, parents: parents, setParents: onParentSelect, onConnectingAttributeChanged: onConnectingAttributeChanged }),
        showDisplayFormPicker && (React.createElement("div", { className: "s-display-form-configuration" },
            React.createElement(ConfigurationCategory, { categoryTitle: intl.formatMessage({ id: "attributesDropdown.displayValuesAs" }) }),
            React.createElement("div", { className: "configuration-panel-body" },
                React.createElement(AttributeDisplayFormsDropdown, { displayForms: filterDisplayForms.availableDisplayForms, selectedDisplayForm: filterDisplayForms.selectedDisplayForm, onChange: onDisplayFormSelect })))),
        React.createElement(DropdownControls, { closeHandler: closeHandler, isSaveButtonEnabled: parentsConfigChanged || displayFormChanged || connectingAttributeChanged, onSave: onConfigurationSave })));
};
//# sourceMappingURL=AttributeFilterConfiguration.js.map