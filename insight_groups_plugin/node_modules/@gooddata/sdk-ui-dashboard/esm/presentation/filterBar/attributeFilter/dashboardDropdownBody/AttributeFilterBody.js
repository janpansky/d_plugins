import { __assign, __read } from "tslib";
// (C) 2021-2022 GoodData Corporation
import React, { useMemo, useState } from "react";
import { useIntl } from "react-intl";
import { Button, DEFAULT_ITEM_HEIGHT, DEFAULT_MOBILE_ITEM_HEIGHT, LegacyInvertableList, LOADING_HEIGHT, LoadingMask, NoData, } from "@gooddata/sdk-ui-kit";
import cx from "classnames";
import { AllItemsFilteredMessage } from "./AllItemsFilteredMessage";
import { v4 as uuid } from "uuid";
import { ItemsFilteredMessage } from "./ItemsFilteredMessage";
import { ConfigurationButton } from "./configuration/ConfigurationButton";
import { DeleteButton } from "./DeleteButton";
import { IntlWrapper } from "../../../localization";
import min from "lodash/min";
import max from "lodash/max";
import isEmpty from "lodash/isEmpty";
import { isEmptyListItem, } from "@gooddata/sdk-ui-filters";
import AttributeDropdownListItem from "./AttributeDropdownListItem";
import { selectLocale, useDashboardSelector, selectIsInEditMode } from "../../../../model";
import { AttributeFilterConfiguration } from "./configuration/AttributeFilterConfiguration";
var MAX_SELECTION_SIZE = 500;
var MAX_LIST_HEIGHT = 392;
var CONFIGURATION_BUTTON_HEIGHT = 40;
var PARENT_FILTER_MESSAGE_HEIGHT = 30;
var LIST_EXTRAS = 143;
var MOBILE_LIST_EXTRAS = 167;
var LIST_ITEM_HEIGHT = 28;
var MOBILE_LIST_ITEM_HEIGHT = 40;
var AttributeFilterBodyCore = function (props) {
    var parentFilterTitles = props.parentFilterTitles, isElementsLoading = props.isElementsLoading, searchString = props.searchString, items = props.items, width = props.width, isLoaded = props.isLoaded, showItemsFilteredMessage = props.showItemsFilteredMessage, showDeleteButton = props.showDeleteButton, deleteFilter = props.deleteFilter, onCloseButtonClicked = props.onCloseButtonClicked, onApplyButtonClicked = props.onApplyButtonClicked, applyDisabled = props.applyDisabled, isMobile = props.isMobile, attributeFilterRef = props.attributeFilterRef;
    var hasNoData = !searchString && !(parentFilterTitles === null || parentFilterTitles === void 0 ? void 0 : parentFilterTitles.length) && !isElementsLoading && items.length === 0;
    var currentItemHeight = isMobile ? DEFAULT_MOBILE_ITEM_HEIGHT : DEFAULT_ITEM_HEIGHT;
    var _a = __read(useState(false), 2), isConfigurationOpen = _a[0], setIsConfigurationOpen = _a[1];
    var intl = useIntl();
    var classNames = cx({
        "attributevalues-list": true,
        "gd-flex-item-stretch-mobile": isMobile,
        "gd-flex-row-container-mobile": isMobile,
    });
    var isEditMode = useDashboardSelector(selectIsInEditMode);
    var getElementsList = function (items, emptyString) {
        return items.map(function (item) {
            // for empty list items return an empty object -> this causes the underlying list to render an empty row (without checkboxes)
            if (isEmptyListItem(item)) {
                return {};
            }
            // set "empty value" title only to items that have empty title but not URL
            // this is to distinguish between elements that have not been loaded yet and those who have and have empty title
            return isEmpty(item === null || item === void 0 ? void 0 : item.title) && !isEmpty(item === null || item === void 0 ? void 0 : item.uri)
                ? __assign(__assign({}, item), { title: emptyString }) : item;
        });
    };
    function getDropdownBodyHeight() {
        var winHeight = window.innerHeight;
        var itemHeight = isMobile ? MOBILE_LIST_ITEM_HEIGHT : LIST_ITEM_HEIGHT;
        var listExtras = isMobile ? MOBILE_LIST_EXTRAS : LIST_EXTRAS;
        var configurationButtonHeight = props.showConfigurationButton ? CONFIGURATION_BUTTON_HEIGHT : 0;
        var filteredItemsMessageHeight = props.showItemsFilteredMessage ? PARENT_FILTER_MESSAGE_HEIGHT : 0;
        var availableWindowHeight = winHeight - listExtras - configurationButtonHeight - filteredItemsMessageHeight;
        var maxListHeight = isMobile ? availableWindowHeight : MAX_LIST_HEIGHT;
        var listItemsHeight = itemHeight * props.totalCount;
        var minHeight = min([maxListHeight, availableWindowHeight, listItemsHeight]);
        return max([itemHeight, minHeight]);
    }
    var isFilteredOutByParents = !isElementsLoading && (parentFilterTitles === null || parentFilterTitles === void 0 ? void 0 : parentFilterTitles.length) && !searchString && !items.length;
    var list = isFilteredOutByParents ? (React.createElement(AllItemsFilteredMessage, { parentFilterTitles: parentFilterTitles })) : hasNoData ? (React.createElement(NoData, { noDataLabel: intl.formatMessage({ id: "attributesDropdown.noData" }) })) : (React.createElement(LegacyInvertableList, { selection: props.selectedItems, filteredItemsCount: props.totalCount, onSearch: props.onSearch, onSelect: props.onSelect, onRangeChange: props.onRangeChange, isInverted: props.isInverted, items: getElementsList(props.items, intl.formatMessage({ id: "attributeFilterDropdown.emptyValue" })), listItemClass: AttributeDropdownListItem, itemsCount: props.totalCount, isLoading: isElementsLoading, isLoadingClass: LoadingMask, getItemKey: function (item) { return (item === null || item === void 0 ? void 0 : item.uri) || uuid(); }, itemHeight: currentItemHeight, height: getDropdownBodyHeight(), searchPlaceholder: intl.formatMessage({ id: "attributeFilterDropdown.searchPlaceholder" }), maxSelectionSize: MAX_SELECTION_SIZE, noItemsFound: !props.items.length, searchString: props.searchString }));
    var currentWidth = width || 245;
    var actionsClassnames = cx("gd-dialog-footer dropdown-footer", {
        "dropdown-footer-mobile": isMobile,
    });
    var attributeValuesStyles = useMemo(function () {
        return {
            width: isMobile ? "auto" : currentWidth,
            overflow: isMobile ? "hidden" : undefined,
        };
    }, [isMobile, currentWidth]);
    return (React.createElement("div", { className: classNames, style: attributeValuesStyles }, isConfigurationOpen ? (React.createElement(AttributeFilterConfiguration, { closeHandler: function () { return setIsConfigurationOpen(false); }, filterRef: attributeFilterRef, onChange: function () { } })) : (React.createElement(React.Fragment, null,
        isLoaded ? list : React.createElement(LoadingMask, { height: LOADING_HEIGHT }),
        isLoaded && (React.createElement(React.Fragment, null,
            showItemsFilteredMessage && (React.createElement(ItemsFilteredMessage, { parentFilterTitles: parentFilterTitles })),
            isEditMode && (React.createElement(ConfigurationButton, { setIsConfigurationOpen: setIsConfigurationOpen })),
            !hasNoData && (React.createElement("div", { className: actionsClassnames },
                showDeleteButton && deleteFilter && (React.createElement(DeleteButton, { deleteFilter: deleteFilter })),
                React.createElement(Button, { key: "cancel-button", className: "gd-button-secondary s-cancel_button", value: intl.formatMessage({ id: "cancel" }), disabled: false, onClick: onCloseButtonClicked }),
                React.createElement(Button, { key: "apply-button", className: "gd-button-action s-apply_button", value: intl.formatMessage({ id: "apply" }), disabled: applyDisabled, onClick: onApplyButtonClicked })))))))));
};
export var AttributeFilterBody = function (props) {
    var locale = useDashboardSelector(selectLocale);
    return (React.createElement(IntlWrapper, { locale: locale },
        React.createElement(AttributeFilterBodyCore, __assign({}, props))));
};
//# sourceMappingURL=AttributeFilterBody.js.map