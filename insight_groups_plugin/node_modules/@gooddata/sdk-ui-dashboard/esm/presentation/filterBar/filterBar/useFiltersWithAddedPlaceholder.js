// (C) 2021-2022 GoodData Corporation
import { __assign, __read } from "tslib";
import { useCallback, useMemo, useState } from "react";
import partition from "lodash/partition";
import { isDashboardDateFilter, } from "@gooddata/sdk-model";
import { addAttributeFilter as addAttributeFilterAction, dispatchAndWaitFor, useDashboardDispatch, } from "../../../model";
/**
 * @internal
 */
export function isFilterBarAttributeFilterPlaceholder(object) {
    return object.type === "attributeFilterPlaceholder";
}
/**
 * @internal
 */
export function useFiltersWithAddedPlaceholder(filters) {
    var dispatch = useDashboardDispatch();
    var _a = __read(partition(filters, isDashboardDateFilter), 2), _b = __read(_a[0], 1), dateFilter = _b[0], attributeFilters = _a[1];
    var _c = __read(useState(), 2), addedAttributeFilter = _c[0], setAddedAttributeFilter = _c[1];
    var addAttributeFilterPlaceholder = useCallback(function (index) {
        setAddedAttributeFilter({ type: "attributeFilterPlaceholder", filterIndex: index });
    }, []);
    var clearAddedFilter = useCallback(function () {
        setAddedAttributeFilter(undefined);
    }, []);
    var closeAttributeSelection = useCallback(function () {
        // close after select attribute should not clear placeholder
        if (addedAttributeFilter === null || addedAttributeFilter === void 0 ? void 0 : addedAttributeFilter.attribute) {
            return;
        }
        clearAddedFilter();
    }, [addedAttributeFilter === null || addedAttributeFilter === void 0 ? void 0 : addedAttributeFilter.attribute, clearAddedFilter]);
    var attributeFiltersWithPlaceholder = useMemo(function () {
        var filterObjects = attributeFilters.map(function (filter, filterIndex) { return ({
            filter: filter,
            filterIndex: filterIndex,
        }); });
        if (addedAttributeFilter === undefined) {
            return filterObjects;
        }
        filterObjects.splice(addedAttributeFilter.filterIndex, 0, addedAttributeFilter);
        return filterObjects;
    }, [addedAttributeFilter, attributeFilters]);
    var selectAttributeFilter = useCallback(function (attribute) {
        if (!addedAttributeFilter) {
            return;
        }
        setAddedAttributeFilter(function (f) { return (__assign(__assign({}, f), { attribute: attribute })); });
        dispatchAndWaitFor(dispatch, addAttributeFilterAction(attribute.defaultDisplayForm, addedAttributeFilter.filterIndex)).finally(clearAddedFilter);
    }, [addedAttributeFilter, clearAddedFilter, dispatch]);
    return [
        {
            dateFilter: dateFilter,
            attributeFiltersWithPlaceholder: attributeFiltersWithPlaceholder,
            attributeFiltersCount: attributeFilters.length,
        },
        { addAttributeFilterPlaceholder: addAttributeFilterPlaceholder, selectAttributeFilter: selectAttributeFilter, closeAttributeSelection: closeAttributeSelection },
    ];
}
//# sourceMappingURL=useFiltersWithAddedPlaceholder.js.map