import { ComponentType } from "react";
import { IDashboardAttributeFilterProps } from "../filterBar/types";
import { IDashboardKpiProps, IDashboardWidgetProps } from "../widget";
import { AttributeFilterDraggableItem, CustomDraggableItem } from "../dragAndDrop/types";
/**
 * @internal
 */
export interface CustomComponentBase<TMainProps> {
    /**
     * The main body of the component that is shown by default in view and edit modes.
     */
    MainComponent: ComponentType<TMainProps>;
}
/**
 * @internal
 */
export interface DraggingComponentProps {
}
/**
 * @internal
 */
export interface DropTargetComponentProps {
}
/**
 * @internal
 */
export declare type IAttributeFilterDraggingComponentProps = {
    itemType: "attributeFilter";
    item: AttributeFilterDraggableItem;
};
/**
 * @internal
 */
export declare type ICustomDraggingComponentProps = {
    itemType: "custom";
    item: CustomDraggableItem;
};
/**
 * @internal
 */
export declare type AttributeFilterDraggingComponent = ComponentType<IAttributeFilterDraggingComponentProps>;
/**
 * @internal
 */
export declare type CustomDraggingComponent = ComponentType<ICustomDraggingComponentProps>;
/**
 * @internal
 */
export declare type AttributeFilterDraggableComponent = {
    DraggingComponent: AttributeFilterDraggingComponent;
    type: "attributeFilter";
};
/**
 * @internal
 */
export declare type CustomDraggableComponent = {
    DraggingComponent: CustomDraggingComponent;
    type: "custom";
};
/**
 * Capability saying the component can be dragged somewhere.
 * @internal
 */
export declare type DraggableComponent = {
    dragging: AttributeFilterDraggableComponent | CustomDraggableComponent;
};
/**
 * Capability saying the component can receive draggable items.
 * @internal
 */
export declare type DropTarget = {
    dropping: {
        /**
         * Component shown when item is dragged onto component.
         */
        DropTargetComponent: ComponentType<DropTargetComponentProps>;
    };
};
/**
 * Capability saying the component can be created by dragging it from the side drawer.
 * @internal
 */
export declare type CreatableByDragComponent = DraggableComponent & {
    creating: {
        /**
         * Component used to render the item in the left drawer menu used to create a new instance of this component on the dashboard
         */
        DrawerItemComponent: ComponentType;
    };
};
/**
 * Capability saying the component displays something else than the Main component while it is being configured for the first time after being created.
 * @internal
 */
export declare type CreatablePlaceholderComponent = {
    creating: {
        /**
         * Component used to render the item before the initial configuration is done.
         */
        CreatingPlaceholderComponent: ComponentType;
    };
};
/**
 * @internal
 */
export interface WidgetConfigPanelProps {
}
/**
 * Capability saying the component can be configured in edit mode.
 * @internal
 */
export declare type ConfigurableWidget = {
    configuration: {
        /**
         * Component used to render the insides of the configuration panel.
         */
        WidgetConfigPanelComponent: ComponentType<WidgetConfigPanelProps>;
    };
};
/**
 * Definition of attribute filter components
 * @internal
 */
export declare type AttributeFilterComponentSet = CustomComponentBase<IDashboardAttributeFilterProps> & DraggableComponent & CreatablePlaceholderComponent & CreatableByDragComponent;
/**
 * Definition of KPI widget
 * @internal
 */
export declare type KpiWidgetComponentSet = CustomComponentBase<IDashboardKpiProps> & DraggableComponent & CreatableByDragComponent & CreatablePlaceholderComponent & ConfigurableWidget;
/**
 * Definition of widget
 * @internal
 */
export declare type CustomWidgetComponentSet = CustomComponentBase<IDashboardWidgetProps> & DraggableComponent & Partial<ConfigurableWidget> & Partial<CreatableByDragComponent>;
//# sourceMappingURL=types.d.ts.map