import { DashboardState } from "../../../../model";
export declare const selectIsEditModeEnable: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res1: boolean, res2: boolean) => boolean>;
/**
 * @internal
 */
export declare const selectCanEditLockedDashboard: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res1: boolean, res2: boolean, res3: boolean) => boolean>;
/**
 * @internal
 */
export declare const selectCanEnterEditMode: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res1: boolean, res2: boolean, res3: boolean, res4: boolean) => boolean>;
/**
 * @internal
 */
export declare const selectCanEnterEditModeAndIsLoaded: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res1: boolean, res2: boolean) => boolean>;
/**
 * @internal
 */
export declare const selectIsPrivateDashboard: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res1: boolean, res2: boolean, res3: boolean) => boolean>;
/**
 * @internal
 */
export declare function selectCanSaveDashboard(state: DashboardState): boolean;
/**
 * @internal
 */
export declare const selectHasPermissionsForShare: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res1: boolean, res2: boolean, res3: boolean) => boolean>;
/**
 * @internal
 */
export declare const selectIsCurrentDashboardVisibleInList: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res1: import("@gooddata/sdk-model").UriRef | import("@gooddata/sdk-model").IdentifierRef | undefined, res2: import("../../../..").ObjRefMap<import("@gooddata/sdk-model").IListedDashboard>) => boolean>;
/**
 * @internal
 */
export declare const selectIsShareButtonVisible: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res1: boolean, res2: boolean, res3: boolean, res4: boolean, res5: boolean, res6: boolean) => boolean>;
//# sourceMappingURL=selectors.d.ts.map