// (C) 2021-2022 GoodData Corporation
import { __assign } from "tslib";
import React, { useCallback } from "react";
import { FormattedMessage, useIntl } from "react-intl";
import { Bubble, BubbleHoverTrigger, Button } from "@gooddata/sdk-ui-kit";
import { dispatchAndWaitFor, saveDashboard, selectIsDashboardSaving, selectIsLayoutEmpty, selectIsInEditMode, useDashboardDispatch, useDashboardSelector, } from "../../../../../model";
import { cancelEditRenderMode } from "../../../../../model/commands/ui";
import { selectCanSaveDashboard, selectIsPrivateDashboard } from "../selectors";
import { selectEnableAnalyticalDashboardPermissions } from "../../../../../model/store/config/configSelectors";
import { selectIsDashboardDirty, selectIsNewDashboard } from "../../../../../model/store/meta/metaSelectors";
import noop from "lodash/noop";
import { messages } from "../../../../../locales";
/**
 * @internal
 */
export function useSaveButtonProps() {
    var dispatch = useDashboardDispatch();
    var onSaveClick = useCallback(function () {
        return dispatchAndWaitFor(dispatch, saveDashboard()).then(function () {
            dispatch(cancelEditRenderMode());
        });
    }, [dispatch]);
    var isEditing = useDashboardSelector(selectIsInEditMode);
    var isSaving = useDashboardSelector(selectIsDashboardSaving);
    var arePermissionsEnabled = useDashboardSelector(selectEnableAnalyticalDashboardPermissions);
    var isPrivateDashboard = useDashboardSelector(selectIsPrivateDashboard);
    var isNewDashboard = useDashboardSelector(selectIsNewDashboard);
    var isEmptyDashboard = useDashboardSelector(selectIsLayoutEmpty);
    var canSaveDashboard = useDashboardSelector(selectCanSaveDashboard);
    var isDashboardDirty = useDashboardSelector(selectIsDashboardDirty);
    var isVisible = isEditing;
    var isEnabled = isNewDashboard ? !isEmptyDashboard : isDashboardDirty;
    var buttonValue = arePermissionsEnabled
        ? messages.controlButtonsSaveValue
        : messages.controlButtonsSaveAndPublishValue;
    var buttonTitle = messages.controlButtonsSaveAndPublishTitle;
    if (isPrivateDashboard) {
        buttonTitle = messages.controlButtonsSaveAsPrivateTitle;
    }
    if (!canSaveDashboard) {
        buttonTitle = messages.controlButtonsSaveAndPublishNoChanges;
    }
    if (isEmptyDashboard) {
        buttonTitle = messages.controlButtonsSaveAndPublishEmpty;
    }
    return {
        isVisible: isVisible,
        isEnabled: isEnabled,
        isSaving: isSaving,
        buttonValue: buttonValue,
        buttonTitle: buttonTitle,
        onSaveClick: onSaveClick,
    };
}
/**
 * @internal
 */
export function DefaultSaveButton(_a) {
    var isVisible = _a.isVisible, isEnabled = _a.isEnabled, isSaving = _a.isSaving, buttonTitle = _a.buttonTitle, buttonValue = _a.buttonValue, onSaveClick = _a.onSaveClick;
    var intl = useIntl();
    if (!isVisible) {
        return null;
    }
    if (isSaving) {
        // While save is in progress, the save button needs to be disabled and show 'Saving...'
        return (React.createElement(Button, { className: "gd-button-action s-saving_button", value: intl.formatMessage({ id: "controlButtons.saving.value" }), disabled: true, onClick: noop }));
    }
    return (React.createElement(BubbleHoverTrigger, null,
        React.createElement(Button, { className: "gd-button-action save-publish-button s-save_button", value: intl.formatMessage(buttonValue), onClick: onSaveClick, disabled: !isEnabled }),
        React.createElement(Bubble, { alignPoints: [{ align: "bc tr" }], arrowOffsets: { "bc tr": [10, 20] }, alignTo: ".save-publish-button" },
            React.createElement(FormattedMessage, __assign({}, buttonTitle)))));
}
//# sourceMappingURL=DefaultSaveButton.js.map