// (C) 2022 GoodData Corporation
import { createSelector } from "@reduxjs/toolkit";
import { selectCanManageACL, selectCanManageAnalyticalDashboard, selectCanManageWorkspace, selectDashboardLockStatus, selectDashboardRef, selectIsLayoutEmpty, selectIsReadOnly, selectListedDashboardsMap, selectIsInEditMode, } from "../../../../model";
import { selectDashboardEditModeDevRollout, selectEnableAnalyticalDashboardPermissions, } from "../../../../model/store/config/configSelectors";
import { selectIsDashboardLoading } from "../../../../model/store/loading/loadingSelectors";
import { selectIsDashboardDirty, selectIsDashboardPrivate, selectIsNewDashboard, } from "../../../../model/store/meta/metaSelectors";
import { selectSupportsAccessControlCapability, selectSupportsHierarchicalWorkspacesCapability, } from "../../../../model/store/backendCapabilities/backendCapabilitiesSelectors";
export var selectIsEditModeEnable = createSelector(selectDashboardEditModeDevRollout, selectIsReadOnly, function (isDevRollout, isReadOnly) { return isDevRollout && !isReadOnly; });
/**
 * @internal
 */
export var selectCanEditLockedDashboard = createSelector(selectDashboardLockStatus, selectSupportsHierarchicalWorkspacesCapability, selectCanManageWorkspace, function (isLocked, supportsHierarchicalWorkspaces, canManageWorkspace) {
    return isLocked && !supportsHierarchicalWorkspaces && canManageWorkspace;
});
/**
 * @internal
 */
export var selectCanEnterEditMode = createSelector(selectIsEditModeEnable, selectCanManageAnalyticalDashboard, selectDashboardLockStatus, selectCanEditLockedDashboard, function (isEditModeEnable, canManageAnalyticalDashboard, isLocked, canEditLockedDashboard) {
    return isEditModeEnable && canManageAnalyticalDashboard && (!isLocked || canEditLockedDashboard);
});
/**
 * @internal
 */
export var selectCanEnterEditModeAndIsLoaded = createSelector(selectIsDashboardLoading, selectCanEnterEditMode, function (isLoading, canEnterEditMode) { return !isLoading && canEnterEditMode; });
/**
 * @internal
 */
export var selectIsPrivateDashboard = createSelector(selectEnableAnalyticalDashboardPermissions, selectIsDashboardPrivate, selectIsNewDashboard, function (arePermissionsEnabled, isPrivate, isCreatingNewDashboard) {
    return arePermissionsEnabled && (isCreatingNewDashboard || isPrivate);
});
/**
 * @internal
 */
export function selectCanSaveDashboard(state) {
    return selectIsNewDashboard(state) ? !selectIsLayoutEmpty(state) : selectIsDashboardDirty(state);
}
/**
 * @internal
 */
export var selectHasPermissionsForShare = createSelector(selectEnableAnalyticalDashboardPermissions, selectSupportsAccessControlCapability, selectCanManageACL, function (arePermissionsEnabled, supportsAccessControl, canManageACL) {
    return arePermissionsEnabled && supportsAccessControl && canManageACL;
});
/**
 * @internal
 */
export var selectIsCurrentDashboardVisibleInList = createSelector(selectDashboardRef, selectListedDashboardsMap, function (currentDashboardRef, dashboardsList) {
    return Boolean(currentDashboardRef && dashboardsList.has(currentDashboardRef));
});
/**
 * @internal
 */
export var selectIsShareButtonVisible = createSelector(selectCanManageWorkspace, selectHasPermissionsForShare, selectIsCurrentDashboardVisibleInList, selectDashboardLockStatus, selectIsReadOnly, selectIsInEditMode, function (isAdmin, hasPermission, isCurrentDashboardVisibleInList, isLocked, isReadOnly, isInEditMode) {
    return hasPermission &&
        isCurrentDashboardVisibleInList &&
        (!isLocked || isAdmin) &&
        !isReadOnly &&
        !isInEditMode;
});
//# sourceMappingURL=selectors.js.map