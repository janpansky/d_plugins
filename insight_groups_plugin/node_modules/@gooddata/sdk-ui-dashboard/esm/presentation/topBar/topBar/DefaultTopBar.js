import { __assign } from "tslib";
// (C) 2021-2022 GoodData Corporation
import React, { useCallback } from "react";
import { renameDashboard, selectDashboardShareInfo, selectDashboardTitle, selectIsExport, selectIsReadOnly, selectPersistedDashboard, useDashboardDispatch, useDashboardSelector, } from "../../../model";
import { ButtonBar, DefaultButtonBar } from "../buttonBar";
import { DefaultMenuButton, MenuButton, useDefaultMenuItems } from "../menuButton";
import { Title } from "../title";
import { HiddenTopBar } from "./HiddenTopBar";
import { DefaultLockedStatus, DefaultShareStatus } from "../shareIndicators";
import { useCancelButtonProps, useEditButtonProps, useSaveAsNewButtonProps, useSaveButtonProps, useShareButtonProps, } from "../buttonBar/button";
/**
 * @alpha
 */
export var useTopBarProps = function () {
    var dispatch = useDashboardDispatch();
    var title = useDashboardSelector(selectDashboardTitle);
    var isReadOnly = useDashboardSelector(selectIsReadOnly);
    var shareInfo = useDashboardSelector(selectDashboardShareInfo);
    var persistedDashboard = useDashboardSelector(selectPersistedDashboard);
    var defaultMenuItems = useDefaultMenuItems();
    var shareButtonProps = useShareButtonProps();
    var editButtonProps = useEditButtonProps();
    var cancelButtonProps = useCancelButtonProps();
    var saveButtonProps = useSaveButtonProps();
    var saveAsNewButtonProps = useSaveAsNewButtonProps();
    var onTitleChanged = useCallback(function (title) {
        dispatch(renameDashboard(title));
    }, [dispatch]);
    return {
        menuButtonProps: { menuItems: defaultMenuItems, DefaultMenuButton: DefaultMenuButton },
        titleProps: {
            title: title,
            onTitleChanged: isReadOnly ? undefined : onTitleChanged,
        },
        buttonBarProps: {
            shareButtonProps: shareButtonProps,
            editButtonProps: editButtonProps,
            cancelButtonProps: cancelButtonProps,
            saveButtonProps: saveButtonProps,
            saveAsNewButtonProps: saveAsNewButtonProps,
            DefaultButtonBar: DefaultButtonBar,
        },
        shareStatusProps: {
            shareStatus: shareInfo.shareStatus,
            isUnderStrictControl: !!(persistedDashboard === null || persistedDashboard === void 0 ? void 0 : persistedDashboard.isUnderStrictControl),
        },
        lockedStatusProps: {
            isLocked: !!shareInfo.isLocked,
        },
        DefaultTopBar: DefaultTopBar,
    };
};
var TopBarCore = function (props) {
    var menuButtonProps = props.menuButtonProps, titleProps = props.titleProps, buttonBarProps = props.buttonBarProps, shareStatusProps = props.shareStatusProps, lockedStatusProps = props.lockedStatusProps;
    return (React.createElement("div", { className: "dash-header s-top-bar" },
        React.createElement("div", { className: "dash-header-inner" },
            React.createElement(DefaultLockedStatus, __assign({}, lockedStatusProps)),
            React.createElement(Title, __assign({}, titleProps)),
            React.createElement(DefaultShareStatus, __assign({}, shareStatusProps)),
            React.createElement(ButtonBar, __assign({}, buttonBarProps))),
        React.createElement(MenuButton, __assign({}, menuButtonProps))));
};
/**
 * @alpha
 */
export function DefaultTopBar(props) {
    var isExport = useDashboardSelector(selectIsExport);
    if (isExport) {
        return React.createElement(HiddenTopBar, __assign({}, props));
    }
    return React.createElement(TopBarCore, __assign({}, props));
}
//# sourceMappingURL=DefaultTopBar.js.map