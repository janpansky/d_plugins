import { __assign } from "tslib";
// (C) 2020-2022 GoodData Corporation
import React, { useCallback, useMemo } from "react";
import { objRefToString, isWidget, } from "@gooddata/sdk-model";
import { LRUCache } from "@gooddata/util";
import { useDashboardSelector, selectIsExport, selectIsLayoutEmpty, selectLayout, selectInsightsMap, selectEnableWidgetCustomHeight, } from "../../model";
import { useDashboardComponentsContext } from "../dashboardContexts";
import { DashboardLayoutWidget } from "./DashboardLayoutWidget";
import { EmptyDashboardError } from "./EmptyDashboardError";
import { DashboardLayout, DashboardLayoutBuilder, } from "./DefaultDashboardLayoutRenderer";
import { RenderModeAwareDashboardLayoutSectionHeaderRenderer } from "./DefaultDashboardLayoutRenderer/RenderModeAwareDashboardLayoutSectionHeaderRenderer";
import { getMemoizedWidgetSanitizer } from "./DefaultDashboardLayoutUtils";
/**
 * Get dashboard layout for exports.
 *  - Create new extra rows if current row has width of widgets greater than 12
 *
 * @internal
 * @param layout - dashboard layout to modify
 * @returns transformed layout
 */
function getDashboardLayoutForExport(layout) {
    var dashLayout = DashboardLayoutBuilder.for(layout);
    var layoutFacade = dashLayout.facade();
    var sections = layoutFacade.sections();
    var screenSplitSections = sections.map(function (section) { return ({
        items: section.items().asGridRows("xl"),
        header: section.header(),
    }); });
    dashLayout.removeSections();
    screenSplitSections.forEach(function (wrappedSection) {
        wrappedSection.items.forEach(function (rowSection, index) {
            dashLayout.createSection(function (section) {
                rowSection.forEach(function (item) {
                    if (index === 0) {
                        section.header(wrappedSection.header);
                    }
                    section.createItem(item.size().xl, function (i) { return i.widget(item.widget()); });
                });
                return section;
            });
        });
    });
    return dashLayout.build();
}
var itemKeyGetter = function (keyGetterProps) {
    var widget = keyGetterProps.item.widget();
    if (isWidget(widget)) {
        return objRefToString(widget.ref);
    }
    return keyGetterProps.item.index().toString();
};
/**
 * @alpha
 */
export var DefaultDashboardLayout = function (props) {
    var onFiltersChange = props.onFiltersChange, onDrill = props.onDrill, onError = props.onError, CustomError = props.ErrorComponent;
    var ErrorComponent = useDashboardComponentsContext({ ErrorComponent: CustomError }).ErrorComponent;
    var layout = useDashboardSelector(selectLayout);
    var isLayoutEmpty = useDashboardSelector(selectIsLayoutEmpty);
    var enableWidgetCustomHeight = useDashboardSelector(selectEnableWidgetCustomHeight);
    var insights = useDashboardSelector(selectInsightsMap);
    var isExport = useDashboardSelector(selectIsExport);
    var getInsightByRef = useCallback(function (insightRef) {
        return insights.get(insightRef);
    }, [insights]);
    var sanitizeWidgets = useMemo(function () {
        // keep the cache local so that it is cleared when the dashboard changes for example and this component is remounted
        var cache = new LRUCache({ maxSize: 100 });
        return getMemoizedWidgetSanitizer(cache);
    }, []);
    var transformedLayout = useMemo(function () {
        if (isExport) {
            return getDashboardLayoutForExport(layout);
        }
        return DashboardLayoutBuilder.for(layout)
            .modifySections(function (section) {
            return section.modifyItems(sanitizeWidgets(getInsightByRef, enableWidgetCustomHeight));
        })
            .build();
    }, [layout, isExport, getInsightByRef, enableWidgetCustomHeight, sanitizeWidgets]);
    var widgetRenderer = useCallback(function (renderProps) {
        return (React.createElement(DashboardLayoutWidget, __assign({ onError: onError, onDrill: onDrill, onFiltersChange: onFiltersChange }, renderProps)));
    }, [onError, onDrill, onFiltersChange]);
    return isLayoutEmpty ? (React.createElement(EmptyDashboardError, { ErrorComponent: ErrorComponent })) : (React.createElement(DashboardLayout, { className: isExport ? "export-mode" : "", layout: transformedLayout, itemKeyGetter: itemKeyGetter, widgetRenderer: widgetRenderer, enableCustomHeight: enableWidgetCustomHeight, sectionHeaderRenderer: RenderModeAwareDashboardLayoutSectionHeaderRenderer }));
};
//# sourceMappingURL=DefaultDashboardLayout.js.map