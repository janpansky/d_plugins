// (C) 2020-2022 GoodData Corporation
import React from "react";
import { isWidget, widgetType as getWidgetType, isKpiWidget, isInsightWidget, } from "@gooddata/sdk-model";
import { selectEnableWidgetCustomHeight, selectInsightsMap, selectSettings, useDashboardSelector, } from "../../model";
import { DashboardWidget } from "../widget";
import { getDashboardLayoutItemHeight, getDashboardLayoutItemHeightForRatioAndScreen, getDashboardLayoutWidgetDefaultHeight, } from "./DefaultDashboardLayoutRenderer";
import { useDashboardComponentsContext } from "../dashboardContexts";
function calculateWidgetMinHeight(widget, currentSize, insights, settings) {
    var widgetType;
    var insight;
    var content;
    if (isWidget(widget)) {
        widgetType = getWidgetType(widget);
    }
    if (isInsightWidget(widget)) {
        insight = insights.get(widget.insight);
        content = insight;
    }
    if (isKpiWidget(widget)) {
        content = widget.kpi;
    }
    return (getDashboardLayoutItemHeight(currentSize) ||
        (!currentSize.heightAsRatio
            ? getDashboardLayoutWidgetDefaultHeight(settings, widgetType, content)
            : undefined));
}
/**
 * Tests in KD require widget index for css selectors.
 * Widget index equals to the widget order in the layout.
 */
function getWidgetIndex(item) {
    var _a, _b;
    var sectionIndex = item.section().index();
    var itemsInSectionsBefore = 0;
    for (var i = 0; i < sectionIndex; i += 1) {
        itemsInSectionsBefore += (_b = (_a = item.section().layout().section(i)) === null || _a === void 0 ? void 0 : _a.items().count()) !== null && _b !== void 0 ? _b : 0;
    }
    var index = itemsInSectionsBefore + item.index();
    return index;
}
/**
 * @internal
 */
export var DashboardLayoutWidget = function (props) {
    var item = props.item, screen = props.screen, DefaultWidgetRenderer = props.DefaultWidgetRenderer, onDrill = props.onDrill, onFiltersChange = props.onFiltersChange, onError = props.onError;
    var insights = useDashboardSelector(selectInsightsMap);
    var settings = useDashboardSelector(selectSettings);
    var enableWidgetCustomHeight = useDashboardSelector(selectEnableWidgetCustomHeight);
    var _a = useDashboardComponentsContext(), ErrorComponent = _a.ErrorComponent, LoadingComponent = _a.LoadingComponent;
    // TODO: we should probably do something more meaningful when item has no widget; should that even
    //  be allowed? undefined widget will make things explode down the line away so..
    var widget = item.widget();
    var currentSize = item.size()[screen];
    var minHeight = calculateWidgetMinHeight(widget, currentSize, insights, settings);
    var height = currentSize.heightAsRatio && !currentSize.gridHeight
        ? getDashboardLayoutItemHeightForRatioAndScreen(currentSize, screen)
        : undefined;
    var allowOverflow = !!currentSize.heightAsRatio;
    var className = enableWidgetCustomHeight ? "custom-height" : undefined;
    var index = getWidgetIndex(item);
    return (React.createElement(DefaultWidgetRenderer, { DefaultWidgetRenderer: DefaultWidgetRenderer, item: item, screen: screen, allowOverflow: allowOverflow, height: height, minHeight: minHeight, className: className },
        React.createElement(DashboardWidget
        // @ts-expect-error Don't expose index prop on public interface (we need it only for css class for KD tests)
        , { 
            // @ts-expect-error Don't expose index prop on public interface (we need it only for css class for KD tests)
            index: index, screen: screen, onDrill: onDrill, onError: onError, onFiltersChange: onFiltersChange, widget: widget, ErrorComponent: ErrorComponent, LoadingComponent: LoadingComponent })));
};
//# sourceMappingURL=DashboardLayoutWidget.js.map