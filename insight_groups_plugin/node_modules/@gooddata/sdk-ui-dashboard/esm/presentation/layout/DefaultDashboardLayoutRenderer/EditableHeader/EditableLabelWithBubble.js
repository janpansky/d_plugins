import { __read } from "tslib";
// (C) 2019-2022 GoodData Corporation
import React, { useCallback, useState } from "react";
import { Bubble, EditableLabel } from "@gooddata/sdk-ui-kit";
import { useIntl } from "react-intl";
var BUBBLE_ALIGN_POINTS = [{ align: "bl tl" }];
var ARROW_OFFSETS = { "bl tl": [0, 7] };
var BUBBLE_STYLE = "bubble-primary";
export function EditableLabelWithBubble(_a) {
    var onEditingStart = _a.onEditingStart, maxLength = _a.maxLength, value = _a.value, warningLimit = _a.warningLimit, onCancel = _a.onCancel, alignTo = _a.alignTo, className = _a.className, maxRows = _a.maxRows, placeholderMessage = _a.placeholderMessage, children = _a.children, onSubmit = _a.onSubmit;
    var intl = useIntl();
    var _b = __read(useState(value), 2), currentValue = _b[0], setCurrentValue = _b[1];
    var _c = __read(useState(false), 2), editing = _c[0], setEditing = _c[1];
    var charactersCountLeft = maxLength - currentValue.length;
    var maximumCharactersCount = maxLength;
    var bubbleMessage = intl.formatMessage({ id: "layout.header.characters.left" }, { currentCharactersCount: charactersCountLeft, maximumCharactersCount: maximumCharactersCount });
    var currentValueLength = currentValue.length;
    var isBubbleVisible = editing && maxLength - currentValueLength <= warningLimit;
    var onStart = useCallback(function () {
        setEditing(true);
        onEditingStart();
    }, [onEditingStart]);
    var onCancelCallback = useCallback(function () {
        setEditing(true);
        setCurrentValue(value);
        onCancel();
    }, [onCancel, value]);
    var onSubmitCallback = useCallback(function (newValue) {
        setEditing(true);
        setCurrentValue(newValue);
        onSubmit(newValue);
    }, [onSubmit]);
    var onChange = useCallback(function (newValue) {
        setCurrentValue(newValue);
    }, []);
    return (React.createElement(React.Fragment, null,
        React.createElement(EditableLabel, { className: className, maxRows: maxRows, value: value, maxLength: maxLength, placeholder: placeholderMessage, onEditingStart: onStart, onCancel: onCancelCallback, onChange: onChange, onSubmit: onSubmitCallback }, children),
        isBubbleVisible ? (React.createElement(Bubble, { alignTo: alignTo, className: BUBBLE_STYLE, alignPoints: BUBBLE_ALIGN_POINTS, arrowOffsets: ARROW_OFFSETS }, bubbleMessage)) : null));
}
//# sourceMappingURL=EditableLabelWithBubble.js.map