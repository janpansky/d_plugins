import { __assign } from "tslib";
// (C) 2022 GoodData Corporation
import React, { useCallback } from "react";
import { ConfirmDialog, Typography } from "@gooddata/sdk-ui-kit";
import { defineMessages, FormattedMessage, useIntl } from "react-intl";
import compact from "lodash/compact";
import { deleteDashboard, dispatchAndWaitFor, selectEnableKPIDashboardDrillToDashboard, selectEnableKPIDashboardScheduleRecipients, uiActions, useDashboardDispatch, useDashboardSelector, } from "../../model";
import { selectIsDeleteDialogOpen } from "../../model/store/ui/uiSelectors";
import { selectSupportsKpiWidgetCapability } from "../../model/store/backendCapabilities/backendCapabilitiesSelectors";
var deleteMessages = defineMessages({
    alertsAndEmails: {
        id: "deleteDashboardDialog.alertsAndEmailsMessage",
    },
    alerts: {
        id: "deleteDashboardDialog.alertsMessage",
    },
    emails: {
        id: "deleteDashboardDialog.emailsMessage",
    },
    drills: {
        id: "deleteDashboardDialog.drillMessage",
    },
});
/**
 * @internal
 */
export function useDeleteDialogProps() {
    var dispatch = useDashboardDispatch();
    var onCancel = useCallback(function () { return dispatch(uiActions.closeDeleteDialog()); }, [dispatch]);
    var onDelete = useCallback(function () {
        return dispatchAndWaitFor(dispatch, deleteDashboard()).finally(function () {
            dispatch(uiActions.closeDeleteDialog());
        });
    }, [dispatch]);
    var isVisible = useDashboardSelector(selectIsDeleteDialogOpen);
    var isKpiWidgetEnabled = useDashboardSelector(selectSupportsKpiWidgetCapability);
    var isScheduleEmailsEnabled = useDashboardSelector(selectEnableKPIDashboardScheduleRecipients);
    var isDrillToDashboardEnabled = useDashboardSelector(selectEnableKPIDashboardDrillToDashboard);
    return {
        isVisible: isVisible,
        isKpiWidgetEnabled: isKpiWidgetEnabled,
        isScheduleEmailsEnabled: isScheduleEmailsEnabled,
        isDrillToDashboardEnabled: isDrillToDashboardEnabled,
        onCancel: onCancel,
        onDelete: onDelete,
    };
}
/**
 * @internal
 */
export var DefaultDeleteDialog = function (props) {
    var isVisible = props.isVisible, isKpiWidgetEnabled = props.isKpiWidgetEnabled, isScheduleEmailsEnabled = props.isScheduleEmailsEnabled, isDrillToDashboardEnabled = props.isDrillToDashboardEnabled, onDelete = props.onDelete, onCancel = props.onCancel;
    var intl = useIntl();
    if (!isVisible) {
        return null;
    }
    var messages = compact([
        isKpiWidgetEnabled && isScheduleEmailsEnabled && deleteMessages.alertsAndEmails,
        isKpiWidgetEnabled && !isScheduleEmailsEnabled && deleteMessages.alerts,
        !isKpiWidgetEnabled && isScheduleEmailsEnabled && deleteMessages.emails,
        isDrillToDashboardEnabled && deleteMessages.drills,
    ]);
    return (React.createElement(ConfirmDialog, { onCancel: onCancel, onSubmit: onDelete, isPositive: false, className: "s-dialog s-delete_dashboard_dialog", headline: intl.formatMessage({ id: "deleteDashboardDialog.headline" }), cancelButtonText: intl.formatMessage({ id: "cancel" }), submitButtonText: intl.formatMessage({ id: "deleteDashboardDialog.submitButtonText" }) }, messages.map(function (message, index) { return (React.createElement(React.Fragment, { key: message.id },
        index !== 0 && React.createElement("br", null),
        React.createElement(Typography, { tagName: "p" },
            React.createElement(FormattedMessage, __assign({}, message))))); })));
};
//# sourceMappingURL=DefaultDeleteDialog.js.map