// (C) 2022 GoodData Corporation
import { HiddenFilterBar } from "../../presentation";
var FilterBarCustomizerState = /** @class */ (function () {
    function FilterBarCustomizerState(logger) {
        var _this = this;
        this.logger = logger;
        this.renderingMode = undefined;
        this.getRenderingMode = function () {
            var _a;
            return (_a = _this.renderingMode) !== null && _a !== void 0 ? _a : "default";
        };
        this.setRenderingMode = function (renderingMode) {
            if (_this.renderingMode) {
                _this.logger.warn("Redefining filter bar rendering mode to \"" + renderingMode + "\". Previous definition will be discarded.");
            }
            _this.renderingMode = renderingMode;
        };
    }
    return FilterBarCustomizerState;
}());
var SealedFilterBarCustomizerState = /** @class */ (function () {
    function SealedFilterBarCustomizerState(state, logger) {
        var _this = this;
        this.state = state;
        this.logger = logger;
        this.getRenderingMode = function () {
            return _this.state.getRenderingMode();
        };
        this.setRenderingMode = function (_renderingMode) {
            _this.logger.warn("Attempting to set filter bar rendering mode outside of plugin registration. Ignoring.");
        };
    }
    return SealedFilterBarCustomizerState;
}());
/**
 * @internal
 */
var DefaultFilterBarCustomizer = /** @class */ (function () {
    function DefaultFilterBarCustomizer(logger) {
        var _this = this;
        this.logger = logger;
        this.state = new FilterBarCustomizerState(this.logger);
        this.setRenderingMode = function (mode) {
            _this.state.setRenderingMode(mode);
            return _this;
        };
        this.getCustomizerResult = function () {
            return {
                // if rendering mode is "hidden", explicitly replace the component with HiddenFilterBar,
                // otherwise do nothing to allow the default or any custom component provided by the embedding application
                // to kick in
                FilterBarComponent: _this.state.getRenderingMode() === "hidden" ? HiddenFilterBar : undefined,
            };
        };
        this.sealCustomizer = function () {
            _this.state = new SealedFilterBarCustomizerState(_this.state, _this.logger);
            return _this;
        };
    }
    return DefaultFilterBarCustomizer;
}());
export { DefaultFilterBarCustomizer };
//# sourceMappingURL=filterBarCustomizer.js.map