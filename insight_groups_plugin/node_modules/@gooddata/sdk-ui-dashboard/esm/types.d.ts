import { IAbsoluteDateFilter, IInsight, INegativeAttributeFilter, IPositiveAttributeFilter, IRelativeDateFilter, LocalIdRef, ObjRef, DrillDefinition, IWidget, ShareStatus, IAccessGrantee } from "@gooddata/sdk-model";
import { IDrillEvent, OnFiredDrillEvent } from "@gooddata/sdk-ui";
import { DateFilterConfigValidationResult } from "./_staging/dateFilterConfig/validation";
/**
 * Supported dashboard filter type.
 * @beta
 */
export declare type IDashboardFilter = IAbsoluteDateFilter | IRelativeDateFilter | IPositiveAttributeFilter | INegativeAttributeFilter;
/**
 * Type-guard testing whether the provided object is an instance of {@link IDashboardFilter}.
 *
 * @alpha
 */
export declare function isDashboardFilter(obj: unknown): obj is IDashboardFilter;
/**
 * Supported dashboard drill definitions.
 *
 * @beta
 */
export declare type DashboardDrillDefinition = DrillDefinition | IDrillDownDefinition;
/**
 * A {@link @gooddata/sdk-ui#IDrillEvent} with added information about the drill event specific to the Dashboard context.
 * @beta
 */
export interface IDashboardDrillEvent extends IDrillEvent {
    /**
     * All the drilling interactions set in KPI dashboards that are relevant to the given drill event (including drill downs).
     */
    drillDefinitions: DashboardDrillDefinition[];
    /**
     * Reference to the widget that triggered the drill event.
     */
    widgetRef?: ObjRef;
}
/**
 * Callback called when a drill event occurs.
 * @beta
 */
export declare type OnFiredDashboardDrillEvent = (event: IDashboardDrillEvent) => ReturnType<OnFiredDrillEvent>;
/**
 * Implicit drill down context
 *
 * @alpha
 */
export interface IDrillDownContext {
    drillDefinition: IDrillDownDefinition;
    event: IDrillEvent;
}
/**
 * Information about the DrillDown interaction - the attribute that is next in the drill down hierarchy.
 * @beta
 */
export interface IDrillDownDefinition {
    type: "drillDown";
    /**
     * Local identifier of the attribute that triggered the drill down.
     */
    origin: LocalIdRef;
    /**
     * Target attribute display form for drill down.
     */
    target: ObjRef;
}
/**
 * Type-guard testing whether the provided object is an instance of {@link IDrillDownDefinition}.
 * @beta
 */
export declare function isDrillDownDefinition(obj: unknown): obj is IDrillDownDefinition;
/**
 * @alpha
 */
export interface DashboardDrillContext {
    /**
     * Particular insight that triggered the drill event.
     */
    insight?: IInsight;
    /**
     * Particular widget that triggered the drill event.
     */
    widget?: IWidget;
}
/**
 * @internal
 */
export interface IDrillToUrlPlaceholder {
    placeholder: string;
    identifier: string;
    toBeEncoded: boolean;
}
/**
 * All sharing properties describing sharing changes
 *
 * @public
 */
export interface ISharingProperties {
    /**
     * Dashboard share status
     *
     * @remarks
     * private - dashboard accessible only by its creator
     * shared - dashboard shared with closed set of users/groups
     * public - accessible by everyone in the workspace
     */
    shareStatus: ShareStatus;
    /**
     * For backends NOT forcing strict access this prop reflects its current setting of strict access
     *
     * @remarks
     * If set to true then object is not accessible via its URI/ref for people without access rights.
     * Otherwise object is accessible by its URI/ref, eg. when drilling to it.
     */
    isUnderStrictControl: boolean;
    /**
     * When set to true, the dashboard is locked and no one other than the administrator can edit it.
     */
    isLocked: boolean;
    /**
     * Access grantees to grant access to the dashboard to.
     */
    granteesToAdd: IAccessGrantee[];
    /**
     * Access grantees whose access to the dashboard to revoke.
     */
    granteesToDelete: IAccessGrantee[];
}
/**
 * @alpha
 */
export interface IMenuButtonItemsVisibility {
    /**
     * If set to true, the Save as new button will be visible. Defaults to false.
     */
    saveAsNewButton?: boolean;
    /**
     * If set to true, the Export to PDF button will be visible. Defaults to true.
     */
    pdfExportButton?: boolean;
    /**
     * If set to true, the Schedule emailing button will be visible. Defaults to true.
     */
    scheduleEmailButton?: boolean;
    /**
     * If set to true, the Delete button will be visible. Defaults to true.
     */
    deleteButton?: boolean;
}
/**
 * @internal
 */
export declare type RenderMode = "view" | "edit";
/**
 * @public
 */
export declare type DateFilterValidationResult = "TOO_MANY_CONFIGS" | "NO_CONFIG" | DateFilterConfigValidationResult;
//# sourceMappingURL=types.d.ts.map