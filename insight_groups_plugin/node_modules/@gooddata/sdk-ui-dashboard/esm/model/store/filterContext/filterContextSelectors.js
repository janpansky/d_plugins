// (C) 2021-2022 GoodData Corporation
import { createSelector } from "@reduxjs/toolkit";
import invariant from "ts-invariant";
import { areObjRefsEqual, isDashboardAttributeFilter, isDashboardDateFilter, } from "@gooddata/sdk-model";
import { newDisplayFormMap } from "../../../_staging/metadata/objRefMap";
import { createMemoizedSelector } from "../_infra/selectors";
import compact from "lodash/compact";
var selectSelf = createSelector(function (state) { return state; }, function (state) { return state.filterContext; });
/**
 * This selector returns original (stored) dashboard's filter context definition.
 *
 * @remarks
 * It is expected that the selector is called only after the filter context state is correctly initialized.
 * Invocations before initialization lead to invariant errors.
 *
 * @returns {@link @gooddata/sdk-backend-spi#IFilterContextDefinition} or `undefined` if original filter context definition is not set.
 *
 * @public
 */
export var selectOriginalFilterContextDefinition = createSelector(selectSelf, function (filterContextState) {
    invariant(filterContextState.filterContextDefinition, "attempting to access uninitialized filter context state");
    return filterContextState.originalFilterContextDefinition;
});
/**
 * This selector returns original (stored) dashboard's filters.
 *
 * @remarks
 * It is expected that the selector is called only after the filter context state is correctly initialized.
 * Invocations before initialization lead to invariant errors.
 *
 * @returns an array of {@link @gooddata/sdk-backend-spi#FilterContextItem} or an empty array.
 *
 * @public
 */
export var selectOriginalFilterContextFilters = createSelector(selectOriginalFilterContextDefinition, function (filterContext) { var _a; return (_a = filterContext === null || filterContext === void 0 ? void 0 : filterContext.filters) !== null && _a !== void 0 ? _a : []; });
/**
 * This selector returns current dashboard's filter context definition.
 *
 * @remarks
 * It is expected that the selector is called only after the filter context state is correctly initialized.
 * Invocations before initialization lead to invariant errors.
 *
 * @returns a {@link @gooddata/sdk-backend-spi#IFilterContextDefinition}
 *
 * @public
 */
export var selectFilterContextDefinition = createSelector(selectSelf, function (filterContextState) {
    invariant(filterContextState.filterContextDefinition, "attempting to access uninitialized filter context state");
    return filterContextState.filterContextDefinition;
});
/**
 * Selects dashboard's filter context identity.
 *
 * @remarks
 * The identity may be undefined in two circumstances:
 *
 * -  a new, yet unsaved dashboard; the filter context is saved together with the dashboard and after the
 *    save the identity will be known and added
 *
 * -  export of an existing, saved dashboard; during the export the dashboard receives a temporary
 *    filter context that represents values of filters at the time the export was initiated - which may
 *    be different from what is saved in the filter context itself. that temporary context is not
 *    persistent and lives only for that particular export operation.
 *
 * Invocations before initialization lead to invariant errors.
 *
 * @returns a {@link @gooddata/sdk-backend-spi#IDashboardObjectIdentity} or undefined, if the filter context identity is not set.
 *
 * @internal
 */
export var selectFilterContextIdentity = createSelector(selectSelf, function (filterContextState) {
    // this is intentional; want to fail fast when trying to access an optional identity of filter context \
    // but there is actually no filter context initialized for the dashboard
    invariant(filterContextState.filterContextDefinition, "attempting to access uninitialized filter context state");
    return filterContextState.filterContextIdentity;
});
/**
 * Selects list of display form metadata objects referenced by attribute filters.
 *
 * @remarks
 * Invocations before initialization lead to invariant errors.
 *
 * @returns an array of {@link @gooddata/sdk-backend-spi#IAttributeDisplayFormMetadataObject}
 *
 * @public
 */
export var selectAttributeFilterDisplayForms = createSelector(selectSelf, function (filterContextState) {
    invariant(filterContextState.attributeFilterDisplayForms, "attempting to access uninitialized filter context state");
    return filterContextState.attributeFilterDisplayForms;
});
/**
 * Selects map of display form metadata objects referenced by attribute filters.
 *
 * @remarks
 * Invocations before initialization lead to invariant errors.
 *
 * @returns a {@link ObjRefMap} of {@link @gooddata/sdk-backend-spi#IAttributeDisplayFormMetadataObject}
 *
 * @internal
 */
export var selectAttributeFilterDisplayFormsMap = createSelector(selectSelf, function (filterContextState) {
    invariant(filterContextState.attributeFilterDisplayForms, "attempting to access uninitialized filter context state");
    return newDisplayFormMap(filterContextState.attributeFilterDisplayForms);
});
/**
 * This selector returns dashboard's filter context filters.
 *
 * @remarks
 * It is expected that the selector is called only after the filter context state is correctly initialized.
 * Invocations before initialization lead to invariant errors.
 *
 * @public
 */
export var selectFilterContextFilters = createSelector(selectFilterContextDefinition, function (filterContext) { return filterContext.filters; });
/**
 * This selector returns dashboard's filter context attribute filters.
 *
 * @remarks
 * It is expected that the selector is called only after the filter context state is correctly initialized.
 * Invocations before initialization lead to invariant errors.
 *
 * @public
 */
export var selectFilterContextAttributeFilters = createSelector(selectFilterContextFilters, function (filters) { return filters.filter(isDashboardAttributeFilter); });
/**
 * This selector returns dashboard's filter context date filter.
 *
 * @remarks
 * It is expected that the selector is called only after the filter context state is correctly initialized.
 * Invocations before initialization lead to invariant errors.
 *
 * @public
 */
export var selectFilterContextDateFilter = createSelector(selectFilterContextFilters, function (filters) { return filters.find(isDashboardDateFilter); });
/**
 * Creates a selector for selecting attribute filter by its displayForm {@link @gooddata/sdk-model#ObjRef}.
 *
 * @remarks
 * Invocations before initialization lead to invariant errors.
 *
 * @public
 */
export var selectFilterContextAttributeFilterByDisplayForm = createMemoizedSelector(function (displayForm) {
    return createSelector(selectAttributeFilterDisplayFormsMap, selectFilterContextAttributeFilters, function (attributeDisplayFormsMap, attributeFilters) {
        var df = attributeDisplayFormsMap.get(displayForm);
        return attributeFilters.find(function (filter) {
            return areObjRefsEqual(filter.attributeFilter.displayForm, df === null || df === void 0 ? void 0 : df.ref);
        });
    });
});
/**
 * Creates a selector for selecting attribute filter by its localId.
 *
 * @remarks
 * Invocations before initialization lead to invariant errors.
 *
 * @public
 */
export var selectFilterContextAttributeFilterByLocalId = createMemoizedSelector(function (localId) {
    return createSelector(selectFilterContextAttributeFilters, function (attributeFilters) {
        return attributeFilters.find(function (filter) { return filter.attributeFilter.localIdentifier === localId; });
    });
});
/**
 * Creates a selector for selecting attribute filter index by its localId.
 *
 * @remarks
 * Invocations before initialization lead to invariant errors.
 *
 * @public
 */
export var selectFilterContextAttributeFilterIndexByLocalId = createMemoizedSelector(function (localId) {
    return createSelector(selectFilterContextAttributeFilters, function (attributeFilters) {
        return attributeFilters.findIndex(function (filter) { return filter.attributeFilter.localIdentifier === localId; });
    });
});
/**
 * Creates a selector for selecting all descendants of the attribute filter with given localId.
 *
 * @remarks
 * Invocations before initialization lead to invariant errors.
 *
 * @public
 */
export var selectAttributeFilterDescendants = createMemoizedSelector(function (localId) {
    return createSelector(selectFilterContextAttributeFilters, function (attributeFilters) {
        var toCheck = compact([localId]);
        var result = new Set();
        var _loop_1 = function () {
            var current = toCheck.pop();
            var children = attributeFilters.filter(function (f) { var _a; return (_a = f.attributeFilter.filterElementsBy) === null || _a === void 0 ? void 0 : _a.some(function (parent) { return parent.filterLocalIdentifier === current; }); });
            children.forEach(function (child) {
                result.add(child.attributeFilter.localIdentifier);
                toCheck.push(child.attributeFilter.localIdentifier);
            });
        };
        while (toCheck.length) {
            _loop_1();
        }
        return Array.from(result);
    });
});
/**
 * Creates a selector for selecting all filters with different reference than the given one.
 *
 * @internal
 */
export var selectOtherContextAttributeFilters = createMemoizedSelector(function (ref) {
    return createSelector(selectFilterContextAttributeFilters, function (attributeFilters) {
        return attributeFilters.filter(function (attributeFilter) { return !areObjRefsEqual(attributeFilter.attributeFilter.displayForm, ref); });
    });
});
/**
 * Creates a selector for selecting filter identifier to index map.
 *
 * @remarks
 * The mapping's purpose is to enable efficient handling and reading from the connecting attributes
 * matrix.
 *
 * @see {@link selectConnectingAttributesMatrix} for details.
 *
 * @internal
 */
export var selectFiltersToIndexMap = createSelector(selectSelf, function (state) { return state.filtersToIndexMap; });
/**
 * Creates a selector for selecting connecting attributes matrix.
 *
 * @remarks
 * The matrix is used to check if the pair of attribute filters are able to create parent child
 * relationship.
 *
 * @internal
 */
export var selectConnectingAttributesMatrix = createSelector(selectSelf, function (state) { return state.connectingAttributeMatrix; });
/**
 * Creates a selector to get a display form of the filter defined by its local identifier.
 *
 * @internal
 */
export var selectAttributeFilterDisplayFormByLocalId = createMemoizedSelector(function (localId) {
    return createSelector(selectFilterContextAttributeFilters, function (filters) {
        var filter = filters.find(function (filter) { return filter.attributeFilter.localIdentifier === localId; });
        invariant(filter, "Unable to find current filter to get its title.");
        return filter.attributeFilter.displayForm;
    });
});
/**
 * Creates a selector which checks for a circular dependency between filters.
 *
 * @internal
 */
export var selectIsCircularDependency = createMemoizedSelector(function (currentFilterLocalId, neighborFilterLocalid) {
    return createSelector(selectAttributeFilterDescendants(currentFilterLocalId), function (descendants) {
        return descendants.some(function (descendant) { return descendant === neighborFilterLocalid; });
    });
});
/**
 * Creates a selector returning connecting attributes for a two attribute filters defined by their local identifiers.
 *
 * @internal
 */
export var selectConnectingAttributesForFilters = createMemoizedSelector(function (currentFilterLocalId, neighborFilterId) {
    return createSelector(selectFiltersToIndexMap, selectConnectingAttributesMatrix, function (filtersToIndexMap, connectingAttributesMatrix) {
        var currentFilterIndex = filtersToIndexMap === null || filtersToIndexMap === void 0 ? void 0 : filtersToIndexMap[currentFilterLocalId];
        var neighborFilterIndex = filtersToIndexMap === null || filtersToIndexMap === void 0 ? void 0 : filtersToIndexMap[neighborFilterId];
        invariant(currentFilterIndex !== undefined &&
            neighborFilterIndex !== undefined &&
            connectingAttributesMatrix, "Could not acquire required information to configure the attribute filter.");
        return connectingAttributesMatrix[currentFilterIndex][neighborFilterIndex];
    });
});
//# sourceMappingURL=filterContextSelectors.js.map