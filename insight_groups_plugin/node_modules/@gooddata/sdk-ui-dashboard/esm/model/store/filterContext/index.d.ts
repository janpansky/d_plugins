export declare const filterContextSliceReducer: import("@reduxjs/toolkit").Reducer<import("./filterContextState").FilterContextState, import("@reduxjs/toolkit").AnyAction>;
export declare const filterContextActions: import("@reduxjs/toolkit").CaseReducerActions<{
    setFilterContext: import("@reduxjs/toolkit").CaseReducer<import("./filterContextState").FilterContextState, {
        payload: {
            filterContextDefinition: import("@gooddata/sdk-model").IFilterContextDefinition;
            originalFilterContextDefinition?: import("@gooddata/sdk-model").IFilterContextDefinition | undefined;
            attributeFilterDisplayForms: import("@gooddata/sdk-model").IAttributeDisplayFormMetadataObject[];
            filterContextIdentity?: import("@gooddata/sdk-model").IDashboardObjectIdentity | undefined;
            filterToIndexMap?: Record<string, number> | undefined;
            connectingAttributesMatrix?: import("../..").ConnectingAttributeMatrix | undefined;
        };
        type: string;
    }>;
    updateFilterContextIdentity: import("@reduxjs/toolkit").CaseReducer<import("./filterContextState").FilterContextState, {
        payload: {
            filterContextIdentity?: import("@gooddata/sdk-model").IDashboardObjectIdentity | undefined;
        };
        type: string;
    }>;
    removeAttributeFilterDisplayForms: import("@reduxjs/toolkit").CaseReducer<import("./filterContextState").FilterContextState, {
        payload: import("@gooddata/sdk-model").ObjRef;
        type: string;
    }>;
    addAttributeFilterDisplayForm: import("@reduxjs/toolkit").CaseReducer<import("./filterContextState").FilterContextState, {
        payload: import("@gooddata/sdk-model").IAttributeDisplayFormMetadataObject;
        type: string;
    }>;
    addAttributeFilter: import("@reduxjs/toolkit").CaseReducer<import("./filterContextState").FilterContextState, {
        payload: import("./filterContextReducers").IAddAttributeFilterPayload;
        type: string;
    }>;
    removeAttributeFilter: import("@reduxjs/toolkit").CaseReducer<import("./filterContextState").FilterContextState, {
        payload: import("./filterContextReducers").IRemoveAttributeFilterPayload;
        type: string;
    }>;
    moveAttributeFilter: import("@reduxjs/toolkit").CaseReducer<import("./filterContextState").FilterContextState, {
        payload: import("./filterContextReducers").IMoveAttributeFilterPayload;
        type: string;
    }>;
    updateAttributeFilterSelection: import("@reduxjs/toolkit").CaseReducer<import("./filterContextState").FilterContextState, {
        payload: import("./filterContextReducers").IUpdateAttributeFilterSelectionPayload;
        type: string;
    }>;
    setAttributeFilterParents: import("@reduxjs/toolkit").CaseReducer<import("./filterContextState").FilterContextState, {
        payload: import("./filterContextReducers").ISetAttributeFilterParentsPayload;
        type: string;
    }>;
    clearAttributeFiltersSelection: import("@reduxjs/toolkit").CaseReducer<import("./filterContextState").FilterContextState, {
        payload: import("./filterContextReducers").IClearAttributeFiltersSelectionPayload;
        type: string;
    }>;
    upsertDateFilter: import("@reduxjs/toolkit").CaseReducer<import("./filterContextState").FilterContextState, {
        payload: import("./filterContextReducers").IUpsertDateFilterPayload;
        type: string;
    }>;
    saveFilterToIndexMap: import("@reduxjs/toolkit").CaseReducer<import("./filterContextState").FilterContextState, {
        payload: import("./filterContextReducers").ISaveFilterToIndexMapPayload;
        type: string;
    }>;
    saveConnectingAttributesMatrix: import("@reduxjs/toolkit").CaseReducer<import("./filterContextState").FilterContextState, {
        payload: import("./filterContextReducers").ISaveConnectingAttributesMatrixPayload;
        type: string;
    }>;
    changeAttributeDisplayForm: import("@reduxjs/toolkit").CaseReducer<import("./filterContextState").FilterContextState, {
        payload: import("./filterContextReducers").IChangeAttributeDisplayFormPayload;
        type: string;
    }>;
    updateConnectingAttributesOnFilterAdded: import("@reduxjs/toolkit").CaseReducer<import("./filterContextState").FilterContextState, {
        payload: import("./filterContextReducers").IUpdateConnectingAttributesOnFilterAddedPayload;
        type: string;
    }>;
    updateConnectingAttributesOnFilterDeleted: import("@reduxjs/toolkit").CaseReducer<import("./filterContextState").FilterContextState, {
        payload: string;
        type: string;
    }>;
}>;
//# sourceMappingURL=index.d.ts.map