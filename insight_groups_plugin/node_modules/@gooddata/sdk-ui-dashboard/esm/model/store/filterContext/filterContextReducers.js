// (C) 2021-2022 GoodData Corporation
import { __assign, __read, __spread, __values } from "tslib";
import { v4 as uuidv4 } from "uuid";
import invariant from "ts-invariant";
import cloneDeep from "lodash/cloneDeep";
import { areObjRefsEqual, attributeElementsIsEmpty, isAttributeElementsByRef, isDashboardAttributeFilter, isDashboardDateFilter, } from "@gooddata/sdk-model";
var generateFilterLocalIdentifier = function () { return uuidv4().replace(/-/g, ""); };
var setFilterContext = function (state, action) {
    var _a;
    var _b = action.payload, filterContextDefinition = _b.filterContextDefinition, originalFilterContextDefinition = _b.originalFilterContextDefinition, filterContextIdentity = _b.filterContextIdentity, attributeFilterDisplayForms = _b.attributeFilterDisplayForms, filterToIndexMap = _b.filterToIndexMap, connectingAttributesMatrix = _b.connectingAttributesMatrix;
    state.filterContextDefinition = __assign(__assign({}, filterContextDefinition), { 
        // make sure attribute filters always have localId
        filters: (_a = filterContextDefinition.filters) === null || _a === void 0 ? void 0 : _a.map(function (filter) {
            var _a;
            return isDashboardAttributeFilter(filter)
                ? {
                    attributeFilter: __assign(__assign({}, filter.attributeFilter), { localIdentifier: (_a = filter.attributeFilter.localIdentifier) !== null && _a !== void 0 ? _a : generateFilterLocalIdentifier() }),
                }
                : filter;
        }) });
    state.originalFilterContextDefinition = originalFilterContextDefinition;
    state.filterContextIdentity = filterContextIdentity;
    state.attributeFilterDisplayForms = attributeFilterDisplayForms;
    state.filtersToIndexMap = filterToIndexMap;
    state.connectingAttributeMatrix = connectingAttributesMatrix;
};
var updateFilterContextIdentity = function (state, action) {
    state.filterContextIdentity = action.payload.filterContextIdentity;
};
//
//
//
var removeAttributeFilterDisplayForms = function (state, action) {
    invariant(state.attributeFilterDisplayForms, "attempting to work with uninitialized state");
    state.attributeFilterDisplayForms = state.attributeFilterDisplayForms.filter(function (df) {
        return !areObjRefsEqual(df, action.payload);
    });
};
var addAttributeFilterDisplayForm = function (state, action) {
    invariant(state.attributeFilterDisplayForms, "attempting to work with uninitialized state");
    state.attributeFilterDisplayForms.push(action.payload);
};
var upsertDateFilter = function (state, action) {
    invariant(state.filterContextDefinition, "Attempt to edit uninitialized filter context");
    var existingFilterIndex = state.filterContextDefinition.filters.findIndex(function (item) {
        return isDashboardDateFilter(item);
    });
    /**
     * TODO: This will cause problems once we support dateDataset-specific date filters (then, we might want
     * to keep even the all time filters to carry the information about the selected dateDataset).
     */
    if (action.payload.type === "allTime") {
        if (existingFilterIndex >= 0) {
            // if allTime remove the date filter altogether
            state.filterContextDefinition.filters.splice(existingFilterIndex, 1);
        }
    }
    else if (existingFilterIndex >= 0) {
        var _a = action.payload, type = _a.type, granularity = _a.granularity, from = _a.from, to = _a.to;
        var dateFilter = state.filterContextDefinition.filters[existingFilterIndex];
        if (isDashboardDateFilter(dateFilter)) {
            dateFilter.dateFilter.type = type;
            dateFilter.dateFilter.granularity = granularity;
            dateFilter.dateFilter.from = from;
            dateFilter.dateFilter.to = to;
        }
    }
    else {
        var _b = action.payload, type = _b.type, granularity = _b.granularity, from = _b.from, to = _b.to;
        state.filterContextDefinition.filters.unshift({
            dateFilter: {
                granularity: granularity,
                type: type,
                from: from,
                to: to,
            },
        });
    }
};
var updateAttributeFilterSelection = function (state, action) {
    invariant(state.filterContextDefinition, "Attempt to edit uninitialized filter context");
    var _a = action.payload, elements = _a.elements, filterLocalId = _a.filterLocalId, negativeSelection = _a.negativeSelection;
    var existingFilterIndex = state.filterContextDefinition.filters.findIndex(function (item) { return isDashboardAttributeFilter(item) && item.attributeFilter.localIdentifier === filterLocalId; });
    invariant(existingFilterIndex >= 0, "Attempt to update non-existing filter");
    state.filterContextDefinition.filters[existingFilterIndex] = {
        attributeFilter: __assign(__assign({}, state.filterContextDefinition.filters[existingFilterIndex]
            .attributeFilter), { attributeElements: elements, negativeSelection: negativeSelection }),
    };
};
var addAttributeFilter = function (state, action) {
    invariant(state.filterContextDefinition, "Attempt to edit uninitialized filter context");
    var _a = action.payload, displayForm = _a.displayForm, index = _a.index, initialIsNegativeSelection = _a.initialIsNegativeSelection, initialSelection = _a.initialSelection, parentFilters = _a.parentFilters;
    var hasSelection = initialSelection && !attributeElementsIsEmpty(initialSelection);
    var isNegative = initialIsNegativeSelection || !hasSelection;
    var filter = {
        attributeFilter: {
            attributeElements: initialSelection !== null && initialSelection !== void 0 ? initialSelection : { uris: [] },
            displayForm: displayForm,
            negativeSelection: isNegative,
            localIdentifier: generateFilterLocalIdentifier(),
            filterElementsBy: parentFilters ? __spread(parentFilters) : undefined,
        },
    };
    if (index === -1) {
        state.filterContextDefinition.filters.push(filter);
    }
    else {
        state.filterContextDefinition.filters.splice(index, 0, filter);
    }
};
var removeAttributeFilter = function (state, action) {
    invariant(state.filterContextDefinition, "Attempt to edit uninitialized filter context");
    var filterLocalId = action.payload.filterLocalId;
    state.filterContextDefinition.filters = state.filterContextDefinition.filters.filter(function (item) { return isDashboardDateFilter(item) || item.attributeFilter.localIdentifier !== filterLocalId; });
};
var moveAttributeFilter = function (state, action) {
    invariant(state.filterContextDefinition, "Attempt to edit uninitialized filter context");
    var _a = action.payload, filterLocalId = _a.filterLocalId, index = _a.index;
    var currentFilterIndex = state.filterContextDefinition.filters.findIndex(function (item) { return isDashboardAttributeFilter(item) && item.attributeFilter.localIdentifier === filterLocalId; });
    invariant(currentFilterIndex >= 0, "Attempt to move non-existing filter");
    var filter = state.filterContextDefinition.filters[currentFilterIndex];
    state.filterContextDefinition.filters.splice(currentFilterIndex, 1);
    if (index === -1) {
        state.filterContextDefinition.filters.push(filter);
    }
    else {
        state.filterContextDefinition.filters.splice(index, 0, filter);
    }
};
var setAttributeFilterParents = function (state, action) {
    invariant(state.filterContextDefinition, "Attempt to edit uninitialized filter context");
    var _a = action.payload, filterLocalId = _a.filterLocalId, parentFilters = _a.parentFilters;
    var currentFilterIndex = state.filterContextDefinition.filters.findIndex(function (item) { return isDashboardAttributeFilter(item) && item.attributeFilter.localIdentifier === filterLocalId; });
    invariant(currentFilterIndex >= 0, "Attempt to set parent of a non-existing filter");
    state.filterContextDefinition.filters[currentFilterIndex].attributeFilter.filterElementsBy = __spread(parentFilters);
};
var clearAttributeFiltersSelection = function (state, action) {
    var filterLocalIds = action.payload.filterLocalIds;
    filterLocalIds.forEach(function (filterLocalId) {
        invariant(state.filterContextDefinition, "Attempt to edit uninitialized filter context");
        var currentFilterIndex = state.filterContextDefinition.filters.findIndex(function (item) {
            return isDashboardAttributeFilter(item) && item.attributeFilter.localIdentifier === filterLocalId;
        });
        invariant(currentFilterIndex >= 0, "Attempt to clear selection of a non-existing filter");
        var currentFilter = state.filterContextDefinition.filters[currentFilterIndex];
        currentFilter.attributeFilter.negativeSelection = true;
        currentFilter.attributeFilter.attributeElements = isAttributeElementsByRef(currentFilter.attributeFilter.attributeElements)
            ? { uris: [] }
            : { values: [] };
    });
};
/**
 * Saves the filterToIndexMap to the application state.
 */
var saveFilterToIndexMap = function (state, action) {
    var filterToIndexMap = action.payload.filterToIndexMap;
    state.filtersToIndexMap = filterToIndexMap;
};
var saveConnectingAttributesMatrix = function (state, action) {
    var connectingAttributesMatrix = action.payload.connectingAttributesMatrix;
    state.connectingAttributeMatrix = connectingAttributesMatrix;
};
/**
 * Changes the display form for the filter given by its local identifier.
 */
var changeAttributeDisplayForm = function (state, action) {
    invariant(state.filterContextDefinition, "Attempt to edit uninitialized filter context");
    var _a = action.payload, filterLocalId = _a.filterLocalId, displayForm = _a.displayForm;
    var currentFilterIndex = state.filterContextDefinition.filters.findIndex(function (item) { return isDashboardAttributeFilter(item) && item.attributeFilter.localIdentifier === filterLocalId; });
    invariant(currentFilterIndex >= 0, "Attempt to set parent of a non-existing filter");
    state.filterContextDefinition.filters[currentFilterIndex].attributeFilter.displayForm = __assign({}, displayForm);
};
var updateConnectingAttributesOnFilterAdded = function (state, action) {
    var e_1, _a;
    var _b;
    invariant(state.filtersToIndexMap, "Attempt to edit uninitialized filter context");
    var _c = action.payload, addedFilterLocalId = _c.addedFilterLocalId, connectingAttributes = _c.connectingAttributes;
    var index = findIndexForConnectingAttributesMapping(state.filtersToIndexMap);
    var connectingAttributeMatrix = cloneDeep(state.connectingAttributeMatrix);
    invariant(connectingAttributeMatrix, "Attempt to edit uninitialized or incorrectly initialized filter context");
    connectingAttributeMatrix[index] = [];
    try {
        for (var connectingAttributes_1 = __values(connectingAttributes), connectingAttributes_1_1 = connectingAttributes_1.next(); !connectingAttributes_1_1.done; connectingAttributes_1_1 = connectingAttributes_1.next()) {
            var connectingAttribute = connectingAttributes_1_1.value;
            var neighborFilterIndex = (_b = state.filtersToIndexMap) === null || _b === void 0 ? void 0 : _b[connectingAttribute.filterLocalId];
            invariant(neighborFilterIndex !== undefined, "Attempt to edit uninitialized or incorrectly initialized filter context");
            if (!connectingAttributeMatrix[neighborFilterIndex]) {
                connectingAttributeMatrix[neighborFilterIndex] = [];
            }
            connectingAttributeMatrix[neighborFilterIndex][index] = connectingAttribute.connectingAttributes;
            connectingAttributeMatrix[index][neighborFilterIndex] = connectingAttribute.connectingAttributes;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (connectingAttributes_1_1 && !connectingAttributes_1_1.done && (_a = connectingAttributes_1.return)) _a.call(connectingAttributes_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    state.filtersToIndexMap[addedFilterLocalId] = index;
    state.connectingAttributeMatrix = connectingAttributeMatrix;
};
var updateConnectingAttributesOnFilterDeleted = function (state, action) {
    var _a;
    var deletedFilterLocalId = action.payload;
    var deletedFilterIndex = (_a = state.filtersToIndexMap) === null || _a === void 0 ? void 0 : _a[deletedFilterLocalId];
    var connectingAttributeMatrix = cloneDeep(state.connectingAttributeMatrix);
    invariant(deletedFilterIndex !== undefined && connectingAttributeMatrix && state.filtersToIndexMap, "Attempt to edit uninitialized or incorrectly initialized filter context");
    for (var index = 0; index < connectingAttributeMatrix.length; index++) {
        connectingAttributeMatrix[index][deletedFilterIndex] = [];
        connectingAttributeMatrix[deletedFilterIndex][index] = [];
    }
    connectingAttributeMatrix[deletedFilterIndex] = [];
    state.connectingAttributeMatrix = connectingAttributeMatrix;
    delete state.filtersToIndexMap[deletedFilterLocalId];
};
/**
 * Find the first empty index for the connecting attributes matrix during new attribute filter
 * addition.
 *
 * @param filtersToIndexMap - the original connecting attributes matrix index mapping.
 *
 * @returns the first empty index in the connecting attributes matrix.
 */
function findIndexForConnectingAttributesMapping(filtersToIndexMap) {
    if (!filtersToIndexMap) {
        return 0;
    }
    var indexes = Object.values(filtersToIndexMap);
    for (var index = 0; index < indexes.length; index++) {
        if (indexes.indexOf(index) === -1) {
            return index;
        }
    }
    return indexes.length;
}
//
//
//
export var filterContextReducers = {
    setFilterContext: setFilterContext,
    updateFilterContextIdentity: updateFilterContextIdentity,
    removeAttributeFilterDisplayForms: removeAttributeFilterDisplayForms,
    addAttributeFilterDisplayForm: addAttributeFilterDisplayForm,
    addAttributeFilter: addAttributeFilter,
    removeAttributeFilter: removeAttributeFilter,
    moveAttributeFilter: moveAttributeFilter,
    updateAttributeFilterSelection: updateAttributeFilterSelection,
    setAttributeFilterParents: setAttributeFilterParents,
    clearAttributeFiltersSelection: clearAttributeFiltersSelection,
    upsertDateFilter: upsertDateFilter,
    saveFilterToIndexMap: saveFilterToIndexMap,
    saveConnectingAttributesMatrix: saveConnectingAttributesMatrix,
    changeAttributeDisplayForm: changeAttributeDisplayForm,
    updateConnectingAttributesOnFilterAdded: updateConnectingAttributesOnFilterAdded,
    updateConnectingAttributesOnFilterDeleted: updateConnectingAttributesOnFilterDeleted,
};
//# sourceMappingURL=filterContextReducers.js.map