import { IFilterContextDefinition, IAccessControlAware } from "@gooddata/sdk-model";
import { DashboardState } from "../types";
/**
 * Selects dashboard's descriptor.
 *
 * @internal
 */
export declare const selectDashboardDescriptor: import("@reduxjs/toolkit").OutputSelector<DashboardState, import("./metaState").DashboardDescriptor, (res: import("./metaState").DashboardMetaState) => import("./metaState").DashboardDescriptor>;
/**
 * Selects persisted IDashboard object - that is the IDashboard object that was used to initialize the rest
 * of the dashboard state of the dashboard component during the initial load of the dashboard.
 *
 * Note that this may be undefined when the dashboard component works with a dashboard that has not yet
 * been persisted (typically newly created dashboard being edited).
 *
 * @internal
 */
export declare const selectPersistedDashboard: import("@reduxjs/toolkit").OutputSelector<DashboardState, import("@gooddata/sdk-model").IDashboard<import("@gooddata/sdk-model").IDashboardWidget> | undefined, (res: import("./metaState").DashboardMetaState) => import("@gooddata/sdk-model").IDashboard<import("@gooddata/sdk-model").IDashboardWidget> | undefined>;
/**
 * Selects persisted IFilterContext/ITempFilterContext - that is the IFilterContext or ITempFilterContext that
 * was used to initialize the original filters of the dashboard component during the initial load of the
 * dashboard.
 *
 * Note that this may be undefined when the dashboard component works with a dashboard that has not yet
 * been persisted (typically newly created dashboard being edited).
 */
export declare const selectPersistedDashboardFilterContext: import("@reduxjs/toolkit").OutputSelector<DashboardState, import("@gooddata/sdk-model").IFilterContext | import("@gooddata/sdk-model").ITempFilterContext | undefined, (res: import("./metaState").DashboardMetaState) => import("@gooddata/sdk-model").IFilterContext | import("@gooddata/sdk-model").ITempFilterContext | undefined>;
/**
 * Selects persisted IFilterContextDefinition - that is the IFilterContext or ITempFilterContext that
 * was used to initialize the original filters of the dashboard component during the initial load of the
 * dashboard but removes ref, uri and identifier, effectively creating a clone of the stored value
 * that can be used independently.
 *
 * Note that this may be undefined when the dashboard component works with a dashboard that has not yet
 * been persisted (typically newly created dashboard being edited).
 */
export declare const selectPersistedDashboardFilterContextAsFilterContextDefinition: import("@reduxjs/toolkit").OutputSelector<DashboardState, IFilterContextDefinition | undefined, (res: import("@gooddata/sdk-model").IFilterContext | import("@gooddata/sdk-model").ITempFilterContext | undefined) => IFilterContextDefinition | undefined>;
/**
 * Selects ref of the persisted dashboard object that backs and is rendered-by the dashboard component.
 *
 * @remarks
 * Note that this may be undefined when the dashboard component works with a dashboard that has not yet
 * been persisted (typically newly created dashboard being edited).
 *
 * @public
 */
export declare const selectDashboardRef: import("@reduxjs/toolkit").OutputSelector<DashboardState, import("@gooddata/sdk-model").UriRef | import("@gooddata/sdk-model").IdentifierRef | undefined, (res: import("@gooddata/sdk-model").IDashboard<import("@gooddata/sdk-model").IDashboardWidget> | undefined) => import("@gooddata/sdk-model").UriRef | import("@gooddata/sdk-model").IdentifierRef | undefined>;
/**
 * Selects identifier of the persisted dashboard object that backs and is rendered-by the dashboard component.
 *
 * @remarks
 * Note that this may be undefined when the dashboard component works with a dashboard that has not yet
 * been persisted (typically newly created dashboard being edited).
 *
 * @public
 */
export declare const selectDashboardId: import("@reduxjs/toolkit").OutputSelector<DashboardState, string | undefined, (res: import("@gooddata/sdk-model").IDashboard<import("@gooddata/sdk-model").IDashboardWidget> | undefined) => string | undefined>;
/**
 * Selects URI of the persisted dashboard object that backs and is rendered-by the dashboard component.
 *
 * @remarks
 * Note that this may be undefined when the dashboard component works with a dashboard that has not yet
 * been persisted (typically newly created dashboard being edited).
 *
 * @public
 */
export declare const selectDashboardUri: import("@reduxjs/toolkit").OutputSelector<DashboardState, string | undefined, (res: import("@gooddata/sdk-model").IDashboard<import("@gooddata/sdk-model").IDashboardWidget> | undefined) => string | undefined>;
/**
 * Selects idRef of the persisted dashboard object that backs and is rendered-by the dashboard component.
 *
 * @remarks
 * Note that this may be undefined when the dashboard component works with a dashboard that has not yet
 * been persisted (typically newly created dashboard being edited).
 *
 * @public
 */
export declare const selectDashboardIdRef: import("@reduxjs/toolkit").OutputSelector<DashboardState, import("@gooddata/sdk-model").IdentifierRef | undefined, (res: string | undefined) => import("@gooddata/sdk-model").IdentifierRef | undefined>;
/**
 * Selects uriRef of the persisted dashboard object that backs and is rendered-by the dashboard component.
 *
 * @remarks
 * Note that this may be undefined when the dashboard component works with a dashboard that has not yet
 * been persisted (typically newly created dashboard being edited).
 *
 * @public
 */
export declare const selectDashboardUriRef: import("@reduxjs/toolkit").OutputSelector<DashboardState, import("@gooddata/sdk-model").UriRef | undefined, (res: string | undefined) => import("@gooddata/sdk-model").UriRef | undefined>;
/**
 * Selects a boolean indication if dashboard is new
 *
 * @internal
 */
export declare const selectIsNewDashboard: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res: import("@gooddata/sdk-model").UriRef | import("@gooddata/sdk-model").IdentifierRef | undefined) => boolean>;
/**
 * Selects current dashboard title.
 *
 * @public
 */
export declare const selectDashboardTitle: import("@reduxjs/toolkit").OutputSelector<DashboardState, string, (res: import("./metaState").DashboardDescriptor) => string>;
/**
 * Selects current dashboard description.
 *
 * @public
 */
export declare const selectDashboardDescription: import("@reduxjs/toolkit").OutputSelector<DashboardState, string, (res: import("./metaState").DashboardDescriptor) => string>;
/**
 * Selects dashboard tags.
 *
 * @public
 */
export declare const selectDashboardTags: import("@reduxjs/toolkit").OutputSelector<DashboardState, string[] | undefined, (res: import("./metaState").DashboardDescriptor) => string[] | undefined>;
/**
 * Selects dashboard share status.
 *
 * @alpha
 */
export declare const selectDashboardShareStatus: import("@reduxjs/toolkit").OutputSelector<DashboardState, import("@gooddata/sdk-model").ShareStatus, (res: import("./metaState").DashboardDescriptor) => import("@gooddata/sdk-model").ShareStatus>;
/**
 * Returns whether dashboard is private.
 *
 * @alpha
 */
export declare const selectIsDashboardPrivate: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res: import("@gooddata/sdk-model").ShareStatus) => boolean>;
/**
 * Selects dashboard lock status.
 *
 * @alpha
 */
export declare const selectDashboardLockStatus: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res: import("./metaState").DashboardDescriptor) => boolean>;
/**
 * Selects complete dashboard share info.
 *
 * @alpha
 */
export declare const selectDashboardShareInfo: import("@reduxjs/toolkit").OutputSelector<DashboardState, IAccessControlAware, (res: import("./metaState").DashboardDescriptor) => IAccessControlAware>;
/**
 * Selects a boolean indication if he dashboard has any changes to the dashboard filter compared to the persisted version (if any)
 *
 * @internal
 */
export declare const selectIsDateFilterChanged: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res1: import("@gooddata/sdk-model").IDashboardDateFilter | undefined, res2: import("@gooddata/sdk-model").IDashboardDateFilter | undefined) => boolean>;
/**
 * Selects a boolean indication if he dashboard has any changes to the attribute filters compared to the persisted version (if any)
 *
 * @internal
 */
export declare const selectIsAttributeFiltersChanged: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res1: import("@gooddata/sdk-model").IDashboardAttributeFilter[], res2: import("@gooddata/sdk-model").IDashboardAttributeFilter[]) => boolean>;
/**
 * Selects a boolean indication if he dashboard has any changes to the any of the filters compared to the persisted version (if any)
 *
 * @internal
 */
export declare const selectIsFiltersChanged: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res1: boolean, res2: boolean) => boolean>;
/**
 * Selects a boolean indication if he dashboard has any changes to the title compared to the persisted version (if any)
 *
 * @internal
 */
export declare const selectIsTitleChanged: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res1: string | undefined, res2: string) => boolean>;
/**
 * Selects a boolean indication if he dashboard has any changes to the layout compared to the persisted version (if any)
 *
 * @internal
 */
export declare const selectIsLayoutChanged: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res1: import("@gooddata/sdk-model").IDashboardLayout<import("@gooddata/sdk-model").IDashboardWidget> | undefined, res2: import("@gooddata/sdk-model").IDashboardLayout<import("../..").ExtendedDashboardWidget>) => boolean>;
/**
 * Selects a boolean indication if he dashboard has any changes compared to the persisted version (if any)
 *
 * @internal
 */
export declare const selectIsDashboardDirty: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res1: boolean, res2: import("@gooddata/sdk-model").IDashboardLayout<import("../..").ExtendedDashboardWidget>, res3: boolean, res4: boolean, res5: boolean) => boolean>;
//# sourceMappingURL=metaSelectors.d.ts.map