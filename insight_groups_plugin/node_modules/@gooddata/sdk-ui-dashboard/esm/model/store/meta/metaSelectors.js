import { __assign, __rest } from "tslib";
// (C) 2021-2022 GoodData Corporation
import { createSelector } from "@reduxjs/toolkit";
import { idRef, uriRef, isTempFilterContext, isDashboardDateFilter, isDashboardAttributeFilter, } from "@gooddata/sdk-model";
import invariant from "ts-invariant";
import isUndefined from "lodash/isUndefined";
import { selectLayout } from "../layout/layoutSelectors";
import { selectFilterContextAttributeFilters, selectFilterContextDateFilter, } from "../filterContext/filterContextSelectors";
import { isDashboardLayoutEmpty } from "@gooddata/sdk-backend-spi";
import isEqual from "lodash/isEqual";
var selectSelf = createSelector(function (state) { return state; }, function (state) { return state.meta; });
/**
 * Selects dashboard's descriptor.
 *
 * @internal
 */
export var selectDashboardDescriptor = createSelector(selectSelf, function (state) {
    invariant(state.descriptor, "attempting to access uninitialized meta state");
    return state.descriptor;
});
/**
 * Selects persisted IDashboard object - that is the IDashboard object that was used to initialize the rest
 * of the dashboard state of the dashboard component during the initial load of the dashboard.
 *
 * Note that this may be undefined when the dashboard component works with a dashboard that has not yet
 * been persisted (typically newly created dashboard being edited).
 *
 * @internal
 */
export var selectPersistedDashboard = createSelector(selectSelf, function (state) {
    return state.persistedDashboard;
});
/**
 * Selects persisted IFilterContext/ITempFilterContext - that is the IFilterContext or ITempFilterContext that
 * was used to initialize the original filters of the dashboard component during the initial load of the
 * dashboard.
 *
 * Note that this may be undefined when the dashboard component works with a dashboard that has not yet
 * been persisted (typically newly created dashboard being edited).
 */
export var selectPersistedDashboardFilterContext = createSelector(selectSelf, function (state) {
    var _a;
    return (_a = state.persistedDashboard) === null || _a === void 0 ? void 0 : _a.filterContext;
});
/**
 * Selects persisted IFilterContextDefinition - that is the IFilterContext or ITempFilterContext that
 * was used to initialize the original filters of the dashboard component during the initial load of the
 * dashboard but removes ref, uri and identifier, effectively creating a clone of the stored value
 * that can be used independently.
 *
 * Note that this may be undefined when the dashboard component works with a dashboard that has not yet
 * been persisted (typically newly created dashboard being edited).
 */
export var selectPersistedDashboardFilterContextAsFilterContextDefinition = createSelector(selectPersistedDashboardFilterContext, function (filterContext) {
    if (!filterContext) {
        return undefined;
    }
    if (isTempFilterContext(filterContext)) {
        var _1 = filterContext.ref, __ = filterContext.uri, definition = __rest(filterContext, ["ref", "uri"]);
        return __assign(__assign({}, definition), { title: "filterContext", description: "" });
    }
    else {
        var _2 = filterContext.identifier, __ = filterContext.ref, ___ = filterContext.uri, definition = __rest(filterContext, ["identifier", "ref", "uri"]);
        return definition;
    }
});
/**
 * Selects ref of the persisted dashboard object that backs and is rendered-by the dashboard component.
 *
 * @remarks
 * Note that this may be undefined when the dashboard component works with a dashboard that has not yet
 * been persisted (typically newly created dashboard being edited).
 *
 * @public
 */
export var selectDashboardRef = createSelector(selectPersistedDashboard, function (state) {
    return state === null || state === void 0 ? void 0 : state.ref;
});
/**
 * Selects identifier of the persisted dashboard object that backs and is rendered-by the dashboard component.
 *
 * @remarks
 * Note that this may be undefined when the dashboard component works with a dashboard that has not yet
 * been persisted (typically newly created dashboard being edited).
 *
 * @public
 */
export var selectDashboardId = createSelector(selectPersistedDashboard, function (state) {
    return state === null || state === void 0 ? void 0 : state.identifier;
});
/**
 * Selects URI of the persisted dashboard object that backs and is rendered-by the dashboard component.
 *
 * @remarks
 * Note that this may be undefined when the dashboard component works with a dashboard that has not yet
 * been persisted (typically newly created dashboard being edited).
 *
 * @public
 */
export var selectDashboardUri = createSelector(selectPersistedDashboard, function (state) {
    return state === null || state === void 0 ? void 0 : state.uri;
});
/**
 * Selects idRef of the persisted dashboard object that backs and is rendered-by the dashboard component.
 *
 * @remarks
 * Note that this may be undefined when the dashboard component works with a dashboard that has not yet
 * been persisted (typically newly created dashboard being edited).
 *
 * @public
 */
export var selectDashboardIdRef = createSelector(selectDashboardId, function (id) {
    return id ? idRef(id, "analyticalDashboard") : undefined;
});
/**
 * Selects uriRef of the persisted dashboard object that backs and is rendered-by the dashboard component.
 *
 * @remarks
 * Note that this may be undefined when the dashboard component works with a dashboard that has not yet
 * been persisted (typically newly created dashboard being edited).
 *
 * @public
 */
export var selectDashboardUriRef = createSelector(selectDashboardUri, function (uri) {
    return uri ? uriRef(uri) : undefined;
});
/**
 * Selects a boolean indication if dashboard is new
 *
 * @internal
 */
export var selectIsNewDashboard = createSelector(selectDashboardRef, isUndefined);
//
//
//
/**
 * Selects current dashboard title.
 *
 * @public
 */
export var selectDashboardTitle = createSelector(selectDashboardDescriptor, function (state) {
    return state.title;
});
/**
 * Selects current dashboard description.
 *
 * @public
 */
export var selectDashboardDescription = createSelector(selectDashboardDescriptor, function (state) {
    return state.description;
});
/**
 * Selects dashboard tags.
 *
 * @public
 */
export var selectDashboardTags = createSelector(selectDashboardDescriptor, function (state) {
    return state.tags;
});
/**
 * Selects dashboard share status.
 *
 * @alpha
 */
export var selectDashboardShareStatus = createSelector(selectDashboardDescriptor, function (state) {
    return state.shareStatus;
});
/**
 * Returns whether dashboard is private.
 *
 * @alpha
 */
export var selectIsDashboardPrivate = createSelector(selectDashboardShareStatus, function (status) {
    return status === "private";
});
/**
 * Selects dashboard lock status.
 *
 * @alpha
 */
export var selectDashboardLockStatus = createSelector(selectDashboardDescriptor, function (state) {
    return state.isLocked || false;
});
/**
 * Selects complete dashboard share info.
 *
 * @alpha
 */
export var selectDashboardShareInfo = createSelector(selectDashboardDescriptor, function (_a) {
    var shareStatus = _a.shareStatus, isLocked = _a.isLocked;
    return ({
        shareStatus: shareStatus,
        isLocked: isLocked,
    });
});
//
//
//
/**
 * Selects persisted FilterContextItems - that is the FilterContextItems that were used to initialize
 * the original filters of the dashboard component during the initial load of the dashboard.
 *
 * Note that this may be undefined when the dashboard component works with a dashboard that has not yet
 * been persisted (typically newly created dashboard being edited).
 */
var selectPersistedDashboardFilterContextFilters = createSelector(selectPersistedDashboardFilterContext, function (persistedFilterContext) {
    return persistedFilterContext === null || persistedFilterContext === void 0 ? void 0 : persistedFilterContext.filters;
});
/**
 * Selects persisted IDashboardDateFilter - that is the IDashboardDateFilter that were used to initialize
 * the original filters of the dashboard component during the initial load of the dashboard.
 *
 * Note that this may be undefined when the dashboard component works with a dashboard that has not yet
 * been persisted (typically newly created dashboard being edited).
 */
var selectPersistedDashboardFilterContextDateFilter = createSelector(selectPersistedDashboardFilterContextFilters, function (persistedFilters) {
    return (persistedFilters !== null && persistedFilters !== void 0 ? persistedFilters : []).find(isDashboardDateFilter);
});
/**
 * Selects persisted IDashboardAttributeFilters - that is the IDashboardAttributeFilters that were used to initialize
 * the original filters of the dashboard component during the initial load of the dashboard.
 *
 * Note that this may be undefined when the dashboard component works with a dashboard that has not yet
 * been persisted (typically newly created dashboard being edited).
 */
var selectPersistedDashboardFilterContextAttributeFilters = createSelector(selectPersistedDashboardFilterContextFilters, function (persistedFilters) {
    return (persistedFilters !== null && persistedFilters !== void 0 ? persistedFilters : []).filter(isDashboardAttributeFilter);
});
/**
 * Selects persisted title - that is the title that was used to initialize the rest
 * of the dashboard state of the dashboard component during the initial load of the dashboard.
 *
 * Note that this may be undefined when the dashboard component works with a dashboard that has not yet
 * been persisted (typically newly created dashboard being edited).
 */
var selectPersistedDashboardTitle = createSelector(selectSelf, function (state) {
    var _a;
    return (_a = state.persistedDashboard) === null || _a === void 0 ? void 0 : _a.title;
});
/**
 * Selects persisted layout - that is the IDashboardLayout object that was used to initialize the rest
 * of the dashboard state of the dashboard component during the initial load of the dashboard.
 *
 * Note that this may be undefined when the dashboard component works with a dashboard that has not yet
 * been persisted (typically newly created dashboard being edited).
 */
var selectPersistedDashboardLayout = createSelector(selectSelf, function (state) {
    var _a;
    return (_a = state.persistedDashboard) === null || _a === void 0 ? void 0 : _a.layout;
});
/**
 * Selects a boolean indication if he dashboard has any changes to the dashboard filter compared to the persisted version (if any)
 *
 * @internal
 */
export var selectIsDateFilterChanged = createSelector(selectPersistedDashboardFilterContextDateFilter, selectFilterContextDateFilter, function (persistedDateFilter, currentDateFilter) {
    return !isEqual(persistedDateFilter, currentDateFilter);
});
/**
 * Selects a boolean indication if he dashboard has any changes to the attribute filters compared to the persisted version (if any)
 *
 * @internal
 */
export var selectIsAttributeFiltersChanged = createSelector(selectPersistedDashboardFilterContextAttributeFilters, selectFilterContextAttributeFilters, function (persistedAttributeFilters, currentAttributeFilters) {
    return !isEqual(persistedAttributeFilters, currentAttributeFilters);
});
/**
 * Selects a boolean indication if he dashboard has any changes to the any of the filters compared to the persisted version (if any)
 *
 * @internal
 */
export var selectIsFiltersChanged = createSelector(selectIsDateFilterChanged, selectIsAttributeFiltersChanged, function (isDateFilterChanged, isAttributeFiltersChanged) {
    return isDateFilterChanged || isAttributeFiltersChanged;
});
/**
 * Selects a boolean indication if he dashboard has any changes to the title compared to the persisted version (if any)
 *
 * @internal
 */
export var selectIsTitleChanged = createSelector(selectPersistedDashboardTitle, selectDashboardTitle, function (persistedTitle, currentTitle) {
    return currentTitle !== persistedTitle;
});
/**
 * Selects a boolean indication if he dashboard has any changes to the layout compared to the persisted version (if any)
 *
 * @internal
 */
export var selectIsLayoutChanged = createSelector(selectPersistedDashboardLayout, selectLayout, function (persistedLayout, currentLayout) {
    return !isEqual(currentLayout, persistedLayout);
});
/**
 * Selects a boolean indication if he dashboard has any changes compared to the persisted version (if any)
 *
 * @internal
 */
export var selectIsDashboardDirty = createSelector(selectIsNewDashboard, selectLayout, selectIsFiltersChanged, selectIsTitleChanged, selectIsLayoutChanged, function (isNew, layout, isFiltersChanged, isTitleChanged, isLayoutChanged) {
    if (isNew) {
        return !isDashboardLayoutEmpty(layout);
    }
    return [isFiltersChanged, isTitleChanged, isLayoutChanged].some(Boolean);
});
//# sourceMappingURL=metaSelectors.js.map