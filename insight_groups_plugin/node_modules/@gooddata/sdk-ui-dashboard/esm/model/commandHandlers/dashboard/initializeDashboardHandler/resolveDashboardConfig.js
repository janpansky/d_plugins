import { __assign, __generator, __read } from "tslib";
import { all, call, put } from "redux-saga/effects";
import { defaultDateFilterConfig } from "../../../../_staging/dateFilterConfig/defaultConfig";
import { getValidDateFilterConfig } from "../../../../_staging/dateFilterConfig/validation";
import { stripUserAndWorkspaceProps } from "../../../../_staging/settings/conversion";
import { dateFilterValidationFailed } from "../../../events/dashboard";
import { dispatchDashboardEvent } from "../../../store/_infra/eventDispatcher";
import { dateFilterConfigActions } from "../../../store/dateFilterConfig";
import { isResolvedConfig, } from "../../../types/commonTypes";
import { sanitizeUnfinishedFeatureSettings } from "./sanitizeUnfinishedFeatureSettings";
function loadDateFilterConfig(ctx) {
    var backend = ctx.backend, workspace = ctx.workspace;
    return backend
        .workspace(workspace)
        .dateFilterConfigs()
        .withLimit(1)
        .query()
        .catch(function (e) {
        // eslint-disable-next-line no-console
        console.log("An error has occurred while loading date filter config. Will fall back to default date filter config.", e);
        return undefined;
    });
}
function loadSettingsForCurrentUser(ctx) {
    var backend = ctx.backend, workspace = ctx.workspace;
    return backend.workspace(workspace).settings().getSettingsForCurrentUser();
}
function loadColorPalette(ctx) {
    var backend = ctx.backend, workspace = ctx.workspace;
    return backend.workspace(workspace).styling().getColorPalette();
}
function onDateFilterConfigValidationError(ctx, validationResult, correlationId) {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, dispatchDashboardEvent(dateFilterValidationFailed(ctx, validationResult, correlationId))];
            case 1:
                _a.sent();
                return [4 /*yield*/, put(dateFilterConfigActions.addDateFilterConfigValidationWarning(validationResult))];
            case 2:
                _a.sent();
                return [2 /*return*/];
        }
    });
}
function resolveDateFilterConfig(ctx, config, cmd) {
    var result, firstConfig;
    var _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (config.dateFilterConfig !== undefined) {
                    return [2 /*return*/, config.dateFilterConfig];
                }
                return [4 /*yield*/, call(loadDateFilterConfig, ctx)];
            case 1:
                result = _c.sent();
                if (!(((_a = result === null || result === void 0 ? void 0 : result.totalCount) !== null && _a !== void 0 ? _a : 0) > 1)) return [3 /*break*/, 3];
                return [4 /*yield*/, call(onDateFilterConfigValidationError, ctx, "TOO_MANY_CONFIGS", cmd.correlationId)];
            case 2:
                _c.sent();
                _c.label = 3;
            case 3:
                firstConfig = result === null || result === void 0 ? void 0 : result.items[0];
                if (!!firstConfig) return [3 /*break*/, 5];
                return [4 /*yield*/, call(onDateFilterConfigValidationError, ctx, "NO_CONFIG", cmd.correlationId)];
            case 4:
                _c.sent();
                _c.label = 5;
            case 5: return [2 /*return*/, (_b = result === null || result === void 0 ? void 0 : result.items[0]) !== null && _b !== void 0 ? _b : defaultDateFilterConfig];
        }
    });
}
function resolveUserSettings(ctx, config) {
    if (config.settings && config.locale && config.separators) {
        return Promise.resolve({
            locale: config.locale,
            separators: config.separators,
            settings: config.settings,
        });
    }
    return loadSettingsForCurrentUser(ctx).then(function (res) {
        var _a, _b, _c;
        return ({
            locale: (_a = config.locale) !== null && _a !== void 0 ? _a : res.locale,
            separators: (_b = config.separators) !== null && _b !== void 0 ? _b : res.separators,
            settings: (_c = config.settings) !== null && _c !== void 0 ? _c : stripUserAndWorkspaceProps(res),
        });
    });
}
function resolveColorPalette(ctx, config) {
    if (config.colorPalette) {
        return Promise.resolve(config.colorPalette);
    }
    return loadColorPalette(ctx);
}
/**
 * Loads all essential dashboard configuration from the backend if needed. The load command may specify their
 * own inline config - if that is the case the config is bounced back immediately. Otherwise the necessary
 * backend queries and post-processing is done.
 */
export function resolveDashboardConfig(ctx, cmd) {
    var _a, config, _b, dateFilterConfig, settings, colorPalette, _c, validDateFilterConfig, configValidation, configWithDefaults, resolvedConfig;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = cmd.payload.config, config = _a === void 0 ? {} : _a;
                return [4 /*yield*/, put(dateFilterConfigActions.clearDateFilterConfigValidationWarning())];
            case 1:
                _d.sent();
                if (isResolvedConfig(config)) {
                    /*
                     * Config coming in props is fully specified. There is nothing to do. Bail out immediately.
                     */
                    if (config.allowUnfinishedFeatures || !config.settings) {
                        return [2 /*return*/, applyConfigDefaults(config)];
                    }
                    return [2 /*return*/, __assign(__assign({}, applyConfigDefaults(config)), { settings: sanitizeUnfinishedFeatureSettings(config.settings) })];
                }
                return [4 /*yield*/, all([
                        call(resolveDateFilterConfig, ctx, config, cmd),
                        call(resolveUserSettings, ctx, config),
                        call(resolveColorPalette, ctx, config),
                    ])];
            case 2:
                _b = __read.apply(void 0, [_d.sent(), 3]), dateFilterConfig = _b[0], settings = _b[1], colorPalette = _b[2];
                _c = __read(getValidDateFilterConfig(dateFilterConfig, settings.settings), 2), validDateFilterConfig = _c[0], configValidation = _c[1];
                if (!(configValidation !== "Valid")) return [3 /*break*/, 4];
                return [4 /*yield*/, call(onDateFilterConfigValidationError, ctx, configValidation, cmd.correlationId)];
            case 3:
                _d.sent();
                _d.label = 4;
            case 4:
                configWithDefaults = applyConfigDefaults(config);
                resolvedConfig = __assign(__assign({}, configWithDefaults), { locale: settings.locale, separators: settings.separators, dateFilterConfig: validDateFilterConfig, settings: configWithDefaults.allowUnfinishedFeatures
                        ? settings.settings
                        : sanitizeUnfinishedFeatureSettings(settings.settings), colorPalette: colorPalette, mapboxToken: config.mapboxToken });
                return [2 /*return*/, resolvedConfig];
        }
    });
}
function applyConfigDefaults(config) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    return __assign(__assign({}, config), { objectAvailability: (_a = config.objectAvailability) !== null && _a !== void 0 ? _a : {}, isReadOnly: (_b = config.isReadOnly) !== null && _b !== void 0 ? _b : false, isEmbedded: (_c = config.isEmbedded) !== null && _c !== void 0 ? _c : false, isExport: (_d = config.isExport) !== null && _d !== void 0 ? _d : false, isWhiteLabeled: (_e = config.isWhiteLabeled) !== null && _e !== void 0 ? _e : false, disableDefaultDrills: (_f = config.disableDefaultDrills) !== null && _f !== void 0 ? _f : false, enableFilterValuesResolutionInDrillEvents: (_g = config.enableFilterValuesResolutionInDrillEvents) !== null && _g !== void 0 ? _g : false, menuButtonItemsVisibility: (_h = config.menuButtonItemsVisibility) !== null && _h !== void 0 ? _h : {}, allowUnfinishedFeatures: (_j = config.allowUnfinishedFeatures) !== null && _j !== void 0 ? _j : false, initialRenderMode: (_k = config.initialRenderMode) !== null && _k !== void 0 ? _k : "view", hideSaveAsNewButton: (_l = config.hideSaveAsNewButton) !== null && _l !== void 0 ? _l : false });
}
//# sourceMappingURL=resolveDashboardConfig.js.map