import { __generator, __read, __spread } from "tslib";
// (C) 2020-2022 GoodData Corporation
import { all, call, select } from "redux-saga/effects";
import { isDrillIntersectionAttributeItem, } from "@gooddata/sdk-ui";
import { idRef, areObjRefsEqual, insightId, isAttributeDescriptor, } from "@gooddata/sdk-model";
import { selectDashboardId } from "../../store/meta/metaSelectors";
import { selectAnalyticalWidgetByRef } from "../../store/layout/layoutSelectors";
import { selectInsightByRef } from "../../store/insights/insightsSelectors";
import { getElementTitle } from "./getElementTitle";
import { getAttributeIdentifiersPlaceholdersFromUrl } from "../../../_staging/drills/drillingUtils";
import { invalidArgumentsProvided } from "../../events/general";
import { selectCatalogDateAttributes } from "../../store/catalog/catalogSelectors";
import groupBy from "lodash/groupBy";
export var DRILL_TO_URL_PLACEHOLDER;
(function (DRILL_TO_URL_PLACEHOLDER) {
    DRILL_TO_URL_PLACEHOLDER["PROJECT_ID"] = "{project_id}";
    DRILL_TO_URL_PLACEHOLDER["WORKSPACE_ID"] = "{workspace_id}";
    DRILL_TO_URL_PLACEHOLDER["INSIGHT_ID"] = "{insight_id}";
    DRILL_TO_URL_PLACEHOLDER["WIDGET_ID"] = "{widget_id}";
    DRILL_TO_URL_PLACEHOLDER["DASHBOARD_ID"] = "{dashboard_id}";
    DRILL_TO_URL_PLACEHOLDER["CLIENT_ID"] = "{client_id}";
    DRILL_TO_URL_PLACEHOLDER["DATA_PRODUCT_ID"] = "{data_product_id}";
})(DRILL_TO_URL_PLACEHOLDER || (DRILL_TO_URL_PLACEHOLDER = {}));
export function loadElementTitle(dfRef, dfIdentifier, attrElementUri, ctx) {
    var elementTitle;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, call(getElementTitle, ctx.workspace, dfRef, attrElementUri, ctx)];
            case 1:
                elementTitle = _a.sent();
                return [2 /*return*/, {
                        identifier: dfIdentifier,
                        elementTitle: elementTitle,
                    }];
        }
    });
}
function isInRefList(list, ref) {
    return list.some(function (itemRef) { return areObjRefsEqual(itemRef, ref); });
}
function findDrillIntersectionAttributeHeaderItem(drillIntersectionElements, attributeRef) {
    var intersectionForAttribute = drillIntersectionElements.find(function (_a) {
        var header = _a.header;
        return isAttributeDescriptor(header) && areObjRefsEqual(attributeRef, header.attributeHeader.formOf.ref);
    });
    if (intersectionForAttribute && isDrillIntersectionAttributeItem(intersectionForAttribute.header)) {
        return intersectionForAttribute.header.attributeHeaderItem;
    }
}
export function splitDFToLoadingAndMapping(attributesDisplayForms, ctx) {
    var dateAttributes, dateAttributeRefs, _a, _b, displayFormsWithKnownValues, _c, displayFormForValueLoad;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                if (ctx.backend.capabilities.supportsElementUris) {
                    return [2 /*return*/, {
                            displayFormForValueLoad: attributesDisplayForms,
                            displayFormsWithKnownValues: [],
                        }];
                }
                return [4 /*yield*/, select(selectCatalogDateAttributes)];
            case 1:
                dateAttributes = _d.sent();
                dateAttributeRefs = dateAttributes.map(function (da) { return da.attribute.ref; });
                _a = groupBy(attributesDisplayForms, function (df) { return isInRefList(dateAttributeRefs, df.attribute); }), _b = _a.true, displayFormsWithKnownValues = _b === void 0 ? [] : _b, _c = _a.false, displayFormForValueLoad = _c === void 0 ? [] : _c;
                return [2 /*return*/, {
                        displayFormsWithKnownValues: displayFormsWithKnownValues,
                        displayFormForValueLoad: displayFormForValueLoad,
                    }];
        }
    });
}
export function loadAttributeElementsForDrillIntersection(drillIntersectionElements, attributesDisplayForms, ctx) {
    var splitDisplayForms, displayFormsWithKnownValues, displayFormForValueLoad, mappedElements, loadedElement;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, call(splitDFToLoadingAndMapping, attributesDisplayForms, ctx)];
            case 1:
                splitDisplayForms = _a.sent();
                displayFormsWithKnownValues = splitDisplayForms.displayFormsWithKnownValues, displayFormForValueLoad = splitDisplayForms.displayFormForValueLoad;
                mappedElements = displayFormsWithKnownValues.reduce(function (acc, _a) {
                    var dfIdentifier = _a.id, attribute = _a.attribute;
                    var attributeHeaderItem = findDrillIntersectionAttributeHeaderItem(drillIntersectionElements, attribute);
                    if (!attributeHeaderItem) {
                        return acc;
                    }
                    acc.push({
                        identifier: dfIdentifier,
                        elementTitle: attributeHeaderItem.uri,
                    });
                    return acc;
                }, []);
                return [4 /*yield*/, all(displayFormForValueLoad.reduce(function (acc, displayForm) {
                        var dfIdentifier = displayForm.id, attribute = displayForm.attribute, dfRef = displayForm.ref;
                        var attributeHeaderItem = findDrillIntersectionAttributeHeaderItem(drillIntersectionElements, attribute);
                        if (!attributeHeaderItem) {
                            return acc;
                        }
                        acc.push(call(loadElementTitle, dfRef, dfIdentifier, attributeHeaderItem.uri, ctx));
                        return acc;
                    }, []))];
            case 2:
                loadedElement = _a.sent();
                return [2 /*return*/, __spread(mappedElements, loadedElement)];
        }
    });
}
var encodeParameterIfSet = function (parameter) {
    return parameter === undefined ? parameter : encodeURIComponent(parameter);
};
export function getAttributeDisplayForms(projectId, objRefs, ctx) {
    return ctx.backend.workspace(projectId).attributes().getAttributeDisplayForms(objRefs);
}
export function getAttributeIdentifiersReplacements(url, drillIntersectionElements, ctx) {
    var attributeIdentifiersPlaceholders, displayForms, elements;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                attributeIdentifiersPlaceholders = getAttributeIdentifiersPlaceholdersFromUrl(url);
                if (attributeIdentifiersPlaceholders.length === 0) {
                    return [2 /*return*/, []];
                }
                return [4 /*yield*/, call(getAttributeDisplayForms, ctx.workspace, attributeIdentifiersPlaceholders.map(function (placeholder) { return idRef(placeholder.identifier); }), ctx)];
            case 1:
                displayForms = _a.sent();
                return [4 /*yield*/, call(loadAttributeElementsForDrillIntersection, drillIntersectionElements, displayForms, ctx)];
            case 2:
                elements = _a.sent();
                return [2 /*return*/, attributeIdentifiersPlaceholders.map(function (_a) {
                        var _b;
                        var toBeReplaced = _a.placeholder, identifier = _a.identifier, toBeEncoded = _a.toBeEncoded;
                        var elementTitle = (_b = elements.find(function (element) { return element.identifier === identifier; })) === null || _b === void 0 ? void 0 : _b.elementTitle;
                        var replacement = toBeEncoded ? encodeParameterIfSet(elementTitle) : elementTitle;
                        return {
                            toBeReplaced: toBeReplaced,
                            replacement: replacement,
                        };
                    })];
        }
    });
}
var createIdentifierReplacement = function (toBeReplaced, replacement) {
    if (replacement === void 0) { replacement = ""; }
    return ({ toBeReplaced: toBeReplaced, replacement: replacement, replaceGlobally: true });
};
export function getInsightIdentifiersReplacements(customUrl, widgetRef, ctx) {
    var workspace, clientId, dataProductId, dashboardId, widget, insight, replacements;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                workspace = ctx.workspace, clientId = ctx.clientId, dataProductId = ctx.dataProductId;
                return [4 /*yield*/, select(selectDashboardId)];
            case 1:
                dashboardId = _a.sent();
                return [4 /*yield*/, select(selectAnalyticalWidgetByRef(widgetRef))];
            case 2:
                widget = _a.sent();
                return [4 /*yield*/, select(selectInsightByRef(widget.insight))];
            case 3:
                insight = _a.sent();
                replacements = [
                    createIdentifierReplacement(DRILL_TO_URL_PLACEHOLDER.PROJECT_ID, workspace),
                    createIdentifierReplacement(DRILL_TO_URL_PLACEHOLDER.WORKSPACE_ID, workspace),
                    createIdentifierReplacement(DRILL_TO_URL_PLACEHOLDER.DASHBOARD_ID, dashboardId),
                    createIdentifierReplacement(DRILL_TO_URL_PLACEHOLDER.CLIENT_ID, clientId),
                    createIdentifierReplacement(DRILL_TO_URL_PLACEHOLDER.DATA_PRODUCT_ID, dataProductId),
                    createIdentifierReplacement(DRILL_TO_URL_PLACEHOLDER.INSIGHT_ID, insightId(insight)),
                ];
                if (customUrl.includes(DRILL_TO_URL_PLACEHOLDER.WIDGET_ID)) {
                    return [2 /*return*/, __spread(replacements, [
                            createIdentifierReplacement(DRILL_TO_URL_PLACEHOLDER.WIDGET_ID, widget.identifier),
                        ])];
                }
                return [2 /*return*/, replacements];
        }
    });
}
var applyReplacements = function (url, replacements) {
    return replacements.reduce(function (customUrlWithReplacedPlaceholders, _a) {
        var toBeReplaced = _a.toBeReplaced, replacement = _a.replacement, replaceGlobally = _a.replaceGlobally;
        return customUrlWithReplacedPlaceholders.replace(replaceGlobally ? new RegExp(toBeReplaced, "g") : toBeReplaced, replacement);
    }, url);
};
export function resolveDrillToCustomUrl(drillConfig, widgetRef, event, ctx, cmd) {
    var customUrl, attributeIdentifiersReplacements, missingReplacement, insightIdentifiersReplacements, replacements, resolvedUrl;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                customUrl = drillConfig.target.url;
                return [4 /*yield*/, call(getAttributeIdentifiersReplacements, customUrl, event.drillContext.intersection, ctx)];
            case 1:
                attributeIdentifiersReplacements = _a.sent();
                missingReplacement = attributeIdentifiersReplacements.find(function (_a) {
                    var replacement = _a.replacement;
                    return replacement === undefined;
                });
                if (missingReplacement) {
                    throw invalidArgumentsProvided(ctx, cmd, "Drill to custom URL unable to resolve missing paramter " + missingReplacement.toBeReplaced);
                }
                return [4 /*yield*/, call(getInsightIdentifiersReplacements, customUrl, widgetRef, ctx)];
            case 2:
                insightIdentifiersReplacements = _a.sent();
                replacements = __spread(attributeIdentifiersReplacements, insightIdentifiersReplacements);
                resolvedUrl = applyReplacements(customUrl, replacements);
                return [2 /*return*/, resolvedUrl];
        }
    });
}
//# sourceMappingURL=resolveDrillToCustomUrl.js.map