import { __generator } from "tslib";
// (C) 2022 GoodData Corporation
import { call, put, select } from "redux-saga/effects";
import invariant from "ts-invariant";
import { attributeDisplayFormChanged } from "../../../events/filters";
import { filterContextActions } from "../../../store/filterContext";
import { selectAttributeFilterDisplayFormsMap, selectFilterContextAttributeFilterByLocalId, } from "../../../store/filterContext/filterContextSelectors";
import { dispatchFilterContextChanged } from "../common";
import { dispatchDashboardEvent } from "../../../store/_infra/eventDispatcher";
import { validateFilterDisplayForm } from "./validation/filterDisplayFormValidation";
import { invalidArgumentsProvided } from "../../../events/general";
export function changeAttributeDisplayFormHandler(ctx, cmd) {
    var _a, filterLocalId, displayForm, displayFormsMap, changedFilter, attribute, validationResult, message;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = cmd.payload, filterLocalId = _a.filterLocalId, displayForm = _a.displayForm;
                return [4 /*yield*/, put(filterContextActions.changeAttributeDisplayForm({
                        filterLocalId: filterLocalId,
                        displayForm: displayForm,
                    }))];
            case 1:
                _b.sent();
                return [4 /*yield*/, select(selectAttributeFilterDisplayFormsMap)];
            case 2:
                displayFormsMap = _b.sent();
                return [4 /*yield*/, select(selectFilterContextAttributeFilterByLocalId(filterLocalId))];
            case 3:
                changedFilter = _b.sent();
                invariant(changedFilter, "Inconsistent state in changeAttributeDisplayFormHandler, cannot update attribute filter for given local identifier.");
                attribute = displayFormsMap.get(changedFilter.attributeFilter.displayForm);
                return [4 /*yield*/, call(validateFilterDisplayForm, ctx, attribute, displayForm)];
            case 4:
                validationResult = _b.sent();
                if (validationResult !== "VALID") {
                    message = validationResult === "INVALID_ATTRIBUTE_DISPLAY_FORM"
                        ? "The display form provided is not a valid display form of the attribute filter."
                        : "Cannot find the attribute for the display form used on the attribute filter.";
                    throw invalidArgumentsProvided(ctx, cmd, message);
                }
                return [4 /*yield*/, dispatchDashboardEvent(attributeDisplayFormChanged(ctx, changedFilter, cmd.correlationId))];
            case 5:
                _b.sent();
                return [4 /*yield*/, call(dispatchFilterContextChanged, ctx, cmd)];
            case 6:
                _b.sent();
                return [2 /*return*/];
        }
    });
}
//# sourceMappingURL=changeAttributeDisplayFormHandler.js.map