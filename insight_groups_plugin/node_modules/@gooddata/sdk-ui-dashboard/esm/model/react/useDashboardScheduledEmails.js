// (C) 2022 GoodData Corporation
import { __read } from "tslib";
import { useCallback, useState } from "react";
import { useToastMessage } from "@gooddata/sdk-ui-kit";
import { selectCanCreateScheduledMail, selectDashboardRef, selectEnableInsightExportScheduling, selectEnableKPIDashboardSchedule, selectIsInViewMode, selectIsReadOnly, selectIsScheduleEmailDialogOpen, selectIsScheduleEmailManagementDialogOpen, selectMenuButtonItemsVisibility, uiActions, } from "../store";
import { useDashboardDispatch, useDashboardSelector } from "./DashboardStoreProvider";
import { messages } from "../../locales";
/**
 * Hook that handles schedule emailing dialogs.
 *
 * @alpha
 */
export var useDashboardScheduledEmails = function () {
    var _a;
    var _b = useToastMessage(), addSuccess = _b.addSuccess, addError = _b.addError;
    var isScheduleEmailingDialogOpen = useDashboardSelector(selectIsScheduleEmailDialogOpen);
    var isScheduleEmailingManagementDialogOpen = useDashboardSelector(selectIsScheduleEmailManagementDialogOpen);
    var dispatch = useDashboardDispatch();
    var dashboardRef = useDashboardSelector(selectDashboardRef);
    var enableInsightExportScheduling = useDashboardSelector(selectEnableInsightExportScheduling);
    var isReadOnly = useDashboardSelector(selectIsReadOnly);
    var isInViewMode = useDashboardSelector(selectIsInViewMode);
    var canCreateScheduledMail = useDashboardSelector(selectCanCreateScheduledMail);
    var isScheduledEmailingEnabled = !!useDashboardSelector(selectEnableKPIDashboardSchedule);
    var menuButtonItemsVisibility = useDashboardSelector(selectMenuButtonItemsVisibility);
    var openScheduleEmailingDialog = function () { return dispatch(uiActions.openScheduleEmailDialog()); };
    var closeScheduleEmailingDialog = function () { return dispatch(uiActions.closeScheduleEmailDialog()); };
    var openScheduleEmailingManagementDialog = function () {
        return enableInsightExportScheduling && dispatch(uiActions.openScheduleEmailManagementDialog());
    };
    var closeScheduleEmailingManagementDialog = function () {
        return enableInsightExportScheduling && dispatch(uiActions.closeScheduleEmailManagementDialog());
    };
    var setScheduledEmailDefaultAttachment = function (attachmentRef) {
        return enableInsightExportScheduling &&
            dispatch(uiActions.setScheduleEmailDialogDefaultAttachment(attachmentRef));
    };
    var resetScheduledEmailDefaultAttachment = function () {
        return enableInsightExportScheduling && dispatch(uiActions.resetScheduleEmailDialogDefaultAttachment());
    };
    var _c = __read(useState(), 2), scheduledEmailToEdit = _c[0], setScheduledEmailToEdit = _c[1];
    var isScheduledEmailingVisible = isInViewMode &&
        !isReadOnly &&
        canCreateScheduledMail &&
        isScheduledEmailingEnabled &&
        ((_a = menuButtonItemsVisibility.scheduleEmailButton) !== null && _a !== void 0 ? _a : true);
    /*
     * exports and scheduling are not available when rendering a dashboard that is not persisted.
     * this can happen when a new dashboard is created and is being edited.
     *
     * the setup of menu items available in the menu needs to reflect this.
     */
    var defaultOnScheduleEmailing = useCallback(function () {
        if (!dashboardRef) {
            return;
        }
        if (enableInsightExportScheduling) {
            openScheduleEmailingManagementDialog();
        }
        else {
            openScheduleEmailingDialog();
        }
    }, [dashboardRef, enableInsightExportScheduling]);
    var onScheduleEmailingOpen = useCallback(function (attachmentRef) {
        openScheduleEmailingDialog();
        attachmentRef && setScheduledEmailDefaultAttachment(attachmentRef);
    }, []);
    var onScheduleEmailingCreateError = useCallback(function () {
        closeScheduleEmailingDialog();
        addError(messages.scheduleEmailSubmitError);
    }, []);
    var onScheduleEmailingCreateSuccess = useCallback(function () {
        closeScheduleEmailingDialog();
        addSuccess(messages.scheduleEmailSubmitSuccess);
        resetScheduledEmailDefaultAttachment();
    }, []);
    var onScheduleEmailingSaveError = useCallback(function () {
        closeScheduleEmailingDialog();
        addError(messages.scheduleEmailSaveError);
        setScheduledEmailToEdit(undefined);
    }, []);
    var onScheduleEmailingSaveSuccess = useCallback(function () {
        closeScheduleEmailingDialog();
        openScheduleEmailingManagementDialog();
        addSuccess(messages.scheduleEmailSaveSuccess);
        setScheduledEmailToEdit(undefined);
    }, []);
    var onScheduleEmailingCancel = useCallback(function () {
        closeScheduleEmailingDialog();
        openScheduleEmailingManagementDialog();
        resetScheduledEmailDefaultAttachment();
        setScheduledEmailToEdit(undefined);
    }, []);
    var onScheduleEmailingManagementDeleteSuccess = useCallback(function () {
        addSuccess(messages.scheduleEmailDeleteSuccess);
    }, []);
    var onScheduleEmailingManagementAdd = useCallback(function () {
        closeScheduleEmailingManagementDialog();
        openScheduleEmailingDialog();
    }, []);
    var onScheduleEmailingManagementEdit = useCallback(function (schedule) {
        closeScheduleEmailingManagementDialog();
        setScheduledEmailToEdit(schedule);
        openScheduleEmailingDialog();
    }, []);
    var onScheduleEmailingManagementClose = useCallback(function () {
        closeScheduleEmailingManagementDialog();
    }, []);
    var onScheduleEmailingManagementLoadingError = useCallback(function () {
        closeScheduleEmailingManagementDialog();
        addError(messages.scheduleManagementLoadError);
    }, []);
    var onScheduleEmailingManagementDeleteError = useCallback(function () {
        closeScheduleEmailingManagementDialog();
        addError(messages.scheduleManagementDeleteError);
    }, []);
    return {
        isScheduledEmailingVisible: isScheduledEmailingVisible,
        enableInsightExportScheduling: enableInsightExportScheduling,
        defaultOnScheduleEmailing: defaultOnScheduleEmailing,
        isScheduleEmailingDialogOpen: isScheduleEmailingDialogOpen,
        isScheduleEmailingManagementDialogOpen: isScheduleEmailingManagementDialogOpen,
        onScheduleEmailingOpen: onScheduleEmailingOpen,
        onScheduleEmailingManagementEdit: onScheduleEmailingManagementEdit,
        scheduledEmailToEdit: scheduledEmailToEdit,
        onScheduleEmailingCancel: onScheduleEmailingCancel,
        onScheduleEmailingCreateError: onScheduleEmailingCreateError,
        onScheduleEmailingCreateSuccess: onScheduleEmailingCreateSuccess,
        onScheduleEmailingSaveError: onScheduleEmailingSaveError,
        onScheduleEmailingSaveSuccess: onScheduleEmailingSaveSuccess,
        onScheduleEmailingManagementAdd: onScheduleEmailingManagementAdd,
        onScheduleEmailingManagementClose: onScheduleEmailingManagementClose,
        onScheduleEmailingManagementLoadingError: onScheduleEmailingManagementLoadingError,
        onScheduleEmailingManagementDeleteSuccess: onScheduleEmailingManagementDeleteSuccess,
        onScheduleEmailingManagementDeleteError: onScheduleEmailingManagementDeleteError,
    };
};
//# sourceMappingURL=useDashboardScheduledEmails.js.map