import { __spreadArrays } from "tslib";
import semverCompareBuild from "semver/functions/compare-build";
import semverSatisfies from "semver/functions/satisfies";
/**
 * Determine dashboard engine to use with the plugins.
 * Currently it selects the engine with the greatest version.
 *
 * @internal
 */
export function determineDashboardEngine(engines) {
    var sortedByVersion = __spreadArrays(engines).sort(function (engineA, engineB) {
        return semverCompareBuild(engineB.version, engineA.version);
    });
    var engineWithGreatestVersion = sortedByVersion[0];
    return engineWithGreatestVersion;
}
/**
 * Checks if the dashboard plugin match version of the dashboard engine.
 *
 * @internal
 */
export function isPluginCompatibleWithDashboardEngine(engine, plugin) {
    var minEngineVersion = plugin.minEngineVersion, maxEngineVersion = plugin.maxEngineVersion, debugName = plugin.debugName, displayName = plugin.displayName, version = plugin.version;
    var requiredVersion = ">=" + minEngineVersion + (maxEngineVersion ? " <=" + maxEngineVersion : "");
    var matchesEngineVersion = semverSatisfies(engine.version, requiredVersion, {
        includePrerelease: true,
    });
    if (!matchesEngineVersion) {
        // eslint-disable-next-line no-console
        console.error("The dashboard plugin " + (debugName !== null && debugName !== void 0 ? debugName : displayName) + " " + version + " requires engine with version " + requiredVersion + ", but the loaded dashboard engine has version " + engine.version + ".");
    }
    return matchesEngineVersion;
}
//# sourceMappingURL=determineDashboardEngine.js.map