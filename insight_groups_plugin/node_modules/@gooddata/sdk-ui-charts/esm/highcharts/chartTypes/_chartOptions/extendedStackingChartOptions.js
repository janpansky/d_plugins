import { __spreadArrays } from "tslib";
/**
 * Transform
 *      viewByParentAttribute: [P1, P1, P2, P2, P3],
 *      viewByAttribute: [C1, C2, C1, C2, C2]
 * to
 * ```
 *     [{
 *         name: P1,
 *         categories: [C1, C2]
 *      }, {
 *         name: P2,
 *         categories: [C1, C2]
 *      }, {
 *         name: P3,
 *         categories: [C2]
 *      }]
 * ```
 */
export function getCategoriesForTwoAttributes(viewByAttribute, viewByParentAttribute) {
    var keys = [];
    var children = viewByAttribute.items;
    var parent = viewByParentAttribute.items;
    var combinedResult = parent.reduce(function (result, parentAttr, index) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var uri = (_b = (_a = parentAttr === null || parentAttr === void 0 ? void 0 : parentAttr.attributeHeaderItem) === null || _a === void 0 ? void 0 : _a.uri) !== null && _b !== void 0 ? _b : "";
        var name = (_d = (_c = parentAttr === null || parentAttr === void 0 ? void 0 : parentAttr.attributeHeaderItem) === null || _c === void 0 ? void 0 : _c.name) !== null && _d !== void 0 ? _d : "";
        var value = (_g = (_f = (_e = children[index]) === null || _e === void 0 ? void 0 : _e.attributeHeaderItem) === null || _f === void 0 ? void 0 : _f.name) !== null && _g !== void 0 ? _g : "";
        var existingEntry = result[uri];
        var childCategories = (_h = existingEntry === null || existingEntry === void 0 ? void 0 : existingEntry.categories) !== null && _h !== void 0 ? _h : [];
        if (!childCategories.length) {
            keys.push(uri);
        }
        result[uri] = {
            name: name,
            categories: __spreadArrays(childCategories, [value]),
        };
        return result;
    }, {});
    return keys.map(function (key) {
        var _a = combinedResult[key], name = _a.name, categories = _a.categories;
        return {
            name: name,
            categories: categories,
        };
    });
}
//# sourceMappingURL=extendedStackingChartOptions.js.map