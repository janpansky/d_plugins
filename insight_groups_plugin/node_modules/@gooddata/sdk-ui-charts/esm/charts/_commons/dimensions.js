import { __spreadArrays } from "tslib";
// (C) 2019-2022 GoodData Corporation
import compact from "lodash/compact";
import { bucketAttribute, bucketAttributes, bucketIsEmpty, bucketsAttributes, bucketsFind, MeasureGroupIdentifier, newTwoDimensional, } from "@gooddata/sdk-model";
import { BucketNames } from "@gooddata/sdk-ui";
function isStackedChart(buckets, stackBucketName) {
    var stackBucket = bucketsFind(buckets, stackBucketName);
    return stackBucket && !bucketIsEmpty(stackBucket);
}
function stackedDimensions(buckets, viewBucketName, stackBucketName) {
    var viewBucket = bucketsFind(buckets, viewBucketName);
    var viewByAttributes = viewBucket ? bucketAttributes(viewBucket) : [];
    var stackBucket = bucketsFind(buckets, stackBucketName);
    var stackByAttribute = stackBucket && bucketAttribute(stackBucket);
    return newTwoDimensional(compact([stackByAttribute]), __spreadArrays(viewByAttributes, [MeasureGroupIdentifier]));
}
export function defaultDimensions(def) {
    return newTwoDimensional([MeasureGroupIdentifier], bucketsAttributes(def.buckets));
}
export function stackedChartDimensions(def, viewBucketName, stackBucketName) {
    if (viewBucketName === void 0) { viewBucketName = BucketNames.VIEW; }
    if (stackBucketName === void 0) { stackBucketName = BucketNames.STACK; }
    var buckets = def.buckets;
    return isStackedChart(buckets, stackBucketName)
        ? stackedDimensions(buckets, viewBucketName, stackBucketName)
        : defaultDimensions(def);
}
export function pointyChartDimensions(def) {
    return newTwoDimensional(bucketsAttributes(def.buckets), [MeasureGroupIdentifier]);
}
export function roundChartDimensions(def) {
    var attributes = bucketsAttributes(def.buckets);
    return attributes.length
        ? newTwoDimensional([MeasureGroupIdentifier], attributes)
        : newTwoDimensional([], [MeasureGroupIdentifier]);
}
export function heatmapDimensions(def) {
    var viewBucket = bucketsFind(def.buckets, BucketNames.VIEW);
    var viewByAttributes = viewBucket ? bucketAttributes(viewBucket) : [];
    var stackBucket = bucketsFind(def.buckets, BucketNames.STACK);
    var stackByAttribute = stackBucket ? bucketAttributes(stackBucket) : [];
    return newTwoDimensional(viewByAttributes, compact(__spreadArrays(stackByAttribute, [MeasureGroupIdentifier])));
}
export function treemapDimensions(def) {
    var attributes = bucketsAttributes(def.buckets);
    return attributes.length === 1
        ? newTwoDimensional([MeasureGroupIdentifier], attributes)
        : newTwoDimensional(attributes, [MeasureGroupIdentifier]);
}
//# sourceMappingURL=dimensions.js.map