// (C) 2019-2022 GoodData Corporation
import React, { useMemo } from "react";
import { IntlProvider, createIntl } from "react-intl";
import { DefaultLocale, pickCorrectWording, TranslationsCustomizationProvider, } from "@gooddata/sdk-ui";
import { translations } from "./translations";
import { LRUCache } from "@gooddata/util";
var INTL_CACHE_SIZE = 20;
var INTL_CACHE_KEY = "messages";
var intlCache = new LRUCache({ maxSize: INTL_CACHE_SIZE });
export function createInternalIntl(locale) {
    if (locale === void 0) { locale = DefaultLocale; }
    /**
     * Because of issues described in the ticket FET-855, we decided to use this workaround.
     * After the issues that are described in the ticket are solved or at least reduced,
     * this workaround can be removed.
     */
    var settings = window.gdSettings;
    if (!intlCache.get(INTL_CACHE_KEY)) {
        intlCache.set(INTL_CACHE_KEY, pickCorrectWording(translations[locale], settings));
    }
    return createIntl({ locale: locale, messages: intlCache.get(INTL_CACHE_KEY) });
}
export var InternalIntlWrapper = function (_a) {
    var _b = _a.locale, locale = _b === void 0 ? DefaultLocale : _b, children = _a.children, workspace = _a.workspace;
    /**
     * Because of issues described in the ticket FET-855, we decided to use this workaround.
     * After the issues that are described in the ticket are solved or at least reduced,
     * this workaround can be removed.
     */
    var settings = window.gdSettings;
    var messages = useMemo(function () { return pickCorrectWording(translations[locale], settings); }, [locale, settings]);
    if (settings) {
        return (React.createElement(IntlProvider, { locale: locale, messages: messages }, children));
    }
    else {
        return (React.createElement(TranslationsCustomizationProvider, { translations: translations[locale], workspace: workspace, render: function (modifiedTranslations) {
                return (React.createElement(IntlProvider, { key: locale, locale: locale, messages: modifiedTranslations }, children));
            } }));
    }
};
//# sourceMappingURL=internalIntlProvider.js.map