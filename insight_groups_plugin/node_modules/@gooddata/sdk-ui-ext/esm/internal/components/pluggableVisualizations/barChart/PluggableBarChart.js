import { __assign, __extends } from "tslib";
// (C) 2019-2022 GoodData Corporation
import React from "react";
import { render } from "react-dom";
import isEmpty from "lodash/isEmpty";
import isNil from "lodash/isNil";
import { BucketNames, VisualizationTypes } from "@gooddata/sdk-ui";
import { newAttributeAreaSort, newMeasureSort } from "@gooddata/sdk-model";
import { PluggableColumnBarCharts } from "../PluggableColumnBarCharts";
import { BAR_CHART_SUPPORTED_PROPERTIES } from "../../../constants/supportedProperties";
import BarChartConfigurationPanel from "../../configurationPanels/BarChartConfigurationPanel";
import { AXIS, AXIS_NAME } from "../../../constants/axis";
import { newAvailableSortsGroup } from "../../../interfaces/SortConfig";
import { getBucketItems } from "../../../utils/bucketHelper";
import { canSortStackTotalValue } from "./sortHelpers";
import { getCustomSortDisabledExplanation } from "../../../utils/sort";
/**
 * PluggableBarChart
 *
 * ## Buckets
 *
 * | Name     | Id       | Accepts             |
 * |----------|----------|---------------------|
 * | Measures | measures | measures only       |
 * | ViewBy   | view     | attributes or dates |
 * | StackBy  | stack    | attributes or dates |
 *
 * ### Bucket axioms
 *
 * - |Measures| ≥ 1
 * - |ViewBy| ≤ 2
 * - |StackBy| ≤ 1
 * - |StackBy| = 1 ⇒ |Measures| ≤ 1
 * - |StackBy| = 0 ⇒ |Measures| ≤ 20
 * - |Measures| ≥ 2 ⇒ |StackBy| = 0
 * - ∀ a, b ∈ ViewBy (isDate(a) ∧ isDate(b) ⇒ dateDataset(a) = dateDataset(b))
 *
 * ## Dimensions
 *
 * The PluggableBarChart always creates two dimensional execution.
 *
 * - |StackBy| != 0 ⇒ [[StackBy[0]], [...ViewBy, MeasureGroupIdentifier]]
 * - |StackBy| = 0 ⇒ [[MeasureGroupIdentifier], [...ViewBy]]
 *
 * ## Sorts
 *
 * Unless the user specifies otherwise, the sorts used by default are:
 *
 * - |ViewBy| = 2 ∧ |Measures| ≥ 2 ∧ ¬stackMeasures ⇒ [attributeAreaSort(ViewBy[0]), measureSort(Measures[0])]
 * - |ViewBy| = 2 ∧ ¬(|Measures| ≥ 2 ∧ ¬stackMeasures) ⇒ [attributeAreaSort(ViewBy[0]), attributeAreaSort(ViewBy[1])]
 * - |ViewBy| = 1 ∧ (|StackBy| = 1 ∨ stackMeasures) ⇒ [attributeAreaSort(ViewBy[0])]
 * - |ViewBy| = 1 ∧ ¬(|StackBy| = 1 ∨ stackMeasures) ∧ |Measures| ≥ 1 ⇒ [measureSort(Measures[0])]
 *
 * In any other case the sorts are not used.
 *
 * If "enableChartsSorting" is enabled, the sorts can be changed by the user.
 */
var PluggableBarChart = /** @class */ (function (_super) {
    __extends(PluggableBarChart, _super);
    function PluggableBarChart(props) {
        var _this = _super.call(this, props) || this;
        _this.secondaryAxis = AXIS_NAME.SECONDARY_X;
        _this.type = VisualizationTypes.BAR;
        _this.defaultControlsProperties = {
            stackMeasures: false,
        };
        var visualProps = _this.adjustMissingConfiguration(props.visualizationProperties);
        _this.initializeProperties(visualProps);
        return _this;
    }
    // it applies the configuration that can be missing due to old chart version
    PluggableBarChart.prototype.adjustMissingConfiguration = function (supportedProperties) {
        var _a, _b, _c;
        if (!isNil((_a = supportedProperties.controls) === null || _a === void 0 ? void 0 : _a.dataLabels) &&
            isNil((_c = (_b = supportedProperties.controls) === null || _b === void 0 ? void 0 : _b.dataLabels) === null || _c === void 0 ? void 0 : _c.totalsVisible)) {
            supportedProperties.controls.dataLabels.totalsVisible = false;
        }
        return supportedProperties;
    };
    PluggableBarChart.prototype.getSupportedPropertiesList = function () {
        return BAR_CHART_SUPPORTED_PROPERTIES[this.axis || AXIS.DUAL] || [];
    };
    PluggableBarChart.prototype.renderConfigurationPanel = function (insight) {
        if (document.querySelector(this.configPanelElement)) {
            render(React.createElement(BarChartConfigurationPanel, { locale: this.locale, colors: this.colors, references: this.references, properties: this.visualizationProperties, propertiesMeta: this.propertiesMeta, insight: insight, pushData: this.handlePushData, type: this.type, isError: this.getIsError(), isLoading: this.isLoading, featureFlags: this.featureFlags, axis: this.axis }), document.querySelector(this.configPanelElement));
        }
    };
    PluggableBarChart.prototype.getDefaultAndAvailableSort = function (referencePoint, canSortStackTotalValue) {
        if (this.isSortDisabled(referencePoint).disabled) {
            return {
                defaultSort: [],
                availableSorts: [],
            };
        }
        var buckets = referencePoint.buckets;
        var measures = getBucketItems(buckets, BucketNames.MEASURES);
        var viewBy = getBucketItems(buckets, BucketNames.VIEW);
        var stackBy = getBucketItems(buckets, BucketNames.STACK);
        var isStacked = !isEmpty(stackBy) || canSortStackTotalValue;
        if (viewBy.length === 2 && !isEmpty(measures)) {
            if (measures.length >= 2 && !canSortStackTotalValue) {
                return {
                    defaultSort: [
                        newAttributeAreaSort(viewBy[0].localIdentifier, "desc"),
                        newMeasureSort(measures[0].localIdentifier, "desc"),
                    ],
                    availableSorts: [
                        newAvailableSortsGroup(viewBy[0].localIdentifier),
                        newAvailableSortsGroup(viewBy[1].localIdentifier, measures.map(function (m) { return m.localIdentifier; })),
                    ],
                };
            }
            return {
                defaultSort: [
                    newAttributeAreaSort(viewBy[0].localIdentifier, "desc"),
                    isStacked
                        ? newAttributeAreaSort(viewBy[1].localIdentifier, "desc")
                        : newMeasureSort(measures[0].localIdentifier, "desc"),
                ],
                availableSorts: [
                    newAvailableSortsGroup(viewBy[0].localIdentifier),
                    newAvailableSortsGroup(viewBy[1].localIdentifier, isEmpty(stackBy) ? measures.map(function (m) { return m.localIdentifier; }) : [], true, isStacked || measures.length > 1),
                ],
            };
        }
        if (!isEmpty(viewBy) && isStacked) {
            return {
                defaultSort: [newAttributeAreaSort(viewBy[0].localIdentifier, "desc")],
                availableSorts: [
                    newAvailableSortsGroup(viewBy[0].localIdentifier, isEmpty(stackBy) ? measures.map(function (m) { return m.localIdentifier; }) : []),
                ],
            };
        }
        if (!isEmpty(viewBy) && !isEmpty(measures)) {
            return {
                defaultSort: [newMeasureSort(measures[0].localIdentifier, "desc")],
                availableSorts: [
                    newAvailableSortsGroup(viewBy[0].localIdentifier, measures.map(function (m) { return m.localIdentifier; }), true, measures.length > 1),
                ],
            };
        }
        return {
            defaultSort: [],
            availableSorts: [],
        };
    };
    PluggableBarChart.prototype.isSortDisabled = function (referencePoint) {
        var buckets = referencePoint.buckets;
        var viewBy = getBucketItems(buckets, BucketNames.VIEW);
        var measures = getBucketItems(buckets, BucketNames.MEASURES);
        var disabled = viewBy.length < 1 || measures.length < 1;
        var disabledExplanation = getCustomSortDisabledExplanation(measures, viewBy, this.intl);
        return {
            disabled: disabled,
            disabledExplanation: disabledExplanation,
        };
    };
    PluggableBarChart.prototype.getSortConfig = function (referencePoint) {
        var buckets = referencePoint.buckets, properties = referencePoint.properties, previousAvailableSorts = referencePoint.availableSorts;
        var _a = this.getDefaultAndAvailableSort(referencePoint, canSortStackTotalValue(buckets, properties)), defaultSort = _a.defaultSort, availableSorts = _a.availableSorts;
        var _b = this.isSortDisabled(referencePoint), disabled = _b.disabled, disabledExplanation = _b.disabledExplanation;
        return Promise.resolve(__assign({ supported: true, disabled: disabled, appliedSort: _super.prototype.reuseCurrentSort.call(this, previousAvailableSorts, properties, availableSorts, defaultSort), defaultSort: defaultSort, availableSorts: availableSorts }, (disabledExplanation && { disabledExplanation: disabledExplanation })));
    };
    return PluggableBarChart;
}(PluggableColumnBarCharts));
export { PluggableBarChart };
//# sourceMappingURL=PluggableBarChart.js.map