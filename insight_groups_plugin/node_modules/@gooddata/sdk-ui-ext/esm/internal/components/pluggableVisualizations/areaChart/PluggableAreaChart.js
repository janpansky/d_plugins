import { __assign, __extends, __spreadArrays } from "tslib";
// (C) 2019-2022 GoodData Corporation
import { bucketsItems, insightBuckets, newAttributeSort, } from "@gooddata/sdk-model";
import { BucketNames, VisualizationTypes } from "@gooddata/sdk-ui";
import React from "react";
import { render } from "react-dom";
import cloneDeep from "lodash/cloneDeep";
import set from "lodash/set";
import isEmpty from "lodash/isEmpty";
import { ATTRIBUTE, BUCKETS, DATE } from "../../../constants/bucket";
import { AREA_CHART_SUPPORTED_PROPERTIES, OPTIONAL_STACKING_PROPERTIES, } from "../../../constants/supportedProperties";
import { AREA_UICONFIG_WITH_MULTIPLE_DATES, DEFAULT_AREA_UICONFIG, MAX_CATEGORIES_COUNT, MAX_STACKS_COUNT, MAX_VIEW_COUNT, } from "../../../constants/uiConfig";
import { configureOverTimeComparison, configurePercent } from "../../../utils/bucketConfig";
import { getAllAttributeItemsWithPreference, getAllCategoriesAttributeItems, getDateItems, getFilteredMeasuresForStackedCharts, getStackItems, removeDivergentDateItems, isDateBucketItem, isNotDateBucketItem, removeAllArithmeticMeasuresFromDerived, removeAllDerivedMeasures, sanitizeFilters, getMainDateItem, getBucketItems, } from "../../../utils/bucketHelper";
import { getReferencePointWithSupportedProperties, removeImmutableOptionalStackingProperties, } from "../../../utils/propertiesHelper";
import { removeSort, getCustomSortDisabledExplanation } from "../../../utils/sort";
import { setAreaChartUiConfig } from "../../../utils/uiConfigHelpers/areaChartUiConfigHelper";
import LineChartBasedConfigurationPanel from "../../configurationPanels/LineChartBasedConfigurationPanel";
import { PluggableBaseChart } from "../baseChart/PluggableBaseChart";
import { addIntersectionFiltersToInsight, modifyBucketsAttributesForDrillDown, reverseAndTrimIntersection, } from "../drillDownUtil";
import { newAvailableSortsGroup } from "../../../interfaces/SortConfig";
/**
 * PluggableAreaChart
 *
 * ## Buckets
 *
 * | Name     | Id       | Accepts             |
 * |----------|----------|---------------------|
 * | Measures | measures | measures only       |
 * | ViewBy   | view     | attributes or dates |
 * | StackBy  | stack    | attributes only     |
 *
 * The ViewBy can accept one date at most, unless "enableMultipleDates" FF is on.
 *
 * ### Bucket axioms
 *
 * - |Measures| ≥ 1
 * - |ViewBy| ≤ 2
 * - |StackBy| ≤ 1
 * - |ViewBy| + |StackBy| ≤ 2
 * - |ViewBy| + |StackBy| = 2 ⇒ |Measures| ≤ 1
 * - |ViewBy| + |StackBy| \< 2 ⇒ |Measures| ≤ 20
 *
 * ## Dimensions
 *
 * The PluggableAreaChart always creates two dimensional execution.
 *
 * - |StackBy| = 1 ∧ |ViewBy| ≥ 1 ⇒ [[StackBy[0]], [ViewBy[0], MeasureGroupIdentifier]]
 * - |StackBy| = 1 ∧ |ViewBy| = 0 ⇒ [[StackBy[0]], [MeasureGroupIdentifier]]
 * - |StackBy| = 0 ∧ |ViewBy| = 2 ⇒ [[ViewBy[1]], [ViewBy[0], MeasureGroupIdentifier]]
 * - |StackBy| = 0 ∧ |ViewBy| = 1 ⇒ [[MeasureGroupIdentifier], [ViewBy[0]]]
 * - |StackBy| = 0 ∧ |ViewBy| = 0 ⇒ [[MeasureGroupIdentifier], []]]
 *
 * ## Sorts
 *
 * Unless the user specifies otherwise, PluggableAreaChart does not use any sorts.
 *
 */
var PluggableAreaChart = /** @class */ (function (_super) {
    __extends(PluggableAreaChart, _super);
    function PluggableAreaChart(props) {
        var _this = _super.call(this, props) || this;
        _this.type = VisualizationTypes.AREA;
        _this.defaultControlsProperties = {
            stackMeasures: true,
        };
        _this.initializeProperties(props.visualizationProperties);
        return _this;
    }
    PluggableAreaChart.prototype.getUiConfig = function () {
        return cloneDeep(this.isMultipleDatesEnabled() ? AREA_UICONFIG_WITH_MULTIPLE_DATES : DEFAULT_AREA_UICONFIG);
    };
    PluggableAreaChart.prototype.getExtendedReferencePoint = function (referencePoint) {
        var clonedReferencePoint = cloneDeep(referencePoint);
        var newReferencePoint = __assign(__assign({}, clonedReferencePoint), { uiConfig: this.getUiConfig() });
        newReferencePoint = removeAllArithmeticMeasuresFromDerived(newReferencePoint);
        newReferencePoint = removeAllDerivedMeasures(newReferencePoint);
        this.configureBuckets(newReferencePoint);
        newReferencePoint = setAreaChartUiConfig(newReferencePoint, this.intl, this.type);
        newReferencePoint = configurePercent(newReferencePoint, false);
        newReferencePoint = configureOverTimeComparison(newReferencePoint, !!this.featureFlags["enableWeekFilters"]);
        this.supportedPropertiesList = removeImmutableOptionalStackingProperties(newReferencePoint, this.getSupportedPropertiesList());
        newReferencePoint = getReferencePointWithSupportedProperties(newReferencePoint, this.supportedPropertiesList);
        if (!this.featureFlags.enableChartsSorting) {
            newReferencePoint = removeSort(newReferencePoint);
        }
        return Promise.resolve(sanitizeFilters(newReferencePoint));
    };
    PluggableAreaChart.prototype.getInsightWithDrillDownApplied = function (source, drillDownContext, backendSupportsElementUris) {
        var withFilters = this.addFilters(source, drillDownContext.drillDefinition, drillDownContext.event, backendSupportsElementUris);
        return modifyBucketsAttributesForDrillDown(withFilters, drillDownContext.drillDefinition);
    };
    PluggableAreaChart.prototype.getSortConfig = function (referencePoint) {
        var _a = this.getDefaultAndAvailableSort(referencePoint), defaultSort = _a.defaultSort, availableSorts = _a.availableSorts;
        var properties = referencePoint.properties, previousAvailableSorts = referencePoint.availableSorts;
        var _b = this.isSortDisabled(referencePoint, availableSorts), disabled = _b.disabled, disabledExplanation = _b.disabledExplanation;
        return Promise.resolve(__assign({ supported: true, disabled: disabled, appliedSort: _super.prototype.reuseCurrentSort.call(this, previousAvailableSorts, properties, availableSorts, defaultSort), defaultSort: defaultSort,
            availableSorts: availableSorts }, (disabledExplanation && { disabledExplanation: disabledExplanation })));
    };
    PluggableAreaChart.prototype.updateInstanceProperties = function (options, insight, 
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    insightPropertiesMeta) {
        _super.prototype.updateInstanceProperties.call(this, options, insight, insightPropertiesMeta);
        this.updateCustomSupportedProperties(insight);
    };
    PluggableAreaChart.prototype.configureBuckets = function (extendedReferencePoint) {
        var _a = this.isMultipleDatesEnabled()
            ? this.getBucketItemsWithMultipleDates(extendedReferencePoint)
            : this.getBucketItems(extendedReferencePoint), measures = _a.measures, views = _a.views, stacks = _a.stacks;
        set(extendedReferencePoint, BUCKETS, [
            {
                localIdentifier: BucketNames.MEASURES,
                items: measures,
            },
            {
                localIdentifier: BucketNames.VIEW,
                items: views,
            },
            {
                localIdentifier: BucketNames.STACK,
                items: stacks,
            },
        ]);
    };
    PluggableAreaChart.prototype.getSupportedPropertiesList = function () {
        return AREA_CHART_SUPPORTED_PROPERTIES;
    };
    PluggableAreaChart.prototype.renderConfigurationPanel = function (insight) {
        if (document.querySelector(this.configPanelElement)) {
            render(React.createElement(LineChartBasedConfigurationPanel, { locale: this.locale, colors: this.colors, properties: this.visualizationProperties, propertiesMeta: this.propertiesMeta, insight: insight, references: this.references, pushData: this.handlePushData, type: this.type, isError: this.getIsError(), isLoading: this.isLoading, featureFlags: this.featureFlags }), document.querySelector(this.configPanelElement));
        }
    };
    PluggableAreaChart.prototype.addFilters = function (source, drillConfig, event, backendSupportsElementUris) {
        var cutIntersection = reverseAndTrimIntersection(drillConfig, event.drillContext.intersection);
        return addIntersectionFiltersToInsight(source, cutIntersection, backendSupportsElementUris);
    };
    PluggableAreaChart.prototype.updateCustomSupportedProperties = function (insight) {
        if (bucketsItems(insightBuckets(insight, BucketNames.VIEW)).length > 1) {
            this.addSupportedProperties(OPTIONAL_STACKING_PROPERTIES);
            this.setCustomControlsProperties({
                stackMeasures: false,
                stackMeasuresToPercent: false,
            });
        }
        else {
            this.setCustomControlsProperties({});
        }
    };
    PluggableAreaChart.prototype.addSupportedProperties = function (properties) {
        var supportedPropertiesList = this.supportedPropertiesList;
        (properties || []).forEach(function (property) {
            if (!supportedPropertiesList.some(function (supportedProperty) { return supportedProperty === property; })) {
                supportedPropertiesList.push(property);
            }
        });
    };
    PluggableAreaChart.prototype.getAllAttributes = function (buckets) {
        return getAllAttributeItemsWithPreference(buckets, [
            BucketNames.TREND,
            BucketNames.VIEW,
            BucketNames.SEGMENT,
            BucketNames.STACK,
        ]);
    };
    PluggableAreaChart.prototype.getAllAttributesWithoutDate = function (buckets) {
        return this.getAllAttributes(buckets).filter(isNotDateBucketItem);
    };
    PluggableAreaChart.prototype.filterStackItems = function (bucketItems) {
        return bucketItems.filter(isNotDateBucketItem).slice(0, MAX_STACKS_COUNT);
    };
    PluggableAreaChart.prototype.getBucketItems = function (referencePoint) {
        var _a;
        var buckets = (_a = referencePoint === null || referencePoint === void 0 ? void 0 : referencePoint.buckets) !== null && _a !== void 0 ? _a : [];
        var measures = getFilteredMeasuresForStackedCharts(buckets);
        var dateItems = getDateItems(buckets);
        var mainDateItem = getMainDateItem(dateItems);
        var stacks = this.filterStackItems(getStackItems(buckets));
        var isAllowMoreThanOneViewByAttribute = !stacks.length && measures.length <= 1;
        var numOfAttributes = isAllowMoreThanOneViewByAttribute ? MAX_VIEW_COUNT : 1;
        var views = removeDivergentDateItems(getAllCategoriesAttributeItems(buckets), mainDateItem).slice(0, numOfAttributes);
        var hasDateItemInViewByBucket = views.some(isDateBucketItem);
        if (dateItems.length && !hasDateItemInViewByBucket) {
            var allAttributes = this.getAllAttributesWithoutDate(buckets);
            var extraViewItems = allAttributes.slice(0, numOfAttributes - 1);
            views = numOfAttributes > 1 ? __spreadArrays([mainDateItem], extraViewItems) : [mainDateItem];
            if (!isAllowMoreThanOneViewByAttribute && measures.length <= 1) {
                stacks = allAttributes.slice(0, MAX_STACKS_COUNT);
            }
        }
        return {
            measures: measures,
            views: views,
            stacks: stacks,
        };
    };
    PluggableAreaChart.prototype.getViewByMaxItemCount = function (referencePoint) {
        var _a, _b, _c, _d;
        return (_d = (_c = (_b = (_a = referencePoint.uiConfig) === null || _a === void 0 ? void 0 : _a.buckets) === null || _b === void 0 ? void 0 : _b[BucketNames.VIEW]) === null || _c === void 0 ? void 0 : _c.itemsLimit) !== null && _d !== void 0 ? _d : MAX_CATEGORIES_COUNT;
    };
    PluggableAreaChart.prototype.getBucketItemsWithMultipleDates = function (referencePoint) {
        var _a;
        var buckets = (_a = referencePoint === null || referencePoint === void 0 ? void 0 : referencePoint.buckets) !== null && _a !== void 0 ? _a : [];
        var measures = getFilteredMeasuresForStackedCharts(buckets);
        var viewByMaxItemCount = this.getViewByMaxItemCount(referencePoint);
        var stacks = getStackItems(buckets, [ATTRIBUTE, DATE]);
        var allAttributesWithoutStacks = getAllAttributeItemsWithPreference(buckets, [
            BucketNames.LOCATION,
            BucketNames.TREND,
            BucketNames.VIEW,
            BucketNames.ATTRIBUTES,
            BucketNames.SEGMENT,
            BucketNames.STACK,
        ]).filter(function (attribute) { return !stacks.includes(attribute); });
        var maxViews = stacks.length || measures.length > 1 ? 1 : viewByMaxItemCount;
        var views = allAttributesWithoutStacks.slice(0, maxViews);
        return {
            measures: measures,
            views: views,
            stacks: stacks,
        };
    };
    PluggableAreaChart.prototype.getDefaultAndAvailableSort = function (referencePoint) {
        var _a, _b;
        var buckets = referencePoint.buckets, properties = referencePoint.properties;
        var measures = getBucketItems(buckets, BucketNames.MEASURES);
        var viewBy = getBucketItems(buckets, BucketNames.VIEW);
        var stackBy = getBucketItems(buckets, BucketNames.STACK);
        var canSortStackTotal = (_b = (_a = properties === null || properties === void 0 ? void 0 : properties.controls) === null || _a === void 0 ? void 0 : _a.stackMeasures) !== null && _b !== void 0 ? _b : this.getUiConfig().optionalStacking.stackMeasures;
        var defaultSort = viewBy.length > 0 ? [newAttributeSort(viewBy[0].localIdentifier, "asc")] : [];
        if (measures.length >= 2 && viewBy.length === 1 && !canSortStackTotal) {
            return {
                defaultSort: defaultSort,
                availableSorts: [
                    newAvailableSortsGroup(viewBy[0].localIdentifier, measures.map(function (m) { return m.localIdentifier; })),
                ],
            };
        }
        if (measures.length === 1 && isEmpty(stackBy)) {
            if (viewBy.length >= 2) {
                return {
                    defaultSort: defaultSort,
                    availableSorts: [newAvailableSortsGroup(viewBy[0].localIdentifier)],
                };
            }
            if (viewBy.length === 1) {
                return {
                    defaultSort: defaultSort,
                    availableSorts: [
                        newAvailableSortsGroup(viewBy[0].localIdentifier, measures.map(function (m) { return m.localIdentifier; }), true, false),
                    ],
                };
            }
        }
        if (measures.length > 0 && viewBy.length === 1 && (stackBy.length === 1 || canSortStackTotal)) {
            return {
                defaultSort: defaultSort,
                availableSorts: [
                    newAvailableSortsGroup(viewBy[0].localIdentifier, isEmpty(stackBy) ? measures.map(function (m) { return m.localIdentifier; }) : []),
                ],
            };
        }
        return {
            defaultSort: [],
            availableSorts: [],
        };
    };
    PluggableAreaChart.prototype.isSortDisabled = function (referencePoint, availableSorts) {
        var buckets = referencePoint.buckets;
        var measures = getBucketItems(buckets, BucketNames.MEASURES);
        var viewBy = getBucketItems(buckets, BucketNames.VIEW);
        var disabledExplanation = getCustomSortDisabledExplanation(measures, viewBy, this.intl);
        return {
            disabled: viewBy.length < 1 || measures.length < 1 || availableSorts.length === 0,
            disabledExplanation: disabledExplanation,
        };
    };
    return PluggableAreaChart;
}(PluggableBaseChart));
export { PluggableAreaChart };
//# sourceMappingURL=PluggableAreaChart.js.map