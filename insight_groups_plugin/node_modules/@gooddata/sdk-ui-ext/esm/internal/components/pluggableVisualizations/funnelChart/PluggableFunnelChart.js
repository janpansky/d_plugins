import { __extends } from "tslib";
// (C) 2019-2022 GoodData Corporation
import React from "react";
import { render } from "react-dom";
import { PluggablePieChart } from "../pieChart/PluggablePieChart";
import { setFunnelChartUiConfig } from "../../../utils/uiConfigHelpers/funnelChartUiConfigHelper";
import UnsupportedConfigurationPanel from "../../configurationPanels/UnsupportedConfigurationPanel";
import { VisualizationTypes } from "@gooddata/sdk-ui";
/**
 * PluggableFunnelChart
 *
 * ## Buckets
 *
 * | Name     | Id       | Accepts             |
 * |----------|----------|---------------------|
 * | Measures | measures | measures only       |
 * | ViewBy   | view     | attribute or date   |
 *
 * ### Bucket axioms
 *
 * - |ViewBy| ≤ 1
 * - |Measures| ≥ 1 ∧ ≤ 20
 * - |ViewBy| = 1 ⇒ |Measures| = 1
 * - |ViewBy| = 0 ⇒ |Measures| ≥ 1
 *
 * ## Dimensions
 *
 * The PluggableFunnelChart always creates two dimensional execution.
 *
 * - |ViewBy| = 0 ⇒ [[], [MeasureGroupIdentifier]]
 * - |ViewBy| = 1 ⇒ [[MeasureGroupIdentifier], [ViewBy]]
 *
 * ## Default sorts
 *
 * The PluggableFunnelChart does not use any sorts.
 *
 */
var PluggableFunnelChart = /** @class */ (function (_super) {
    __extends(PluggableFunnelChart, _super);
    function PluggableFunnelChart(props) {
        var _this = _super.call(this, props) || this;
        _this.type = VisualizationTypes.FUNNEL;
        return _this;
    }
    PluggableFunnelChart.prototype.getExtendedReferencePoint = function (referencePoint) {
        return _super.prototype.getExtendedReferencePoint.call(this, referencePoint).then(setFunnelChartUiConfig);
    };
    PluggableFunnelChart.prototype.renderConfigurationPanel = function () {
        var _a;
        if (document.querySelector(this.configPanelElement)) {
            var properties = (_a = this.visualizationProperties) !== null && _a !== void 0 ? _a : {};
            render(React.createElement(UnsupportedConfigurationPanel, { locale: this.locale, pushData: this.pushData, properties: properties }), document.querySelector(this.configPanelElement));
        }
    };
    PluggableFunnelChart.prototype.getSortConfig = function (_referencePoint) {
        return Promise.resolve({
            defaultSort: [],
            availableSorts: [],
            supported: false,
            disabled: false,
        });
    };
    return PluggableFunnelChart;
}(PluggablePieChart));
export { PluggableFunnelChart };
//# sourceMappingURL=PluggableFunnelChart.js.map