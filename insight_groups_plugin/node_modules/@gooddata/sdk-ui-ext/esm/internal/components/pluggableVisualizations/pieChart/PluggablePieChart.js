import { __assign, __extends } from "tslib";
// (C) 2019-2022 GoodData Corporation
import React from "react";
import { render } from "react-dom";
import isEmpty from "lodash/isEmpty";
import cloneDeep from "lodash/cloneDeep";
import set from "lodash/set";
import { BucketNames, VisualizationTypes } from "@gooddata/sdk-ui";
import { TOP } from "@gooddata/sdk-ui-charts";
import { newMeasureSort } from "@gooddata/sdk-model";
import { PluggableBaseChart } from "../baseChart/PluggableBaseChart";
import PieChartConfigurationPanel from "../../configurationPanels/PieChartConfigurationPanel";
import { BUCKETS } from "../../../constants/bucket";
import { DASHBOARDS_ENVIRONMENT } from "../../../constants/properties";
import { PIECHART_SUPPORTED_PROPERTIES } from "../../../constants/supportedProperties";
import { DEFAULT_PIE_UICONFIG, PIE_UICONFIG_WITH_MULTIPLE_METRICS, PIE_UICONFIG_WITH_ONE_METRIC, UICONFIG, } from "../../../constants/uiConfig";
import { newAvailableSortsGroup } from "../../../interfaces/SortConfig";
import { configureOverTimeComparison, configurePercent } from "../../../utils/bucketConfig";
import { getAttributeItems, getMeasureItems, limitNumberOfMeasuresInBuckets, removeAllArithmeticMeasuresFromDerived, removeAllDerivedMeasures, sanitizeFilters, getBucketItems, } from "../../../utils/bucketHelper";
import { getReferencePointWithSupportedProperties } from "../../../utils/propertiesHelper";
import { removeSort, getCustomSortDisabledExplanation } from "../../../utils/sort";
import { setPieChartUiConfig } from "../../../utils/uiConfigHelpers/pieChartUiConfigHelper";
/**
 * PluggablePieChart
 *
 * ## Buckets
 *
 * | Name     | Id       | Accepts             |
 * |----------|----------|---------------------|
 * | Measures | measures | measures only       |
 * | ViewBy   | view     | attribute or date   |
 *
 * ### Bucket axioms
 *
 * - |ViewBy| ≤ 1
 * - |Measures| ≥ 1 ∧ ≤ 20
 * - |ViewBy| = 1 ⇒ |Measures| = 1
 * - |ViewBy| = 0 ⇒ |Measures| ≥ 1
 *
 * ## Dimensions
 *
 * The PluggablePieChart always creates two dimensional execution.
 *
 * With measures only:
 * - [[], [MeasureGroupIdentifier]]
 * With viewBy:
 * - [[MeasureGroupIdentifier], [ViewBy]]
 *
 * ## Default sorts
 *
 * When Pie Chart is used with measures only, it's sorted by their order by default.
 * When Pie Chart chart is used with viewBy attribute or date, it's sorted by the values of the measure by default.
 *
 * Default sort behavior can be overriden by sortBy option.
 *
 */
var PluggablePieChart = /** @class */ (function (_super) {
    __extends(PluggablePieChart, _super);
    function PluggablePieChart(props) {
        var _this = _super.call(this, props) || this;
        _this.type = VisualizationTypes.PIE;
        _this.supportedPropertiesList = PIECHART_SUPPORTED_PROPERTIES;
        _this.initializeProperties(props.visualizationProperties);
        return _this;
    }
    PluggablePieChart.prototype.getExtendedReferencePoint = function (referencePoint) {
        var _a;
        var clonedReferencePoint = cloneDeep(referencePoint);
        var newReferencePoint = __assign(__assign({}, clonedReferencePoint), { uiConfig: cloneDeep(DEFAULT_PIE_UICONFIG) });
        newReferencePoint = removeAllArithmeticMeasuresFromDerived(newReferencePoint);
        newReferencePoint = removeAllDerivedMeasures(newReferencePoint);
        var buckets = (_a = clonedReferencePoint === null || clonedReferencePoint === void 0 ? void 0 : clonedReferencePoint.buckets) !== null && _a !== void 0 ? _a : [];
        var attributes = getAttributeItems(buckets);
        if (attributes.length) {
            var limitedBuckets = limitNumberOfMeasuresInBuckets(buckets, 1);
            var limitedMeasures = getMeasureItems(limitedBuckets);
            set(newReferencePoint, BUCKETS, [
                {
                    localIdentifier: BucketNames.MEASURES,
                    items: limitedMeasures,
                },
                {
                    localIdentifier: BucketNames.VIEW,
                    items: attributes.slice(0, 1),
                },
            ]);
        }
        else {
            var measures = getMeasureItems(buckets);
            if (measures.length > 1) {
                set(newReferencePoint, UICONFIG, cloneDeep(PIE_UICONFIG_WITH_MULTIPLE_METRICS));
            }
            else {
                set(newReferencePoint, UICONFIG, cloneDeep(PIE_UICONFIG_WITH_ONE_METRIC));
            }
            set(newReferencePoint, BUCKETS, [
                {
                    localIdentifier: BucketNames.MEASURES,
                    items: measures,
                },
                {
                    localIdentifier: BucketNames.VIEW,
                    items: [],
                },
            ]);
        }
        newReferencePoint = setPieChartUiConfig(newReferencePoint, this.intl, this.type);
        newReferencePoint = configurePercent(newReferencePoint, false);
        newReferencePoint = configureOverTimeComparison(newReferencePoint, !!this.featureFlags["enableWeekFilters"]);
        newReferencePoint = getReferencePointWithSupportedProperties(newReferencePoint, this.supportedPropertiesList);
        if (!this.featureFlags.enableChartsSorting) {
            newReferencePoint = removeSort(newReferencePoint);
        }
        return Promise.resolve(sanitizeFilters(newReferencePoint));
    };
    PluggablePieChart.prototype.getDefaultAndAvailableSort = function (measures, viewBy) {
        if (!isEmpty(measures) && !isEmpty(viewBy)) {
            return {
                defaultSort: [newMeasureSort(measures[0].localIdentifier, "desc")],
                availableSorts: [
                    newAvailableSortsGroup(viewBy[0].localIdentifier, [measures[0].localIdentifier], true, false),
                ],
            };
        }
        return {
            defaultSort: [],
            availableSorts: [],
        };
    };
    PluggablePieChart.prototype.isSortDisabled = function (referencePoint, availableSorts) {
        var buckets = referencePoint.buckets;
        var measures = getMeasureItems(buckets);
        var viewBy = getBucketItems(buckets, BucketNames.VIEW);
        var disabled = viewBy.length < 1 || measures.length < 1 || availableSorts.length === 0;
        var disabledExplanation = getCustomSortDisabledExplanation(measures, viewBy, this.intl);
        return {
            disabled: disabled,
            disabledExplanation: disabledExplanation,
        };
    };
    PluggablePieChart.prototype.getSortConfig = function (referencePoint) {
        var buckets = referencePoint.buckets, properties = referencePoint.properties, previousAvailableSorts = referencePoint.availableSorts;
        var measures = getMeasureItems(buckets);
        var viewBy = getBucketItems(buckets, BucketNames.VIEW);
        var _a = this.getDefaultAndAvailableSort(measures, viewBy), defaultSort = _a.defaultSort, availableSorts = _a.availableSorts;
        var _b = this.isSortDisabled(referencePoint, availableSorts), disabled = _b.disabled, disabledExplanation = _b.disabledExplanation;
        return Promise.resolve(__assign({ supported: true, disabled: disabled, appliedSort: _super.prototype.reuseCurrentSort.call(this, previousAvailableSorts, properties, availableSorts, defaultSort), defaultSort: defaultSort,
            availableSorts: availableSorts }, (disabledExplanation && { disabledExplanation: disabledExplanation })));
    };
    PluggablePieChart.prototype.renderConfigurationPanel = function (insight) {
        if (document.querySelector(this.configPanelElement)) {
            render(React.createElement(PieChartConfigurationPanel, { locale: this.locale, properties: this.visualizationProperties, propertiesMeta: this.propertiesMeta, insight: insight, pushData: this.handlePushData, colors: this.colors, type: this.type, isError: this.getIsError(), isLoading: this.isLoading, featureFlags: this.featureFlags, references: this.references }), document.querySelector(this.configPanelElement));
        }
    };
    PluggablePieChart.prototype.buildVisualizationConfig = function (options, supportedControls) {
        var baseVisualizationConfig = _super.prototype.buildVisualizationConfig.call(this, options, supportedControls);
        if (this.environment === DASHBOARDS_ENVIRONMENT) {
            return __assign(__assign({}, baseVisualizationConfig), { chart: {
                    verticalAlign: TOP,
                } });
        }
        return baseVisualizationConfig;
    };
    return PluggablePieChart;
}(PluggableBaseChart));
export { PluggablePieChart };
//# sourceMappingURL=PluggablePieChart.js.map