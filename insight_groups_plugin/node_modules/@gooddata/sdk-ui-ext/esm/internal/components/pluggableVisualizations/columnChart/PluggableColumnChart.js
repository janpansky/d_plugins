import { __assign, __extends } from "tslib";
// (C) 2019-2022 GoodData Corporation
import isEmpty from "lodash/isEmpty";
import isNil from "lodash/isNil";
import { VisualizationTypes, BucketNames } from "@gooddata/sdk-ui";
import { newAttributeSort } from "@gooddata/sdk-model";
import { PluggableColumnBarCharts } from "../PluggableColumnBarCharts";
import { AXIS, AXIS_NAME } from "../../../constants/axis";
import { COLUMN_CHART_SUPPORTED_PROPERTIES } from "../../../constants/supportedProperties";
import { getBucketItems } from "../../../utils/bucketHelper";
import { canSortStackTotalValue } from "../barChart/sortHelpers";
import { newAvailableSortsGroup } from "../../../interfaces/SortConfig";
import { getCustomSortDisabledExplanation } from "../../../utils/sort";
/**
 * PluggableColumnChart
 *
 * ## Buckets
 *
 * | Name     | Id       | Accepts             |
 * |----------|----------|---------------------|
 * | Measures | measures | measures only       |
 * | ViewBy   | view     | attributes or dates |
 * | StackBy  | stack    | attributes or dates |
 *
 * ### Bucket axioms
 *
 * - |Measures| ≥ 1
 * - |ViewBy| ≤ 2
 * - |StackBy| ≤ 1
 * - |StackBy| = 1 ⇒ |Measures| ≤ 1
 * - |StackBy| = 0 ⇒ |Measures| ≤ 20
 * - |Measures| ≥ 2 ⇒ |StackBy| = 0
 * - ∀ a, b ∈ ViewBy (isDate(a) ∧ isDate(b) ⇒ dateDataset(a) = dateDataset(b))
 *
 * ## Dimensions
 *
 * The PluggableColumnChart always creates two dimensional execution.
 *
 * - |StackBy| != 0 ⇒ [[StackBy[0]], [...ViewBy, MeasureGroupIdentifier]]
 * - |StackBy| = 0 ⇒ [[MeasureGroupIdentifier], [...ViewBy]]
 *
 * ##  Sorts
 *
 * The PluggableColumnChart does not use any sorts.
 *
 * If "enableChartsSorting" is enabled, the sorts can be changed by the user.
 */
var PluggableColumnChart = /** @class */ (function (_super) {
    __extends(PluggableColumnChart, _super);
    function PluggableColumnChart(props) {
        var _this = _super.call(this, props) || this;
        _this.secondaryAxis = AXIS_NAME.SECONDARY_Y;
        _this.type = VisualizationTypes.COLUMN;
        _this.defaultControlsProperties = {
            stackMeasures: false,
        };
        var visualProps = _this.adjustMissingConfiguration(props.visualizationProperties);
        _this.initializeProperties(visualProps);
        return _this;
    }
    // it applies the configuration that can be missing due to old chart version
    PluggableColumnChart.prototype.adjustMissingConfiguration = function (supportedProperties) {
        var _a, _b, _c, _d;
        var dataLabelVisibility = (_b = (_a = supportedProperties.controls) === null || _a === void 0 ? void 0 : _a.dataLabels) === null || _b === void 0 ? void 0 : _b.visible;
        // copy label configuration to totalLabels if not defined yet
        if (!isNil(dataLabelVisibility) && isNil((_d = (_c = supportedProperties.controls) === null || _c === void 0 ? void 0 : _c.dataLabels) === null || _d === void 0 ? void 0 : _d.totalsVisible)) {
            supportedProperties.controls.dataLabels.totalsVisible = dataLabelVisibility;
        }
        return supportedProperties;
    };
    PluggableColumnChart.prototype.getSupportedPropertiesList = function () {
        return COLUMN_CHART_SUPPORTED_PROPERTIES[this.axis || AXIS.DUAL] || [];
    };
    PluggableColumnChart.prototype.getDefaultAndAvailableSort = function (referencePoint, canSortStackTotalValue) {
        if (this.isSortDisabled(referencePoint).disabled) {
            return {
                defaultSort: [],
                availableSorts: [],
            };
        }
        var buckets = referencePoint.buckets;
        var viewBy = getBucketItems(buckets, BucketNames.VIEW);
        var stackBy = getBucketItems(buckets, BucketNames.STACK);
        var measures = getBucketItems(buckets, BucketNames.MEASURES);
        var defaultSort = viewBy.map(function (vb) { return newAttributeSort(vb.localIdentifier, "asc"); });
        var isStacked = !isEmpty(stackBy) || canSortStackTotalValue;
        if (viewBy.length === 2) {
            if (measures.length >= 2 && !canSortStackTotalValue) {
                return {
                    defaultSort: defaultSort,
                    availableSorts: [
                        newAvailableSortsGroup(viewBy[0].localIdentifier),
                        newAvailableSortsGroup(viewBy[1].localIdentifier, measures.map(function (m) { return m.localIdentifier; })),
                    ],
                };
            }
            return {
                defaultSort: defaultSort,
                availableSorts: [
                    newAvailableSortsGroup(viewBy[0].localIdentifier),
                    newAvailableSortsGroup(viewBy[1].localIdentifier, isEmpty(stackBy) ? measures.map(function (m) { return m.localIdentifier; }) : [], true, isStacked || measures.length > 1),
                ],
            };
        }
        if (!isEmpty(viewBy) && isStacked) {
            return {
                defaultSort: defaultSort,
                availableSorts: [
                    newAvailableSortsGroup(viewBy[0].localIdentifier, isEmpty(stackBy) ? measures.map(function (m) { return m.localIdentifier; }) : []),
                ],
            };
        }
        if (!isEmpty(viewBy) && !isEmpty(measures)) {
            return {
                defaultSort: defaultSort,
                availableSorts: [
                    newAvailableSortsGroup(viewBy[0].localIdentifier, measures.map(function (m) { return m.localIdentifier; }), true, measures.length > 1),
                ],
            };
        }
        return {
            defaultSort: [],
            availableSorts: [],
        };
    };
    PluggableColumnChart.prototype.isSortDisabled = function (referencePoint) {
        var buckets = referencePoint.buckets;
        var measures = getBucketItems(buckets, BucketNames.MEASURES);
        var viewBy = getBucketItems(buckets, BucketNames.VIEW);
        var disabled = viewBy.length < 1 || measures.length < 1;
        var disabledExplanation = getCustomSortDisabledExplanation(measures, viewBy, this.intl);
        return {
            disabled: disabled,
            disabledExplanation: disabledExplanation,
        };
    };
    PluggableColumnChart.prototype.getSortConfig = function (referencePoint) {
        var buckets = referencePoint.buckets, properties = referencePoint.properties, previousAvailableSorts = referencePoint.availableSorts;
        var _a = this.getDefaultAndAvailableSort(referencePoint, canSortStackTotalValue(buckets, properties)), defaultSort = _a.defaultSort, availableSorts = _a.availableSorts;
        var _b = this.isSortDisabled(referencePoint), disabled = _b.disabled, disabledExplanation = _b.disabledExplanation;
        return Promise.resolve(__assign({ supported: true, disabled: disabled, appliedSort: _super.prototype.reuseCurrentSort.call(this, previousAvailableSorts, properties, availableSorts, defaultSort), defaultSort: defaultSort,
            availableSorts: availableSorts }, (disabledExplanation && { disabledExplanation: disabledExplanation })));
    };
    return PluggableColumnChart;
}(PluggableColumnBarCharts));
export { PluggableColumnChart };
//# sourceMappingURL=PluggableColumnChart.js.map