import { __assign, __extends } from "tslib";
// (C) 2019-2022 GoodData Corporation
import { BucketNames, VisualizationTypes } from "@gooddata/sdk-ui";
import React from "react";
import { render } from "react-dom";
import isEmpty from "lodash/isEmpty";
import cloneDeep from "lodash/cloneDeep";
import set from "lodash/set";
import { newAttributeSort } from "@gooddata/sdk-model";
import { AXIS, AXIS_NAME } from "../../../constants/axis";
import { ATTRIBUTE, BUCKETS, DATE } from "../../../constants/bucket";
import { LINE_CHART_SUPPORTED_PROPERTIES } from "../../../constants/supportedProperties";
import { DEFAULT_LINE_UICONFIG, LINE_UICONFIG_WITH_MULTIPLE_DATES } from "../../../constants/uiConfig";
import { configureOverTimeComparison, configurePercent } from "../../../utils/bucketConfig";
import { filterOutDerivedMeasures, getAllAttributeItemsWithPreference, getAttributeItemsWithoutStacks, getDateItems, getFilteredMeasuresForStackedCharts, getFistDateItemWithMultipleDates, getMeasureItems, getStackItems, isDateBucketItem, sanitizeFilters, getBucketItems, } from "../../../utils/bucketHelper";
import { getReferencePointWithSupportedProperties, setSecondaryMeasures, } from "../../../utils/propertiesHelper";
import { removeSort, getCustomSortDisabledExplanation } from "../../../utils/sort";
import { setLineChartUiConfig } from "../../../utils/uiConfigHelpers/lineChartUiConfigHelper";
import LineChartBasedConfigurationPanel from "../../configurationPanels/LineChartBasedConfigurationPanel";
import { PluggableBaseChart } from "../baseChart/PluggableBaseChart";
import { addIntersectionFiltersToInsight, modifyBucketsAttributesForDrillDown, reverseAndTrimIntersection, } from "../drillDownUtil";
import { newAvailableSortsGroup } from "../../../interfaces/SortConfig";
/**
 * PluggableLineChart
 *
 * ## Buckets
 *
 * | Name      | Id       | Accepts             |
 * |-----------|----------|---------------------|
 * | Measures  | measures | measures only       |
 * | TrendBy   | trend    | attributes or dates |
 * | SegmentBy | segment  | attributes or dates |
 *
 * ### Bucket axioms
 *
 * - |Measures| ≥ 1
 * - |TrendBy| ≤ 1
 * - |SegmentBy| ≤ 1
 * - |SegmentBy| = 1 ⇒ |Measures| = 1
 * - |SegmentBy| = 0 ⇒ |Measures| ≤ 20
 * - |Measures| ≥ 2 ⇒ |SegmentBy| = 0
 *
 * ## Dimensions
 *
 * The PluggableLineChart always creates two dimensional execution.
 *
 * - |SegmentBy| = 1 ⇒ [[...SegmentBy], [...TrendBy, MeasureGroupIdentifier]]
 * - |SegmentBy| = 0 ⇒ [[MeasureGroupIdentifier], [...TrendBy]]
 *
 * ## Sorts
 *
 * The PluggableLineChart does not use any sorts.
 */
var PluggableLineChart = /** @class */ (function (_super) {
    __extends(PluggableLineChart, _super);
    function PluggableLineChart(props) {
        var _this = _super.call(this, props) || this;
        // set default to DUAL to get the full supported props list
        // and will be updated in getExtendedReferencePoint
        _this.axis = AXIS.DUAL;
        _this.type = VisualizationTypes.LINE;
        _this.supportedPropertiesList = _this.getSupportedPropertiesList();
        _this.initializeProperties(props.visualizationProperties);
        return _this;
    }
    PluggableLineChart.prototype.getSupportedPropertiesList = function () {
        return LINE_CHART_SUPPORTED_PROPERTIES[this.axis];
    };
    PluggableLineChart.prototype.getUiConfig = function () {
        var config = this.isMultipleDatesEnabled()
            ? LINE_UICONFIG_WITH_MULTIPLE_DATES
            : DEFAULT_LINE_UICONFIG;
        return cloneDeep(config);
    };
    PluggableLineChart.prototype.getExtendedReferencePoint = function (referencePoint) {
        var _a, _b;
        var clonedReferencePoint = cloneDeep(referencePoint);
        var newReferencePoint = __assign(__assign({}, clonedReferencePoint), { uiConfig: this.getUiConfig() });
        this.configureBuckets(newReferencePoint);
        newReferencePoint = setSecondaryMeasures(newReferencePoint, AXIS_NAME.SECONDARY_Y);
        this.axis = (_b = (_a = newReferencePoint === null || newReferencePoint === void 0 ? void 0 : newReferencePoint.uiConfig) === null || _a === void 0 ? void 0 : _a.axis) !== null && _b !== void 0 ? _b : AXIS.PRIMARY;
        this.supportedPropertiesList = this.getSupportedPropertiesList();
        newReferencePoint = setLineChartUiConfig(newReferencePoint, this.intl, this.type);
        newReferencePoint = configurePercent(newReferencePoint, false);
        newReferencePoint = configureOverTimeComparison(newReferencePoint, !!this.featureFlags["enableWeekFilters"]);
        newReferencePoint = getReferencePointWithSupportedProperties(newReferencePoint, this.supportedPropertiesList);
        if (!this.featureFlags.enableChartsSorting) {
            newReferencePoint = removeSort(newReferencePoint);
        }
        return Promise.resolve(sanitizeFilters(newReferencePoint));
    };
    PluggableLineChart.prototype.getInsightWithDrillDownApplied = function (source, drillDownContext, backendSupportsElementUris) {
        var withFilters = this.addFilters(source, drillDownContext.drillDefinition, drillDownContext.event, backendSupportsElementUris);
        return modifyBucketsAttributesForDrillDown(withFilters, drillDownContext.drillDefinition);
    };
    PluggableLineChart.prototype.getSortConfig = function (referencePoint) {
        var _a = this.getDefaultAndAvailableSort(referencePoint), defaultSort = _a.defaultSort, availableSorts = _a.availableSorts;
        var _b = this.isSortDisabled(referencePoint, availableSorts), disabled = _b.disabled, disabledExplanation = _b.disabledExplanation;
        var properties = referencePoint.properties, previousAvailableSorts = referencePoint.availableSorts;
        return Promise.resolve(__assign({ supported: true, disabled: disabled, appliedSort: _super.prototype.reuseCurrentSort.call(this, previousAvailableSorts, properties, availableSorts, defaultSort), defaultSort: defaultSort,
            availableSorts: availableSorts }, (disabledExplanation && { disabledExplanation: disabledExplanation })));
    };
    PluggableLineChart.prototype.configureBuckets = function (newReferencePoint) {
        var _a;
        if (this.isMultipleDatesEnabled()) {
            this.configureBucketsWithMultipleDates(newReferencePoint);
            return;
        }
        var buckets = (_a = newReferencePoint === null || newReferencePoint === void 0 ? void 0 : newReferencePoint.buckets) !== null && _a !== void 0 ? _a : [];
        var measures = getMeasureItems(buckets);
        var masterMeasures = filterOutDerivedMeasures(measures);
        var attributes = [];
        var stacks = getStackItems(buckets);
        var dateItems = getDateItems(buckets);
        var allAttributes = getAllAttributeItemsWithPreference(buckets, [
            BucketNames.LOCATION,
            BucketNames.TREND,
            BucketNames.VIEW,
            BucketNames.SEGMENT,
            BucketNames.STACK,
        ]);
        if (dateItems.length) {
            attributes = dateItems.slice(0, 1);
            stacks =
                masterMeasures.length <= 1 && allAttributes.length > 1
                    ? allAttributes
                        .filter(function (attribute) { return !isDateBucketItem(attribute); })
                        .slice(0, 1)
                    : stacks;
        }
        else {
            if (masterMeasures.length <= 1 &&
                allAttributes.length > 1 &&
                !isDateBucketItem(allAttributes === null || allAttributes === void 0 ? void 0 : allAttributes[1])) {
                stacks = allAttributes.slice(1, 2);
            }
            attributes = getAttributeItemsWithoutStacks(buckets).slice(0, 1);
        }
        set(newReferencePoint, BUCKETS, [
            {
                localIdentifier: BucketNames.MEASURES,
                items: getFilteredMeasuresForStackedCharts(buckets),
            },
            {
                localIdentifier: BucketNames.TREND,
                items: attributes,
            },
            {
                localIdentifier: BucketNames.SEGMENT,
                items: stacks,
            },
        ]);
    };
    PluggableLineChart.prototype.renderConfigurationPanel = function (insight) {
        if (document.querySelector(this.configPanelElement)) {
            render(React.createElement(LineChartBasedConfigurationPanel, { locale: this.locale, references: this.references, properties: this.visualizationProperties, propertiesMeta: this.propertiesMeta, insight: insight, colors: this.colors, pushData: this.handlePushData, type: this.type, isError: this.getIsError(), isLoading: this.isLoading, featureFlags: this.featureFlags, axis: this.axis }), document.querySelector(this.configPanelElement));
        }
    };
    PluggableLineChart.prototype.configureBucketsWithMultipleDates = function (newReferencePoint) {
        var _a;
        var buckets = (_a = newReferencePoint === null || newReferencePoint === void 0 ? void 0 : newReferencePoint.buckets) !== null && _a !== void 0 ? _a : [];
        var measures = getMeasureItems(buckets);
        var masterMeasures = filterOutDerivedMeasures(measures);
        var attributes = [];
        var stacks = getStackItems(buckets, [ATTRIBUTE, DATE]);
        var allAttributes = getAllAttributeItemsWithPreference(buckets, [
            BucketNames.LOCATION,
            BucketNames.TREND,
            BucketNames.VIEW,
            BucketNames.ATTRIBUTES,
            BucketNames.SEGMENT,
            BucketNames.STACK,
        ]);
        var firstDateItemInViews = getFistDateItemWithMultipleDates(buckets);
        if (firstDateItemInViews) {
            attributes = [firstDateItemInViews];
            var nextAttribute = allAttributes.find(function (attr) { return attr !== firstDateItemInViews; });
            if (masterMeasures.length <= 1 && nextAttribute && !stacks.length) {
                stacks = [nextAttribute];
            }
        }
        else {
            if (masterMeasures.length <= 1 && allAttributes.length > 1 && !stacks.length) {
                stacks = allAttributes.slice(1, 2);
            }
            attributes = getAttributeItemsWithoutStacks(buckets, [ATTRIBUTE, DATE]).slice(0, 1);
        }
        set(newReferencePoint, BUCKETS, [
            {
                localIdentifier: BucketNames.MEASURES,
                items: getFilteredMeasuresForStackedCharts(buckets),
            },
            {
                localIdentifier: BucketNames.TREND,
                items: attributes,
            },
            {
                localIdentifier: BucketNames.SEGMENT,
                items: stacks,
            },
        ]);
    };
    PluggableLineChart.prototype.addFilters = function (source, drillConfig, event, backendSupportsElementUris) {
        var cutIntersection = reverseAndTrimIntersection(drillConfig, event.drillContext.intersection);
        return addIntersectionFiltersToInsight(source, cutIntersection, backendSupportsElementUris);
    };
    PluggableLineChart.prototype.getDefaultAndAvailableSort = function (referencePoint) {
        var buckets = referencePoint.buckets;
        var measures = getBucketItems(buckets, BucketNames.MEASURES);
        var trendBy = getBucketItems(buckets, BucketNames.TREND);
        var segmentBy = getBucketItems(buckets, BucketNames.SEGMENT);
        var defaultSort = trendBy.length > 0 ? [newAttributeSort(trendBy[0].localIdentifier, "asc")] : [];
        if (measures.length > 0 && trendBy.length === 1) {
            if (isEmpty(segmentBy)) {
                return {
                    defaultSort: defaultSort,
                    availableSorts: [
                        newAvailableSortsGroup(trendBy[0].localIdentifier, measures.map(function (m) { return m.localIdentifier; }), true, measures.length > 1),
                    ],
                };
            }
            return {
                defaultSort: defaultSort,
                availableSorts: [newAvailableSortsGroup(trendBy[0].localIdentifier)],
            };
        }
        return {
            defaultSort: [],
            availableSorts: [],
        };
    };
    PluggableLineChart.prototype.isSortDisabled = function (referencePoint, availableSorts) {
        var buckets = referencePoint.buckets;
        var measures = getBucketItems(buckets, BucketNames.MEASURES);
        var viewBy = getBucketItems(buckets, BucketNames.TREND);
        var disabledExplanation = getCustomSortDisabledExplanation(measures, viewBy, this.intl);
        return {
            disabled: viewBy.length < 1 || measures.length < 1 || availableSorts.length === 0,
            disabledExplanation: disabledExplanation,
        };
    };
    return PluggableLineChart;
}(PluggableBaseChart));
export { PluggableLineChart };
//# sourceMappingURL=PluggableLineChart.js.map