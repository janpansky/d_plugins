// (C) 2022 GoodData Corporation
import isNil from "lodash/isNil";
import isString from "lodash/isString";
import partition from "lodash/partition";
import { isAllMeasureColumnWidthItem, isAttributeColumnLocator, isAttributeColumnWidthItem, isMeasureColumnLocator, isMeasureColumnWidthItem, isWeakMeasureColumnWidthItem, } from "@gooddata/sdk-ui-pivot";
export function factoryNotationForAttributeColumnWidthItem(obj) {
    var _a = obj.attributeColumnWidthItem, attributeIdentifier = _a.attributeIdentifier, width = _a.width;
    var widthValue = width.value, allowGrowToFit = width.allowGrowToFit;
    // cannot use lodash compact, that would remove 0 values which we want to keep here
    var params = ["\"" + attributeIdentifier + "\"", "" + widthValue, allowGrowToFit && "true"].filter(function (item) { return !isNil(item); });
    return "newWidthForAttributeColumn(" + params.join(", ") + ")";
}
export function factoryNotationForMeasureColumnWidthItem(obj) {
    var _a = obj.measureColumnWidthItem, locators = _a.locators, width = _a.width;
    // we know there is exactly one measureLocator and several attributeLocators
    var _b = partition(locators, isMeasureColumnLocator), measureLocator = _b[0][0], attributeLocators = _b[1];
    var allowGrowToFit = isString(width) ? false : width.allowGrowToFit;
    var attributeLocatorFactories = attributeLocators.map(function (locator) {
        return factoryNotationForAttributeColumnLocator(locator);
    });
    // cannot use lodash compact, that would remove 0 values which we want to keep here
    var params = [
        "\"" + measureLocator.measureLocatorItem.measureIdentifier + "\"",
        "[" + attributeLocatorFactories.join(", ") + "]",
        isString(width.value) ? "\"" + width.value + "\"" : width.value,
        allowGrowToFit && "true",
    ].filter(function (item) { return !isNil(item); });
    return "newWidthForSelectedColumns(" + params.join(", ") + ")";
}
export function factoryNotationForAttributeColumnLocator(obj) {
    var _a = obj.attributeLocatorItem, attributeIdentifier = _a.attributeIdentifier, element = _a.element;
    // cannot use lodash compact, that would remove 0 values which we want to keep here
    var params = ["\"" + attributeIdentifier + "\"", element && "\"" + element + "\""].filter(function (item) { return !isNil(item); });
    return "newAttributeColumnLocator(" + params.join(", ") + ")";
}
export function factoryNotationForWeakMeasureColumnWidthItem(obj) {
    var _a = obj.measureColumnWidthItem, locator = _a.locator, width = _a.width;
    // cannot use lodash compact, that would remove 0 values which we want to keep here
    var params = [
        "\"" + locator.measureLocatorItem.measureIdentifier + "\"",
        width.value,
        width.allowGrowToFit && "true",
    ].filter(function (item) { return !isNil(item); });
    return "newWidthForAllColumnsForMeasure(" + params.join(", ") + ")";
}
export function factoryNotationForAllMeasureColumnWidthItem(obj) {
    var _a = obj.measureColumnWidthItem.width, value = _a.value, allowGrowToFit = _a.allowGrowToFit;
    // cannot use lodash compact, that would remove 0 values which we want to keep here
    var params = [value, allowGrowToFit && "true"].filter(function (item) { return !isNil(item); });
    return "newWidthForAllMeasureColumns(" + params.join(", ") + ")";
}
export var pivotTableAdditionalFactories = [
    {
        importInfo: {
            name: "newWidthForAttributeColumn",
            package: "@gooddata/sdk-ui-pivot",
            importType: "named",
        },
        transformation: function (obj) {
            return isAttributeColumnWidthItem(obj)
                ? factoryNotationForAttributeColumnWidthItem(obj)
                : undefined;
        },
    },
    {
        importInfo: {
            name: "newAttributeColumnLocator",
            package: "@gooddata/sdk-ui-pivot",
            importType: "named",
        },
        transformation: function (obj) {
            return isAttributeColumnLocator(obj) ? factoryNotationForAttributeColumnLocator(obj) : undefined;
        },
    },
    {
        importInfo: {
            name: "newWidthForAllColumnsForMeasure",
            package: "@gooddata/sdk-ui-pivot",
            importType: "named",
        },
        transformation: function (obj) {
            return isWeakMeasureColumnWidthItem(obj)
                ? factoryNotationForWeakMeasureColumnWidthItem(obj)
                : undefined;
        },
    },
    {
        importInfo: {
            name: "newWidthForSelectedColumns",
            package: "@gooddata/sdk-ui-pivot",
            importType: "named",
        },
        transformation: function (obj) {
            return isMeasureColumnWidthItem(obj) ? factoryNotationForMeasureColumnWidthItem(obj) : undefined;
        },
    },
    {
        importInfo: {
            name: "newWidthForAllMeasureColumns",
            package: "@gooddata/sdk-ui-pivot",
            importType: "named",
        },
        transformation: function (obj) {
            return isAllMeasureColumnWidthItem(obj)
                ? factoryNotationForAllMeasureColumnWidthItem(obj)
                : undefined;
        },
    },
];
//# sourceMappingURL=pivotTableAdditionalFactories.js.map