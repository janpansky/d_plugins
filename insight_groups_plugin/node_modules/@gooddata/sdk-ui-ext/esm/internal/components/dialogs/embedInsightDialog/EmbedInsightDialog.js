import { __assign } from "tslib";
// (C) 2022 GoodData Corporation
import { IntlWrapper } from "@gooddata/sdk-ui";
import React, { useCallback, useEffect, useMemo, useState } from "react";
import { EmbedInsightDialogBase, Overlay, getDefaultEmbedCodeOptions, getHeightWithUnitsForEmbedCode, } from "@gooddata/sdk-ui-kit";
import { FullVisualizationCatalog } from "../../VisualizationCatalog";
import { insightViewCodeGenerator } from "../../../utils/embeddingInsightViewCodeGenerator/insightViewCodeGenerator";
var INSIGHT_VIEW_PROPERTIES_LINK = "https://sdk.gooddata.com/gooddata-ui/docs/visualization_component.html#properties";
/**
 * @internal
 */
export var EmbedInsightDialog = function (props) {
    var locale = props.locale, insight = props.insight, backend = props.backend, settings = props.settings, colorPalette = props.colorPalette, executionConfig = props.executionConfig, codeType = props.codeType, integrationDocLink = props.integrationDocLink, onClose = props.onClose, onCopyCode = props.onCopyCode;
    var _a = useState("ts"), codeLang = _a[0], setCodeLang = _a[1];
    var _b = useState(getDefaultEmbedCodeOptions(codeType)), codeOption = _b[0], setCodeOption = _b[1];
    useEffect(function () {
        setCodeOption(getDefaultEmbedCodeOptions(codeType));
    }, [codeType]);
    var onLanguageChange = useCallback(function (codeLanguage) {
        setCodeLang(codeLanguage);
    }, []);
    var code = useMemo(function () {
        var inputBase = {
            insight: insight,
            settings: settings,
            backend: backend,
            colorPalette: colorPalette,
            executionConfig: executionConfig,
            codeLang: codeLang,
        };
        return codeOption.type === "definition"
            ? generateCodeByDefinition(__assign(__assign({}, inputBase), { codeOption: codeOption }))
            : generateCodeByReference(__assign(__assign({}, inputBase), { codeOption: codeOption }));
    }, [codeOption, insight, settings, backend, colorPalette, executionConfig, codeLang]);
    var onCodeOptionChange = useCallback(function (codeOpt) {
        setCodeOption(codeOpt);
    }, []);
    var documentationLink = useMemo(function () { return getLinkToPropertiesDocumentation(codeType, insight); }, [codeType, insight]);
    return (React.createElement(IntlWrapper, { locale: locale },
        React.createElement(ModalOverlay, null,
            React.createElement(EmbedInsightDialogBase, { code: code, codeLanguage: codeLang, codeOption: codeOption, propertiesLink: documentationLink, integrationDocLink: integrationDocLink, onClose: onClose, onCopyCode: onCopyCode, onCodeLanguageChange: onLanguageChange, onCodeOptionChange: onCodeOptionChange }))));
};
var getLinkToPropertiesDocumentation = function (codeType, insight) {
    if (codeType === "definition") {
        var meta = FullVisualizationCatalog.forInsight(insight).getMeta();
        if (meta === null || meta === void 0 ? void 0 : meta.documentationUrl) {
            return (meta === null || meta === void 0 ? void 0 : meta.documentationUrl) + "#properties";
        }
    }
    return INSIGHT_VIEW_PROPERTIES_LINK;
};
var generateCodeByReference = function (input) {
    var backend = input.backend, codeLang = input.codeLang, codeOption = input.codeOption, colorPalette = input.colorPalette, executionConfig = input.executionConfig, insight = input.insight, settings = input.settings;
    var height = getHeightWithUnitsForEmbedCode(codeOption);
    return insightViewCodeGenerator(insight, {
        context: {
            settings: settings,
            backend: backend,
            colorPalette: colorPalette,
            executionConfig: executionConfig,
        },
        language: codeLang,
        height: height,
        omitChartProps: codeOption.displayTitle ? [] : ["showTitle"],
    });
};
var generateCodeByDefinition = function (input) {
    var _a;
    var backend = input.backend, codeLang = input.codeLang, codeOption = input.codeOption, colorPalette = input.colorPalette, executionConfig = input.executionConfig, insight = input.insight, settings = input.settings;
    var height = getHeightWithUnitsForEmbedCode(codeOption);
    var descriptor = FullVisualizationCatalog.forInsight(insight);
    return (_a = descriptor.getEmbeddingCode) === null || _a === void 0 ? void 0 : _a.call(descriptor, insight, {
        context: {
            settings: settings,
            backend: backend,
            colorPalette: colorPalette,
            executionConfig: executionConfig,
        },
        language: codeLang,
        height: height,
        omitChartProps: codeOption.includeConfiguration ? [] : ["config"],
    });
};
var BUBBLE_ALIGN_POINTS = [{ align: "cc cc" }];
var ModalOverlay = function (props) {
    var children = props.children;
    return (React.createElement(Overlay, { alignPoints: BUBBLE_ALIGN_POINTS, isModal: true, positionType: "fixed" }, children));
};
//# sourceMappingURL=EmbedInsightDialog.js.map