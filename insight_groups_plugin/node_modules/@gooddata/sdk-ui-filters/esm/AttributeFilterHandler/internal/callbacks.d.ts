import { AttributeFilterHandlerEventListener } from "./redux";
import { Callback, CallbackRegistration, Unsubscribe, InvertableAttributeElementSelection, OnLoadCustomElementsSuccessCallbackPayload, OnLoadCustomElementsErrorCallbackPayload, OnSelectionChangedCallbackPayload, OnSelectionCommittedCallbackPayload } from "../types";
import { GoodDataSdkError } from "@gooddata/sdk-ui";
/**
 * @internal
 */
export declare const newAttributeFilterCallbacks: () => {
    registrations: {
        initStart: {
            invoke: (payload: {
                correlation: string;
            }) => void;
            subscribe: CallbackRegistration<{
                correlation: string;
            }>;
        };
        initSuccess: {
            invoke: (payload: {
                correlation: string;
            }) => void;
            subscribe: CallbackRegistration<{
                correlation: string;
            }>;
        };
        initError: {
            invoke: (payload: import("../types").CallbackPayloadWithCorrelation<{
                error: GoodDataSdkError;
            }>) => void;
            subscribe: CallbackRegistration<import("../types").CallbackPayloadWithCorrelation<{
                error: GoodDataSdkError;
            }>>;
        };
        initCancel: {
            invoke: (payload: {
                correlation: string;
            }) => void;
            subscribe: CallbackRegistration<{
                correlation: string;
            }>;
        };
        loadAttributeStart: {
            invoke: (payload: {
                correlation: string;
            }) => void;
            subscribe: CallbackRegistration<{
                correlation: string;
            }>;
        };
        loadAttributeSuccess: {
            invoke: (payload: import("../types").CallbackPayloadWithCorrelation<{
                attribute: import("@gooddata/sdk-model").IAttributeMetadataObject;
            }>) => void;
            subscribe: CallbackRegistration<import("../types").CallbackPayloadWithCorrelation<{
                attribute: import("@gooddata/sdk-model").IAttributeMetadataObject;
            }>>;
        };
        loadAttributeError: {
            invoke: (payload: import("../types").CallbackPayloadWithCorrelation<{
                error: GoodDataSdkError;
            }>) => void;
            subscribe: CallbackRegistration<import("../types").CallbackPayloadWithCorrelation<{
                error: GoodDataSdkError;
            }>>;
        };
        loadAttributeCancel: {
            invoke: (payload: {
                correlation: string;
            }) => void;
            subscribe: CallbackRegistration<{
                correlation: string;
            }>;
        };
        loadInitialElementsPageStart: {
            invoke: (payload: {
                correlation: string;
            }) => void;
            subscribe: CallbackRegistration<{
                correlation: string;
            }>;
        };
        loadInitialElementsPageSuccess: {
            invoke: (payload: import("../types").CallbackPayloadWithCorrelation<import("../types").ILoadElementsResult>) => void;
            subscribe: CallbackRegistration<import("../types").CallbackPayloadWithCorrelation<import("../types").ILoadElementsResult>>;
        };
        loadInitialElementsPageError: {
            invoke: (payload: import("../types").CallbackPayloadWithCorrelation<{
                error: GoodDataSdkError;
            }>) => void;
            subscribe: CallbackRegistration<import("../types").CallbackPayloadWithCorrelation<{
                error: GoodDataSdkError;
            }>>;
        };
        loadInitialElementsPageCancel: {
            invoke: (payload: {
                correlation: string;
            }) => void;
            subscribe: CallbackRegistration<{
                correlation: string;
            }>;
        };
        loadNextElementsPageStart: {
            invoke: (payload: {
                correlation: string;
            }) => void;
            subscribe: CallbackRegistration<{
                correlation: string;
            }>;
        };
        loadNextElementsPageSuccess: {
            invoke: (payload: import("../types").CallbackPayloadWithCorrelation<import("../types").ILoadElementsResult>) => void;
            subscribe: CallbackRegistration<import("../types").CallbackPayloadWithCorrelation<import("../types").ILoadElementsResult>>;
        };
        loadNextElementsPageError: {
            invoke: (payload: import("../types").CallbackPayloadWithCorrelation<{
                error: GoodDataSdkError;
            }>) => void;
            subscribe: CallbackRegistration<import("../types").CallbackPayloadWithCorrelation<{
                error: GoodDataSdkError;
            }>>;
        };
        loadNextElementsPageCancel: {
            invoke: (payload: {
                correlation: string;
            }) => void;
            subscribe: CallbackRegistration<{
                correlation: string;
            }>;
        };
        loadCustomElementsStart: {
            invoke: (payload: Partial<{
                correlation: string;
            }>) => void;
            subscribe: CallbackRegistration<Partial<{
                correlation: string;
            }>>;
        };
        loadCustomElementsSuccess: {
            invoke: (payload: OnLoadCustomElementsSuccessCallbackPayload) => void;
            subscribe: CallbackRegistration<OnLoadCustomElementsSuccessCallbackPayload>;
        };
        loadCustomElementsError: {
            invoke: (payload: OnLoadCustomElementsErrorCallbackPayload) => void;
            subscribe: CallbackRegistration<OnLoadCustomElementsErrorCallbackPayload>;
        };
        loadCustomElementsCancel: {
            invoke: (payload: Partial<{
                correlation: string;
            }>) => void;
            subscribe: CallbackRegistration<Partial<{
                correlation: string;
            }>>;
        };
        selectionChanged: {
            invoke: (payload: OnSelectionChangedCallbackPayload<InvertableAttributeElementSelection>) => void;
            subscribe: CallbackRegistration<OnSelectionChangedCallbackPayload<InvertableAttributeElementSelection>>;
        };
        selectionCommitted: {
            invoke: (payload: OnSelectionCommittedCallbackPayload<InvertableAttributeElementSelection>) => void;
            subscribe: CallbackRegistration<OnSelectionCommittedCallbackPayload<InvertableAttributeElementSelection>>;
        };
        update: {
            invoke: (payload: void) => void;
            subscribe: CallbackRegistration<void>;
        };
    };
    registerCallback: <T>(cb: Callback<T>, registerFn: {
        invoke: (payload: T) => void;
        subscribe: CallbackRegistration<T>;
    }) => Unsubscribe;
    unsubscribeAll: () => void;
    eventListener: AttributeFilterHandlerEventListener;
};
//# sourceMappingURL=callbacks.d.ts.map