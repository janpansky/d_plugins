import { __assign } from "tslib";
// (C) 2022 GoodData Corporation
import invariant from "ts-invariant";
import compact from "lodash/compact";
import { actions, createAttributeFilterHandlerStore, selectAttribute, selectElements, selectElementsTotalCount, selectElementsTotalCountWithCurrentSettings, selectAttributeFilter, selectSearch, selectWorkingSelection, selectCommittedSelection, selectElementsCache, getElementsByKeys, selectAttributeStatus, selectAttributeError, selectInitStatus, selectInitError, selectLoadInitialElementsPageStatus, selectLoadInitialElementsPageError, selectLoadNextElementsPageStatus, selectLoadNextElementsPageError, selectLimitingMeasures, selectLimitingAttributeFilters, selectLimitingDateFilters, selectLimit, selectOrder, selectInvertableCommittedSelection, selectInvertableWorkingSelection, selectIsWorkingSelectionChanged, selectIsWorkingSelectionEmpty, selectOffset, selectIsLoadElementsOptionsChanged, selectLimitingAttributeFiltersAttributes, } from "./redux";
import { newAttributeFilterCallbacks } from "./callbacks";
/**
 * @internal
 */
var AttributeFilterReduxBridge = /** @class */ (function () {
    function AttributeFilterReduxBridge(config) {
        var _this = this;
        this.initializeBridge = function () {
            _this.callbacks = newAttributeFilterCallbacks();
            _this.redux = createAttributeFilterHandlerStore(__assign(__assign({}, _this.config), { eventListener: function (action, select) {
                    _this.callbacks.eventListener(action, select);
                } }));
        };
        //
        // Init
        //
        this.init = function (correlation) {
            _this.redux.dispatch(actions.init({
                correlation: correlation,
            }));
        };
        this.getInitStatus = function () {
            return _this.redux.select(selectInitStatus);
        };
        this.getInitError = function () {
            return _this.redux.select(selectInitError);
        };
        this.onInitStart = function (cb) {
            return _this.callbacks.registerCallback(cb, _this.callbacks.registrations.initStart);
        };
        this.onInitSuccess = function (cb) {
            return _this.callbacks.registerCallback(cb, _this.callbacks.registrations.initSuccess);
        };
        this.onInitError = function (cb) {
            return _this.callbacks.registerCallback(cb, _this.callbacks.registrations.initError);
        };
        this.onInitCancel = function (cb) {
            return _this.callbacks.registerCallback(cb, _this.callbacks.registrations.initCancel);
        };
        //
        // Attribute
        //
        this.loadAttribute = function (correlation) {
            _this.redux.dispatch(actions.loadAttributeRequest({ correlation: correlation }));
        };
        this.cancelAttributeLoad = function () {
            _this.redux.dispatch(actions.loadAttributeCancelRequest());
        };
        this.getAttribute = function () {
            return _this.redux.select(selectAttribute);
        };
        this.getAttributeStatus = function () {
            return _this.redux.select(selectAttributeStatus);
        };
        this.getAttributeError = function () {
            return _this.redux.select(selectAttributeError);
        };
        this.onLoadAttributeStart = function (cb) {
            return _this.callbacks.registerCallback(cb, _this.callbacks.registrations.loadAttributeStart);
        };
        this.onLoadAttributeSuccess = function (cb) {
            return _this.callbacks.registerCallback(cb, _this.callbacks.registrations.loadAttributeSuccess);
        };
        this.onLoadAttributeError = function (cb) {
            return _this.callbacks.registerCallback(cb, _this.callbacks.registrations.loadAttributeError);
        };
        this.onLoadAttributeCancel = function (cb) {
            return _this.callbacks.registerCallback(cb, _this.callbacks.registrations.loadAttributeCancel);
        };
        //
        // Initial elements page
        //
        this.loadInitialElementsPage = function (correlation) {
            _this.redux.dispatch(actions.loadInitialElementsPageRequest({ correlation: correlation }));
        };
        this.cancelInitialElementsPageLoad = function () {
            _this.redux.dispatch(actions.loadInitialElementsPageCancelRequest());
        };
        this.getInitialElementsPageStatus = function () {
            return _this.redux.select(selectLoadInitialElementsPageStatus);
        };
        this.getInitialElementsPageError = function () {
            return _this.redux.select(selectLoadInitialElementsPageError);
        };
        this.onLoadInitialElementsPageStart = function (cb) {
            return _this.callbacks.registerCallback(cb, _this.callbacks.registrations.loadInitialElementsPageStart);
        };
        this.onLoadInitialElementsPageSuccess = function (cb) {
            return _this.callbacks.registerCallback(cb, _this.callbacks.registrations.loadInitialElementsPageSuccess);
        };
        this.onLoadInitialElementsPageError = function (cb) {
            return _this.callbacks.registerCallback(cb, _this.callbacks.registrations.loadInitialElementsPageError);
        };
        this.onLoadInitialElementsPageCancel = function (cb) {
            return _this.callbacks.registerCallback(cb, _this.callbacks.registrations.loadInitialElementsPageCancel);
        };
        //
        // Next elements page
        //
        this.loadNextElementsPage = function (correlation) {
            _this.redux.dispatch(actions.loadNextElementsPageRequest({ correlation: correlation }));
        };
        this.getNextElementsPageStatus = function () {
            return _this.redux.select(selectLoadNextElementsPageStatus);
        };
        this.getNextElementsPageError = function () {
            return _this.redux.select(selectLoadNextElementsPageError);
        };
        this.onLoadNextElementsPageStart = function (cb) {
            return _this.callbacks.registerCallback(cb, _this.callbacks.registrations.loadNextElementsPageStart);
        };
        this.onLoadNextElementsPageSuccess = function (cb) {
            return _this.callbacks.registerCallback(cb, _this.callbacks.registrations.loadNextElementsPageSuccess);
        };
        this.onLoadNextElementsPageError = function (cb) {
            return _this.callbacks.registerCallback(cb, _this.callbacks.registrations.loadNextElementsPageError);
        };
        this.onLoadNextElementsPageCancel = function (cb) {
            return _this.callbacks.registerCallback(cb, _this.callbacks.registrations.loadNextElementsPageCancel);
        };
        //
        // Custom elements
        //
        this.loadCustomElements = function (options, correlation) {
            _this.redux.dispatch(actions.loadCustomElementsRequest({ options: options, correlation: correlation }));
        };
        this.onLoadCustomElementsStart = function (cb) {
            return _this.callbacks.registerCallback(cb, _this.callbacks.registrations.loadCustomElementsStart);
        };
        this.onLoadCustomElementsSuccess = function (cb) {
            return _this.callbacks.registerCallback(cb, _this.callbacks.registrations.loadCustomElementsSuccess);
        };
        this.onLoadCustomElementsError = function (cb) {
            return _this.callbacks.registerCallback(cb, _this.callbacks.registrations.loadCustomElementsError);
        };
        this.onLoadCustomElementsCancel = function (cb) {
            return _this.callbacks.registerCallback(cb, _this.callbacks.registrations.loadCustomElementsCancel);
        };
        //
        // Elements options
        //
        this.getOffset = function () {
            return _this.redux.select(selectOffset);
        };
        this.setSearch = function (search) {
            _this.redux.dispatch(actions.setSearch({ search: search }));
        };
        this.getSearch = function () {
            return _this.redux.select(selectSearch);
        };
        this.setLimit = function (limit) {
            _this.redux.dispatch(actions.setLimit({ limit: limit }));
        };
        this.getLimit = function () {
            return _this.redux.select(selectLimit);
        };
        this.setOrder = function (order) {
            _this.redux.dispatch(actions.setOrder({ order: order }));
        };
        this.getOrder = function () {
            return _this.redux.select(selectOrder);
        };
        this.setLimitingMeasures = function (filters) {
            _this.redux.dispatch(actions.setLimitingMeasures({ filters: filters }));
        };
        this.getLimitingMeasures = function () {
            return _this.redux.select(selectLimitingMeasures);
        };
        this.setLimitingAttributeFilters = function (filters) {
            _this.redux.dispatch(actions.setLimitingAttributeFilters({ filters: filters }));
        };
        this.getLimitingAttributeFilters = function () {
            return _this.redux.select(selectLimitingAttributeFilters);
        };
        this.setLimitingDateFilters = function (filters) {
            _this.redux.dispatch(actions.setLimitingDateFilters({ filters: filters }));
        };
        this.getLimitingDateFilters = function () {
            return _this.redux.select(selectLimitingDateFilters);
        };
        //
        // Elements
        //
        this.getAllElements = function () {
            return _this.redux.select(selectElements);
        };
        this.getElementsByKey = function (keys) {
            var elementsCache = _this.redux.select(selectElementsCache);
            return getElementsByKeys(keys, elementsCache);
        };
        this.getTotalCount = function () {
            return _this.redux.select(selectElementsTotalCount);
        };
        this.getTotalCountWithCurrentSettings = function () {
            return _this.redux.select(selectElementsTotalCountWithCurrentSettings);
        };
        this.getLimitingAttributeFiltersAttributes = function () {
            return _this.redux.select(selectLimitingAttributeFiltersAttributes);
        };
        //
        // Multi select
        //
        this.changeMultiSelection = function (_a) {
            var keys = _a.keys, isInverted = _a.isInverted;
            _this.redux.dispatch(actions.changeSelection({
                selection: keys,
                isInverted: isInverted,
            }));
        };
        this.revertMultiSelection = function () {
            _this.redux.dispatch(actions.revertSelection());
        };
        this.commitMultiSelection = function () {
            _this.redux.dispatch(actions.commitSelection());
        };
        this.invertMultiSelection = function () {
            _this.redux.dispatch(actions.invertSelection());
        };
        this.clearMultiSelection = function () {
            _this.redux.dispatch(actions.clearSelection());
        };
        this.getWorkingMultiSelection = function () {
            return _this.redux.select(selectInvertableWorkingSelection);
        };
        this.getCommittedMultiSelection = function () {
            return _this.redux.select(selectInvertableCommittedSelection);
        };
        // Single select
        this.changeSingleSelection = function (selection) {
            _this.redux.dispatch(actions.changeSelection({
                isInverted: false,
                selection: compact([selection]),
            }));
        };
        this.revertSingleSelection = function () {
            _this.redux.dispatch(actions.revertSelection());
        };
        this.commitSingleSelection = function () {
            _this.redux.dispatch(actions.commitSelection());
        };
        this.getWorkingSingleSelection = function () {
            var _a = _this.redux.select(selectWorkingSelection), element = _a[0], maybeMoreElements = _a.slice(1);
            invariant(!maybeMoreElements.length, "Trying to invoke single select method, but multiple elements are selected.");
            return element;
        };
        this.getCommittedSingleSelection = function () {
            var _a = _this.redux.select(selectCommittedSelection), element = _a[0], maybeMoreElements = _a.slice(1);
            invariant(!maybeMoreElements.length, "Trying to invoke single select method, but multiple elements are selected.");
            return element;
        };
        this.onMultiSelectionChanged = function (cb) {
            return _this.callbacks.registerCallback(cb, _this.callbacks.registrations.selectionChanged);
        };
        this.onMultiSelectionCommitted = function (cb) {
            return _this.callbacks.registerCallback(cb, _this.callbacks.registrations.selectionCommitted);
        };
        this.onSingleSelectionChanged = function (cb) {
            return _this.callbacks.registerCallback(function (_a) {
                var selection = _a.selection;
                return cb({ selection: selection[0] });
            }, _this.callbacks.registrations.selectionChanged);
        };
        this.onSingleSelectionCommitted = function (cb) {
            return _this.callbacks.registerCallback(function (_a) {
                var selection = _a.selection;
                return cb({ selection: selection[0] });
            }, _this.callbacks.registrations.selectionCommitted);
        };
        //
        // Selection
        //
        this.getIsWorkingSelectionEmpty = function () {
            return _this.redux.select(selectIsWorkingSelectionEmpty);
        };
        this.getIsWorkingSelectionChanged = function () {
            return _this.redux.select(selectIsWorkingSelectionChanged);
        };
        //
        // Filter
        //
        this.getFilter = function () {
            return _this.redux.select(selectAttributeFilter);
        };
        this.onUpdate = function (cb) {
            return _this.callbacks.registerCallback(cb, _this.callbacks.registrations.update);
        };
        this.isLoadElementsOptionsChanged = function () {
            return _this.redux.select(selectIsLoadElementsOptionsChanged);
        };
        this.config = config;
        this.initializeBridge();
    }
    AttributeFilterReduxBridge.prototype.cancelNextElementsPageLoad = function () {
        this.redux.dispatch(actions.loadNextElementsPageCancelRequest());
    };
    AttributeFilterReduxBridge.prototype.cancelCustomElementsLoad = function (correlation) {
        this.redux.dispatch(actions.loadCustomElementsCancelRequest({ correlation: correlation }));
    };
    return AttributeFilterReduxBridge;
}());
export { AttributeFilterReduxBridge };
//# sourceMappingURL=bridge.js.map