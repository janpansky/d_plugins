import { __spreadArrays } from "tslib";
// (C) 2021-2022 GoodData Corporation
import { createSelector } from "@reduxjs/toolkit";
import isEmpty from "lodash/isEmpty";
import isEqual from "lodash/isEqual";
import { selectState } from "../common/selectors";
/**
 * @internal
 */
export var selectWorkingSelection = createSelector(selectState, function (state) { return state.selection.working.keys; });
/**
 * @internal
 */
export var selectIsWorkingSelectionInverted = createSelector(selectState, function (state) { return state.selection.working.isInverted; });
/**
 * @internal
 */
export var selectCommittedSelection = createSelector(selectState, function (state) { return state.selection.commited.keys; });
/**
 * @internal
 */
export var selectIsCommittedSelectionInverted = createSelector(selectState, function (state) { return state.selection.commited.isInverted; });
/**
 * @internal
 */
export var selectInvertableWorkingSelection = createSelector(selectWorkingSelection, selectIsWorkingSelectionInverted, function (keys, isInverted) { return ({
    keys: keys,
    isInverted: isInverted,
}); });
/**
 * @internal
 */
export var selectInvertableCommittedSelection = createSelector(selectCommittedSelection, selectIsCommittedSelectionInverted, function (keys, isInverted) { return ({
    keys: keys,
    isInverted: isInverted,
}); });
/**
 * @internal
 */
export var selectIsWorkingSelectionChanged = createSelector(selectIsWorkingSelectionInverted, selectWorkingSelection, selectIsCommittedSelectionInverted, selectCommittedSelection, function (isWorkingSelectionInverted, workingSelection, isCommitedSelectionInverted, commitedSelection) {
    return isWorkingSelectionInverted !== isCommitedSelectionInverted ||
        !isEqual(__spreadArrays(commitedSelection).sort(), __spreadArrays(workingSelection).sort());
});
/**
 * @internal
 */
export var selectIsWorkingSelectionEmpty = createSelector(selectWorkingSelection, isEmpty);
//# sourceMappingURL=selectionSelectors.js.map