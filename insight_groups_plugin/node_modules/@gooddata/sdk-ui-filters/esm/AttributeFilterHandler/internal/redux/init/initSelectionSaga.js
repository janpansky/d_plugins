import { __generator } from "tslib";
import { select, fork, take, race, call } from "redux-saga/effects";
import { isAttributeElementsByRef } from "@gooddata/sdk-model";
import { loadCustomElementsSaga } from "../loadCustomElements/loadCustomElementsSaga";
import { selectAttributeFilterElements } from "../filter/filterSelectors";
import { actions } from "../store/slice";
import { getAttributeFilterContext } from "../common/sagas";
import { selectElementsForm } from "../common/selectors";
/**
 * @internal
 */
export function initSelectionSaga(correlation) {
    var elements, context, elementsForm, elementKeys, initSelectionCorrelation, error;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, select(selectAttributeFilterElements)];
            case 1:
                elements = _a.sent();
                return [4 /*yield*/, call(getAttributeFilterContext)];
            case 2:
                context = _a.sent();
                return [4 /*yield*/, select(selectElementsForm)];
            case 3:
                elementsForm = _a.sent();
                elementKeys = isAttributeElementsByRef(elements) ? elements.uris : elements.values;
                if (elementKeys.length === 0) {
                    return [2 /*return*/];
                }
                initSelectionCorrelation = "initSelection_" + correlation;
                return [4 /*yield*/, fork(loadCustomElementsSaga, actions.loadCustomElementsRequest({
                        options: {
                            elements: elements,
                            offset: 0,
                            limit: 550,
                            search: undefined,
                            excludePrimaryLabel: !context.backend.capabilities.supportsElementUris && elementsForm === "values",
                        },
                        correlation: initSelectionCorrelation,
                    }))];
            case 4:
                _a.sent();
                return [4 /*yield*/, race({
                        success: take(function (a) {
                            return actions.loadCustomElementsSuccess.match(a) &&
                                a.payload.correlation === initSelectionCorrelation;
                        }),
                        error: take(function (a) {
                            return actions.loadCustomElementsError.match(a) &&
                                a.payload.correlation === initSelectionCorrelation;
                        }),
                        cancel: take(function (a) {
                            return actions.loadCustomElementsCancel.match(a) &&
                                a.payload.correlation === initSelectionCorrelation;
                        }),
                    })];
            case 5:
                error = (_a.sent()).error;
                if (error) {
                    throw error.payload.error;
                }
                return [2 /*return*/];
        }
    });
}
//# sourceMappingURL=initSelectionSaga.js.map