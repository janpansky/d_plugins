import { __generator } from "tslib";
import { put, fork, race, take, call, select } from "redux-saga/effects";
import { loadCustomElementsSaga } from "../loadCustomElements/loadCustomElementsSaga";
import { actions } from "../store/slice";
import { getAttributeFilterContext } from "../common/sagas";
import { selectElementsForm } from "../common/selectors";
/**
 * @internal
 */
export function initTotalCountSaga(correlation) {
    var initTotalCountCorrelation, context, elementsForm, _a, success, error;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                initTotalCountCorrelation = "initTotalCount_" + correlation;
                return [4 /*yield*/, call(getAttributeFilterContext)];
            case 1:
                context = _b.sent();
                return [4 /*yield*/, select(selectElementsForm)];
            case 2:
                elementsForm = _b.sent();
                return [4 /*yield*/, fork(loadCustomElementsSaga, actions.loadCustomElementsRequest({
                        options: {
                            limit: 1,
                            includeTotalCountWithoutFilters: true,
                            excludePrimaryLabel: !context.backend.capabilities.supportsElementUris && elementsForm === "values",
                        },
                        correlation: initTotalCountCorrelation,
                    }))];
            case 3:
                _b.sent();
                return [4 /*yield*/, race({
                        success: take(function (a) {
                            return actions.loadCustomElementsSuccess.match(a) &&
                                a.payload.correlation === initTotalCountCorrelation;
                        }),
                        error: take(function (a) {
                            return actions.loadCustomElementsError.match(a) &&
                                a.payload.correlation === initTotalCountCorrelation;
                        }),
                        cancel: take(function (a) {
                            return actions.loadCustomElementsCancel.match(a) &&
                                a.payload.correlation === initTotalCountCorrelation;
                        }),
                    })];
            case 4:
                _a = _b.sent(), success = _a.success, error = _a.error;
                if (!error) return [3 /*break*/, 5];
                throw error.payload.error;
            case 5:
                if (!success) return [3 /*break*/, 7];
                return [4 /*yield*/, put(actions.setElementsTotalCount({
                        totalCount: success.payload.totalCount,
                    }))];
            case 6:
                _b.sent();
                _b.label = 7;
            case 7: return [2 /*return*/];
        }
    });
}
//# sourceMappingURL=initTotalCount.js.map