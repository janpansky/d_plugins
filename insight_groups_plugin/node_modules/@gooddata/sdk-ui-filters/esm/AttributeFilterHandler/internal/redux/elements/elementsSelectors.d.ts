import { IAttributeElement } from "@gooddata/sdk-model";
import { ILoadElementsOptions } from "../../../types";
/**
 * Get the elements specified by the keys.
 *
 * @remarks
 * If an element is not available in elementsMap, it is skipped. This can be the case when using hiddenElements,
 * or when a particular element is no longer accessible on the backend (either because it was removed or hidden
 * by permissions in the current context).
 *
 * @internal
 */
export declare const getElementsByKeys: (keys: string[], elementsMap: Record<string, IAttributeElement>) => IAttributeElement[];
/**
 * @internal
 */
export declare const selectElementKeys: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, string[], (res: import("..").AttributeFilterState) => string[]>;
/**
 * @internal
 */
export declare const selectElementsCache: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, Record<string, IAttributeElement>, (res: import("..").AttributeFilterState) => Record<string, IAttributeElement>>;
/**
 * @internal
 */
export declare const selectElements: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, IAttributeElement[], (res1: string[], res2: Record<string, IAttributeElement>) => IAttributeElement[]>;
/**
 * @internal
 */
export declare const selectElementsTotalCount: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, number, (res: import("..").AttributeFilterState) => number>;
/**
 * @internal
 */
export declare const selectElementsTotalCountWithCurrentSettings: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, number, (res: import("..").AttributeFilterState) => number>;
/**
 * @internal
 */
export declare const selectStaticElements: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, IAttributeElement[], (res: import("..").AttributeFilterState) => IAttributeElement[]>;
/**
 * @internal
 */
export declare const selectSearch: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, string, (res: import("..").AttributeFilterState) => string>;
/**
 * @internal
 */
export declare const selectOrder: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, import("@gooddata/sdk-model").ComparatorDirection, (res: import("..").AttributeFilterState) => import("@gooddata/sdk-model").ComparatorDirection>;
/**
 * @internal
 */
export declare const selectLimit: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, number, (res: import("..").AttributeFilterState) => number>;
/**
 * @internal
 */
export declare const selectOffset: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, number, (res: import("..").AttributeFilterState) => number>;
/**
 * @internal
 */
export declare const selectLimitingAttributeFilters: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, import("@gooddata/sdk-backend-spi").IElementsQueryAttributeFilter[], (res: import("..").AttributeFilterState) => import("@gooddata/sdk-backend-spi").IElementsQueryAttributeFilter[]>;
/**
 * @internal
 */
export declare const selectLimitingMeasures: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, import("@gooddata/sdk-model").IMeasure<import("@gooddata/sdk-model").IMeasureDefinitionType>[], (res: import("..").AttributeFilterState) => import("@gooddata/sdk-model").IMeasure<import("@gooddata/sdk-model").IMeasureDefinitionType>[]>;
/**
 * @internal
 */
export declare const selectLimitingDateFilters: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, import("@gooddata/sdk-model").IRelativeDateFilter[], (res: import("..").AttributeFilterState) => import("@gooddata/sdk-model").IRelativeDateFilter[]>;
/**
 * @internal
 */
export declare const selectLoadElementsOptions: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, ILoadElementsOptions, (res1: number, res2: number, res3: import("@gooddata/sdk-model").ComparatorDirection, res4: string, res5: import("@gooddata/sdk-backend-spi").IElementsQueryAttributeFilter[], res6: import("@gooddata/sdk-model").IMeasure<import("@gooddata/sdk-model").IMeasureDefinitionType>[], res7: import("@gooddata/sdk-model").IRelativeDateFilter[]) => ILoadElementsOptions>;
/**
 * @internal
 */
export declare const selectLastLoadedElementsOptions: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, ILoadElementsOptions, (res: import("..").AttributeFilterState) => ILoadElementsOptions>;
/**
 * @internal
 */
export declare const selectLimitingAttributeFiltersAttributes: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, import("@gooddata/sdk-model").IAttributeMetadataObject[], (res: import("..").AttributeFilterState) => import("@gooddata/sdk-model").IAttributeMetadataObject[]>;
//# sourceMappingURL=elementsSelectors.d.ts.map