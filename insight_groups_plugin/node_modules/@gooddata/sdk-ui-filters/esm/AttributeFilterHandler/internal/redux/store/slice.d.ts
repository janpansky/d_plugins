import { AttributeFilterState } from "./state";
/**
 * @internal
 */
export declare const sliceReducer: import("@reduxjs/toolkit").Reducer<AttributeFilterState, import("@reduxjs/toolkit").AnyAction>;
/**
 * @internal
 */
export declare const actions: import("@reduxjs/toolkit").CaseReducerActions<{
    setElementsTotalCount: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            totalCount: number;
        };
        type: string;
    }>;
    setElementsTotalCountWithCurrentSettings: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            totalCount: number;
        };
        type: string;
    }>;
    setOffset: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            offset: number;
        };
        type: string;
    }>;
    setLimit: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            limit: number;
        };
        type: string;
    }>;
    setSearch: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            search: string;
        };
        type: string;
    }>;
    setOrder: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            order: import("@gooddata/sdk-model").ComparatorDirection;
        };
        type: string;
    }>;
    setLimitingAttributeFilters: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            filters: import("@gooddata/sdk-backend-spi").IElementsQueryAttributeFilter[];
        };
        type: string;
    }>;
    setLimitingMeasures: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            filters: import("@gooddata/sdk-model").IMeasure<import("@gooddata/sdk-model").IMeasureDefinitionType>[];
        };
        type: string;
    }>;
    setLimitingDateFilters: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            filters: import("@gooddata/sdk-model").IRelativeDateFilter[];
        };
        type: string;
    }>;
    setLimitingAttributeFiltersAttributes: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            attributes: import("@gooddata/sdk-model").IAttributeMetadataObject[];
        };
        type: string;
    }>;
    changeSelection: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            selection: string[];
            isInverted?: boolean;
        };
        type: string;
    }>;
    revertSelection: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, import("@reduxjs/toolkit").AnyAction>;
    commitSelection: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, import("@reduxjs/toolkit").AnyAction>;
    invertSelection: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, import("@reduxjs/toolkit").AnyAction>;
    clearSelection: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, import("@reduxjs/toolkit").AnyAction>;
    loadCustomElementsRequest: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            options: import("../../..").ILoadElementsOptions;
            correlation: string;
        };
        type: string;
    }>;
    loadCustomElementsStart: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            correlation: string;
        };
        type: string;
    }>;
    loadCustomElementsSuccess: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: import("../../..").ILoadElementsResult & {
            correlation?: string;
        };
        type: string;
    }>;
    loadCustomElementsError: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            error: import("@gooddata/sdk-ui").GoodDataSdkError;
            correlation: string;
        };
        type: string;
    }>;
    loadCustomElementsCancelRequest: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            correlation: string;
        };
        type: string;
    }>;
    loadCustomElementsCancel: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            correlation: string;
        };
        type: string;
    }>;
    loadNextElementsPageRequest: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            correlation: string;
        };
        type: string;
    }>;
    loadNextElementsPageStart: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            correlation: string;
        };
        type: string;
    }>;
    loadNextElementsPageSuccess: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: import("../../..").ILoadElementsResult & {
            correlation: string;
        };
        type: string;
    }>;
    loadNextElementsPageError: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            error: import("@gooddata/sdk-ui").GoodDataSdkError;
            correlation: string;
        };
        type: string;
    }>;
    loadNextElementsPageCancelRequest: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, import("@reduxjs/toolkit").AnyAction>;
    loadNextElementsPageCancel: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            correlation: string;
        };
        type: string;
    }>;
    loadInitialElementsPageRequest: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            correlation: string;
        };
        type: string;
    }>;
    loadInitialElementsPageStart: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            correlation: string;
        };
        type: string;
    }>;
    loadInitialElementsPageSuccess: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: import("../../..").ILoadElementsResult & {
            correlation: string;
        };
        type: string;
    }>;
    loadInitialElementsPageError: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            error: import("@gooddata/sdk-ui").GoodDataSdkError;
            correlation: string;
        };
        type: string;
    }>;
    loadInitialElementsPageCancelRequest: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, import("@reduxjs/toolkit").AnyAction>;
    loadInitialElementsPageCancel: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            correlation: string;
        };
        type: string;
    }>;
    loadAttributeRequest: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            correlation: string;
        };
        type: string;
    }>;
    loadAttributeStart: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            correlation: string;
        };
        type: string;
    }>;
    loadAttributeSuccess: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            attribute: import("@gooddata/sdk-model").IAttributeMetadataObject;
            correlation: string;
        };
        type: string;
    }>;
    loadAttributeError: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            error: import("@gooddata/sdk-ui").GoodDataSdkError;
            correlation: string;
        };
        type: string;
    }>;
    loadAttributeCancelRequest: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, import("@reduxjs/toolkit").AnyAction>;
    loadAttributeCancel: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            correlation: string;
        };
        type: string;
    }>;
    init: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            correlation: string;
        };
        type: string;
    }>;
    initStart: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            correlation: string;
        };
        type: string;
    }>;
    initSuccess: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            correlation: string;
        };
        type: string;
    }>;
    initError: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            error: import("@gooddata/sdk-ui").GoodDataSdkError;
            correlation: string;
        };
        type: string;
    }>;
    initCancel: import("@reduxjs/toolkit").CaseReducer<AttributeFilterState, {
        payload: {
            correlation: string;
        };
        type: string;
    }>;
}>;
//# sourceMappingURL=slice.d.ts.map