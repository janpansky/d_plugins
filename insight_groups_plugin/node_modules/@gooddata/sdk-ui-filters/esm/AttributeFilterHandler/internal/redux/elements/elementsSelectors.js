import { createSelector } from "@reduxjs/toolkit";
import compact from "lodash/compact";
import { selectState } from "../common/selectors";
/**
 * Get the elements specified by the keys.
 *
 * @remarks
 * If an element is not available in elementsMap, it is skipped. This can be the case when using hiddenElements,
 * or when a particular element is no longer accessible on the backend (either because it was removed or hidden
 * by permissions in the current context).
 *
 * @internal
 */
export var getElementsByKeys = function (keys, elementsMap) {
    return compact(keys.map(function (key) { return elementsMap[key]; }));
};
/**
 * @internal
 */
export var selectElementKeys = createSelector(selectState, function (state) { var _a; return (_a = state.elements.data) !== null && _a !== void 0 ? _a : []; });
/**
 * @internal
 */
export var selectElementsCache = createSelector(selectState, function (state) { return state.elements.cache; });
/**
 * @internal
 */
export var selectElements = createSelector(selectElementKeys, selectElementsCache, getElementsByKeys);
/**
 * @internal
 */
export var selectElementsTotalCount = createSelector(selectState, function (state) { return state.elements.totalCount; });
/**
 * @internal
 */
export var selectElementsTotalCountWithCurrentSettings = createSelector(selectState, function (state) { return state.elements.totalCountWithCurrentSettings; });
/**
 * @internal
 */
export var selectStaticElements = createSelector(selectState, function (state) { var _a; return (_a = state.config.staticElements) !== null && _a !== void 0 ? _a : []; });
/**
 * @internal
 */
export var selectSearch = createSelector(selectState, function (state) { return state.elements.currentOptions.search; });
/**
 * @internal
 */
export var selectOrder = createSelector(selectState, function (state) { return state.elements.currentOptions.order; });
/**
 * @internal
 */
export var selectLimit = createSelector(selectState, function (state) { return state.elements.currentOptions.limit; });
/**
 * @internal
 */
export var selectOffset = createSelector(selectState, function (state) { var _a, _b, _c; return (_c = (_b = (_a = state.elements) === null || _a === void 0 ? void 0 : _a.lastLoadedOptions) === null || _b === void 0 ? void 0 : _b.offset) !== null && _c !== void 0 ? _c : state.elements.currentOptions.offset; });
/**
 * @internal
 */
export var selectLimitingAttributeFilters = createSelector(selectState, function (state) { return state.elements.currentOptions.limitingAttributeFilters; });
/**
 * @internal
 */
export var selectLimitingMeasures = createSelector(selectState, function (state) { return state.elements.currentOptions.limitingMeasures; });
/**
 * @internal
 */
export var selectLimitingDateFilters = createSelector(selectState, function (state) { return state.elements.currentOptions.limitingDateFilters; });
/**
 * @internal
 */
export var selectLoadElementsOptions = createSelector(selectOffset, selectLimit, selectOrder, selectSearch, selectLimitingAttributeFilters, selectLimitingMeasures, selectLimitingDateFilters, function (offset, limit, order, search, limitingAttributeFilters, limitingMeasures, limitingDateFilters) {
    return {
        limit: limit,
        limitingAttributeFilters: limitingAttributeFilters,
        limitingDateFilters: limitingDateFilters,
        limitingMeasures: limitingMeasures,
        offset: offset,
        order: order,
        search: search,
    };
});
/**
 * @internal
 */
export var selectLastLoadedElementsOptions = createSelector(selectState, function (state) {
    return state.elements.lastLoadedOptions;
});
/**
 * @internal
 */
export var selectLimitingAttributeFiltersAttributes = createSelector(selectState, function (state) { return state.elements.limitingAttributeFiltersAttributes; });
//# sourceMappingURL=elementsSelectors.js.map