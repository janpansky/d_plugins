import { __generator } from "tslib";
import { put, call, select, takeLatest, cancelled } from "redux-saga/effects";
import { actions } from "../store/slice";
import { getAttributeFilterContext } from "../common/sagas";
import { selectAttributeFilterDisplayForm } from "../filter/filterSelectors";
import { loadAttributeByDisplayForm } from "./loadAttributeByDisplayForm";
/**
 * @internal
 */
export function loadAttributeWorker() {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, takeLatest([actions.loadAttributeRequest.match, actions.loadAttributeCancelRequest.match], loadAttributeSaga)];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}
/*
 * @internal
 */
export function loadAttributeSaga(action) {
    var correlation, displayFormRef, context, attribute, error_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (actions.loadAttributeCancelRequest.match(action)) {
                    // Saga was triggered by cancel request - do nothing, just jump to finally statement
                    return [2 /*return*/];
                }
                correlation = action.payload.correlation;
                _a.label = 1;
            case 1:
                _a.trys.push([1, 7, 9, 13]);
                return [4 /*yield*/, select(selectAttributeFilterDisplayForm)];
            case 2:
                displayFormRef = _a.sent();
                return [4 /*yield*/, call(getAttributeFilterContext)];
            case 3:
                context = _a.sent();
                return [4 /*yield*/, put(actions.loadAttributeStart({ correlation: correlation }))];
            case 4:
                _a.sent();
                return [4 /*yield*/, call(loadAttributeByDisplayForm, context, displayFormRef)];
            case 5:
                attribute = _a.sent();
                return [4 /*yield*/, put(actions.loadAttributeSuccess({ attribute: attribute, correlation: correlation }))];
            case 6:
                _a.sent();
                return [2 /*return*/, attribute];
            case 7:
                error_1 = _a.sent();
                return [4 /*yield*/, put(actions.loadAttributeError({ error: error_1, correlation: correlation }))];
            case 8:
                _a.sent();
                return [3 /*break*/, 13];
            case 9: return [4 /*yield*/, cancelled()];
            case 10:
                if (!_a.sent()) return [3 /*break*/, 12];
                return [4 /*yield*/, put(actions.loadAttributeCancel({ correlation: correlation }))];
            case 11:
                _a.sent();
                _a.label = 12;
            case 12: return [7 /*endfinally*/];
            case 13: return [2 /*return*/];
        }
    });
}
//# sourceMappingURL=loadAttributeSaga.js.map