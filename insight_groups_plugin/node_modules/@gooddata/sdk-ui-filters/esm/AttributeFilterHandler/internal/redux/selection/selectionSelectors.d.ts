import { InvertableAttributeElementSelection } from "../../../types";
/**
 * @internal
 */
export declare const selectWorkingSelection: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, string[], (res: import("..").AttributeFilterState) => string[]>;
/**
 * @internal
 */
export declare const selectIsWorkingSelectionInverted: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, boolean, (res: import("..").AttributeFilterState) => boolean>;
/**
 * @internal
 */
export declare const selectCommittedSelection: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, string[], (res: import("..").AttributeFilterState) => string[]>;
/**
 * @internal
 */
export declare const selectIsCommittedSelectionInverted: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, boolean, (res: import("..").AttributeFilterState) => boolean>;
/**
 * @internal
 */
export declare const selectInvertableWorkingSelection: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, InvertableAttributeElementSelection, (res1: string[], res2: boolean) => InvertableAttributeElementSelection>;
/**
 * @internal
 */
export declare const selectInvertableCommittedSelection: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, InvertableAttributeElementSelection, (res1: string[], res2: boolean) => InvertableAttributeElementSelection>;
/**
 * @internal
 */
export declare const selectIsWorkingSelectionChanged: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, boolean, (res1: boolean, res2: string[], res3: boolean, res4: string[]) => boolean>;
/**
 * @internal
 */
export declare const selectIsWorkingSelectionEmpty: import("@reduxjs/toolkit").OutputSelector<import("..").AttributeFilterState, boolean, (res: any) => boolean>;
//# sourceMappingURL=selectionSelectors.d.ts.map