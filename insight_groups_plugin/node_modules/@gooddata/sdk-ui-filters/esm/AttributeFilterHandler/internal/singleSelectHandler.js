import { __assign, __extends } from "tslib";
// (C) 2022 GoodData Corporation
import { filterObjRef, newNegativeAttributeFilter, newPositiveAttributeFilter, filterAttributeElements, isAttributeElementsByRef, isPositiveAttributeFilter, } from "@gooddata/sdk-model";
import { AttributeFilterLoader } from "./loader";
/**
 * @internal
 */
var SingleSelectAttributeFilterHandler = /** @class */ (function (_super) {
    __extends(SingleSelectAttributeFilterHandler, _super);
    function SingleSelectAttributeFilterHandler(config) {
        var _this = _super.call(this, SingleSelectAttributeFilterHandler.sanitizeConfig(config)) || this;
        // manipulators
        _this.changeSelection = function (selection) {
            _this.bridge.changeSingleSelection(selection);
        };
        _this.revertSelection = function () {
            _this.bridge.revertSingleSelection();
        };
        _this.commitSelection = function () {
            _this.bridge.commitSingleSelection();
        };
        // selectors
        _this.getWorkingSelection = function () {
            return _this.bridge.getWorkingSingleSelection();
        };
        _this.isWorkingSelectionEmpty = function () {
            return _this.bridge.getIsWorkingSelectionEmpty();
        };
        _this.isWorkingSelectionChanged = function () {
            return _this.bridge.getIsWorkingSelectionChanged();
        };
        _this.getCommittedSelection = function () {
            return _this.bridge.getCommittedSingleSelection();
        };
        // callbacks
        _this.onSelectionChanged = function (cb) {
            return _this.bridge.onSingleSelectionChanged(cb);
        };
        _this.onSelectionCommitted = function (cb) {
            return _this.bridge.onSingleSelectionCommitted(cb);
        };
        return _this;
    }
    SingleSelectAttributeFilterHandler.sanitizeConfig = function (config) {
        var elements = filterAttributeElements(config.attributeFilter);
        var keys = isAttributeElementsByRef(elements) ? elements.uris : elements.values;
        var firstItem = keys[0];
        var sanitizedItems = isAttributeElementsByRef(elements)
            ? { uris: [firstItem] }
            : { values: [firstItem] };
        return __assign(__assign({}, config), { attributeFilter: isPositiveAttributeFilter(config.attributeFilter)
                ? newPositiveAttributeFilter(filterObjRef(config.attributeFilter), sanitizedItems)
                : newNegativeAttributeFilter(filterObjRef(config.attributeFilter), sanitizedItems) });
    };
    return SingleSelectAttributeFilterHandler;
}(AttributeFilterLoader));
export { SingleSelectAttributeFilterHandler };
//# sourceMappingURL=singleSelectHandler.js.map