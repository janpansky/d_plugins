// (C) 2022 GoodData Corporation
import { v4 as uuid } from "uuid";
import invariant from "ts-invariant";
import { AttributeFilterReduxBridge } from "./bridge";
/**
 * @internal
 */
var AttributeFilterLoader = /** @class */ (function () {
    function AttributeFilterLoader(config) {
        var _this = this;
        this.validateStaticElementsLoad = function () {
            var _a, _b, _c, _d, _e, _f;
            invariant(!(((_a = _this.config.staticElements) === null || _a === void 0 ? void 0 : _a.length) && ((_b = _this.getLimitingAttributeFilters()) === null || _b === void 0 ? void 0 : _b.length)), "Using limitingAttributeFilters is not supported when using static attribute elements");
            invariant(!(((_c = _this.config.staticElements) === null || _c === void 0 ? void 0 : _c.length) && ((_d = _this.getLimitingDateFilters()) === null || _d === void 0 ? void 0 : _d.length)), "Using limitingDateFilters is not supported when using static attribute elements");
            invariant(!(((_e = _this.config.staticElements) === null || _e === void 0 ? void 0 : _e.length) && ((_f = _this.getLimitingMeasures()) === null || _f === void 0 ? void 0 : _f.length)), "Using limitingMeasures is not supported when using static attribute elements");
        };
        //
        // Init
        //
        this.init = function (correlation) {
            if (correlation === void 0) { correlation = uuid(); }
            _this.validateStaticElementsLoad();
            _this.bridge.init(correlation);
        };
        this.onInitStart = function (cb) {
            return _this.bridge.onInitStart(cb);
        };
        this.onInitSuccess = function (cb) {
            return _this.bridge.onInitSuccess(cb);
        };
        this.onInitError = function (cb) {
            return _this.bridge.onInitError(cb);
        };
        this.onInitCancel = function (cb) {
            return _this.bridge.onInitCancel(cb);
        };
        this.getInitStatus = function () {
            return _this.bridge.getInitStatus();
        };
        this.getInitError = function () {
            return _this.bridge.getInitError();
        };
        //
        // Attribute
        //
        this.loadAttribute = function (correlation) {
            if (correlation === void 0) { correlation = uuid(); }
            _this.bridge.loadAttribute(correlation);
        };
        this.cancelAttributeLoad = function () {
            _this.bridge.cancelAttributeLoad();
        };
        this.getAttribute = function () {
            return _this.bridge.getAttribute();
        };
        this.getAttributeError = function () {
            return _this.bridge.getAttributeError();
        };
        this.getAttributeStatus = function () {
            return _this.bridge.getAttributeStatus();
        };
        this.onLoadAttributeStart = function (cb) {
            return _this.bridge.onLoadAttributeStart(cb);
        };
        this.onLoadAttributeSuccess = function (cb) {
            return _this.bridge.onLoadAttributeSuccess(cb);
        };
        this.onLoadAttributeError = function (cb) {
            return _this.bridge.onLoadAttributeError(cb);
        };
        this.onLoadAttributeCancel = function (cb) {
            return _this.bridge.onLoadAttributeCancel(cb);
        };
        // Initial elements page
        this.loadInitialElementsPage = function (correlation) {
            if (correlation === void 0) { correlation = uuid(); }
            invariant(_this.bridge.getInitStatus() === "success", "Cannot call loadInitialElementsPage() before successful initialization.");
            _this.validateStaticElementsLoad();
            _this.bridge.loadInitialElementsPage(correlation);
        };
        this.getInitialElementsPageStatus = function () {
            return _this.bridge.getInitialElementsPageStatus();
        };
        this.getInitialElementsPageError = function () {
            return _this.bridge.getInitialElementsPageError();
        };
        this.onLoadInitialElementsPageStart = function (cb) {
            return _this.bridge.onLoadInitialElementsPageStart(cb);
        };
        this.onLoadInitialElementsPageSuccess = function (cb) {
            return _this.bridge.onLoadInitialElementsPageSuccess(cb);
        };
        this.onLoadInitialElementsPageError = function (cb) {
            return _this.bridge.onLoadInitialElementsPageError(cb);
        };
        this.onLoadInitialElementsPageCancel = function (cb) {
            return _this.bridge.onLoadInitialElementsPageCancel(cb);
        };
        //
        // Next elements page
        //
        this.loadNextElementsPage = function (correlation) {
            if (correlation === void 0) { correlation = uuid(); }
            invariant(_this.bridge.getInitStatus() === "success", "Cannot call loadNextElementsPage() before successful initialization.");
            invariant(_this.bridge.getInitialElementsPageStatus() === "success", "Cannot call loadNextElementsPage() before loadInitialElementsPage() completes.");
            invariant(!_this.bridge.isLoadElementsOptionsChanged(), "Cannot call loadNextElementsPage() when load element options were changed. When options are changed, you should call loadInitialElementsPage() first.");
            _this.bridge.loadNextElementsPage(correlation);
        };
        this.getNextElementsPageStatus = function () {
            return _this.bridge.getNextElementsPageStatus();
        };
        this.getNextElementsPageError = function () {
            return _this.bridge.getNextElementsPageError();
        };
        this.onLoadNextElementsPageStart = function (cb) {
            return _this.bridge.onLoadNextElementsPageStart(cb);
        };
        this.onLoadNextElementsPageSuccess = function (cb) {
            return _this.bridge.onLoadNextElementsPageSuccess(cb);
        };
        this.onLoadNextElementsPageError = function (cb) {
            return _this.bridge.onLoadNextElementsPageError(cb);
        };
        this.onLoadNextElementsPageCancel = function (cb) {
            return _this.bridge.onLoadNextElementsPageCancel(cb);
        };
        //
        // Custom elements
        //
        this.loadCustomElements = function (options, correlation) {
            _this.bridge.loadCustomElements(options, correlation);
        };
        this.onLoadCustomElementsStart = function (cb) {
            return _this.bridge.onLoadCustomElementsStart(cb);
        };
        this.onLoadCustomElementsSuccess = function (cb) {
            return _this.bridge.onLoadCustomElementsSuccess(cb);
        };
        this.onLoadCustomElementsError = function (cb) {
            return _this.bridge.onLoadCustomElementsError(cb);
        };
        this.onLoadCustomElementsCancel = function (cb) {
            return _this.bridge.onLoadCustomElementsCancel(cb);
        };
        // Elements options
        this.getOffset = function () {
            return _this.bridge.getOffset();
        };
        this.setSearch = function (search) {
            _this.bridge.setSearch(search);
        };
        this.getSearch = function () {
            return _this.bridge.getSearch();
        };
        this.setLimit = function (limit) {
            _this.bridge.setLimit(limit);
        };
        this.getLimit = function () {
            return _this.bridge.getLimit();
        };
        this.setOrder = function (order) {
            _this.bridge.setOrder(order);
        };
        this.getOrder = function () {
            return _this.bridge.getOrder();
        };
        this.setLimitingMeasures = function (measures) {
            _this.bridge.setLimitingMeasures(measures);
        };
        this.getLimitingMeasures = function () {
            return _this.bridge.getLimitingMeasures();
        };
        this.setLimitingAttributeFilters = function (filters) {
            _this.bridge.setLimitingAttributeFilters(filters);
        };
        this.getLimitingAttributeFilters = function () {
            return _this.bridge.getLimitingAttributeFilters();
        };
        this.setLimitingDateFilters = function (filters) {
            _this.bridge.setLimitingDateFilters(filters);
        };
        this.getLimitingDateFilters = function () {
            return _this.bridge.getLimitingDateFilters();
        };
        this.getAllElements = function () {
            return _this.bridge.getAllElements();
        };
        this.getElementsByKey = function (keys) {
            return _this.bridge.getElementsByKey(keys);
        };
        this.getTotalElementsCount = function () {
            return _this.bridge.getTotalCount();
        };
        this.getTotalElementsCountWithCurrentSettings = function () {
            return _this.bridge.getTotalCountWithCurrentSettings();
        };
        this.getLimitingAttributeFiltersAttributes = function () {
            return _this.bridge.getLimitingAttributeFiltersAttributes();
        };
        this.getFilter = function () {
            return _this.bridge.getFilter();
        };
        this.onUpdate = function (cb) {
            return _this.bridge.onUpdate(cb);
        };
        this.config = config;
        this.bridge = new AttributeFilterReduxBridge(config);
    }
    AttributeFilterLoader.prototype.cancelInitialElementsPageLoad = function () {
        this.bridge.cancelInitialElementsPageLoad();
    };
    AttributeFilterLoader.prototype.cancelNextElementsPageLoad = function () {
        this.bridge.cancelNextElementsPageLoad();
    };
    AttributeFilterLoader.prototype.cancelCustomElementsLoad = function (correlation) {
        this.bridge.cancelCustomElementsLoad(correlation);
    };
    return AttributeFilterLoader;
}());
export { AttributeFilterLoader };
//# sourceMappingURL=loader.js.map