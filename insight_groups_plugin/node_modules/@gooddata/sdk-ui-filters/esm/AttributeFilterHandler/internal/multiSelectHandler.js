import { __extends } from "tslib";
import { AttributeFilterLoader } from "./loader";
/**
 * @internal
 */
var MultiSelectAttributeFilterHandler = /** @class */ (function (_super) {
    __extends(MultiSelectAttributeFilterHandler, _super);
    function MultiSelectAttributeFilterHandler(config) {
        var _this = _super.call(this, config) || this;
        // manipulators
        _this.changeSelection = function (selection) {
            _this.bridge.changeMultiSelection(selection);
        };
        _this.revertSelection = function () {
            _this.bridge.revertMultiSelection();
        };
        _this.commitSelection = function () {
            _this.bridge.commitMultiSelection();
        };
        _this.invertSelection = function () {
            _this.bridge.invertMultiSelection();
        };
        _this.clearSelection = function () {
            _this.bridge.clearMultiSelection();
        };
        // selectors
        _this.getWorkingSelection = function () {
            return _this.bridge.getWorkingMultiSelection();
        };
        _this.isWorkingSelectionEmpty = function () {
            return _this.bridge.getIsWorkingSelectionEmpty();
        };
        _this.isWorkingSelectionChanged = function () {
            return _this.bridge.getIsWorkingSelectionChanged();
        };
        _this.getCommittedSelection = function () {
            return _this.bridge.getCommittedMultiSelection();
        };
        // callbacks
        _this.onSelectionChanged = function (cb) {
            return _this.bridge.onMultiSelectionChanged(cb);
        };
        _this.onSelectionCommitted = function (cb) {
            return _this.bridge.onMultiSelectionCommitted(cb);
        };
        return _this;
    }
    return MultiSelectAttributeFilterHandler;
}(AttributeFilterLoader));
export { MultiSelectAttributeFilterHandler };
//# sourceMappingURL=multiSelectHandler.js.map