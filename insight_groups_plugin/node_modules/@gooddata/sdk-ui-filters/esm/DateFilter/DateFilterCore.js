import { __assign, __rest } from "tslib";
// (C) 2007-2022 GoodData Corporation
import React, { useMemo } from "react";
import flow from "lodash/flow";
import noop from "lodash/noop";
import { Dropdown } from "@gooddata/sdk-ui-kit";
import MediaQuery from "react-responsive";
import { IntlWrapper } from "@gooddata/sdk-ui";
import { MediaQueries } from "../constants";
import { DateFilterButtonLocalized } from "./DateFilterButtonLocalized/DateFilterButtonLocalized";
import { DateFilterBody } from "./DateFilterBody/DateFilterBody";
import { applyExcludeCurrentPeriod } from "./utils/PeriodExclusion";
import { DEFAULT_DATE_FORMAT, TIME_FORMAT_WITH_SEPARATOR } from "./constants/Platform";
import { filterVisibleDateFilterOptions, sanitizePresetIntervals } from "./utils/OptionUtils";
import format from "date-fns/format";
export var verifyDateFormat = function (dateFormat) {
    try {
        // Try to format the current date to verify if dateFormat is a valid format.
        format(new Date(), dateFormat);
        return dateFormat;
    }
    catch (_a) {
        // If an error occurs, then dateFormat is invalid and the default format should be used instead. Also, a warning is written in the console.
        console.warn("Unsupported date format " + dateFormat + ", the default format " + DEFAULT_DATE_FORMAT + " is used instead.");
        return DEFAULT_DATE_FORMAT;
    }
};
var adjustDateFormatForDisplay = function (dateFormat, isTimeForAbsoluteRangeEnabled) {
    if (isTimeForAbsoluteRangeEnabled === void 0) { isTimeForAbsoluteRangeEnabled = false; }
    return isTimeForAbsoluteRangeEnabled ? dateFormat + TIME_FORMAT_WITH_SEPARATOR : dateFormat;
};
export var DateFilterCore = function (_a) {
    var originalSelectedFilterOption = _a.originalSelectedFilterOption, originalExcludeCurrentPeriod = _a.originalExcludeCurrentPeriod, onDropdownOpenChanged = _a.onDropdownOpenChanged, customFilterName = _a.customFilterName, dateFormat = _a.dateFormat, disabled = _a.disabled, locale = _a.locale, filterOptions = _a.filterOptions, isTimeForAbsoluteRangeEnabled = _a.isTimeForAbsoluteRangeEnabled, dropdownBodyProps = __rest(_a, ["originalSelectedFilterOption", "originalExcludeCurrentPeriod", "onDropdownOpenChanged", "customFilterName", "dateFormat", "disabled", "locale", "filterOptions", "isTimeForAbsoluteRangeEnabled"]);
    var verifiedDateFormat = verifyDateFormat(dateFormat);
    var filteredFilterOptions = useMemo(function () {
        return flow(filterVisibleDateFilterOptions, sanitizePresetIntervals)(filterOptions);
    }, [filterOptions]);
    return (React.createElement(IntlWrapper, { locale: locale || "en-US" },
        React.createElement(MediaQuery, { query: MediaQueries.IS_MOBILE_DEVICE }, function (isMobile) {
            var dateFilterButton = function (isOpen) {
                if (isOpen === void 0) { isOpen = false; }
                return (React.createElement(DateFilterButtonLocalized, { disabled: disabled, isMobile: isMobile, isOpen: isOpen, dateFilterOption: applyExcludeCurrentPeriod(originalSelectedFilterOption, originalExcludeCurrentPeriod), dateFormat: adjustDateFormatForDisplay(verifiedDateFormat, isTimeForAbsoluteRangeEnabled), customFilterName: customFilterName }));
            };
            return (React.createElement(Dropdown, { closeOnParentScroll: true, closeOnMouseDrag: true, closeOnOutsideClick: true, enableEventPropagation: true, alignPoints: [
                    { align: "bl tl" },
                    { align: "tr tl" },
                    { align: "br tr", offset: { x: -11 } },
                    { align: "tr tl", offset: { x: 0, y: -100 } },
                    { align: "tr tl", offset: { x: 0, y: -50 } },
                ], onOpenStateChanged: onDropdownOpenChanged, renderButton: function (_a) {
                    var isOpen = _a.isOpen, toggleDropdown = _a.toggleDropdown;
                    return (React.createElement("span", { onClick: disabled ? noop : toggleDropdown }, dateFilterButton(isOpen)));
                }, ignoreClicksOnByClass: [
                    ".s-do-not-close-dropdown-on-click",
                    ".rdp-day",
                ], renderBody: function (_a) {
                    var closeDropdown = _a.closeDropdown;
                    return (
                    // Dropdown component uses React.Children.map and adds special props to this component
                    // https://stackoverflow.com/questions/32370994/how-to-pass-props-to-this-props-children
                    React.createElement(DateFilterBody, __assign({}, dropdownBodyProps, { filterOptions: filteredFilterOptions, isMobile: isMobile, closeDropdown: closeDropdown, dateFilterButton: dateFilterButton(), dateFormat: verifiedDateFormat, isTimeForAbsoluteRangeEnabled: isTimeForAbsoluteRangeEnabled })));
                } }));
        })));
};
//# sourceMappingURL=DateFilterCore.js.map