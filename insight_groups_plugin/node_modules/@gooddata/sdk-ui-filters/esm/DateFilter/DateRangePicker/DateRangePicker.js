import { __assign, __extends } from "tslib";
// (C) 2007-2022 GoodData Corporation
import React from "react";
import cx from "classnames";
import { DayPicker, } from "react-day-picker";
import { enUS, de, es, fr, ja, nl, pt, ptBR, zhCN, ru } from "date-fns/locale";
import { injectIntl } from "react-intl";
import { mergeDayPickerProps } from "./utils";
import { DateRangePickerError } from "./DateRangePickerError";
import { DateTimePickerWithInt } from "./DateTimePicker";
import { DAY_END_TIME } from "../constants/Platform";
var convertedLocales = {
    "en-US": enUS,
    "de-DE": de,
    "es-ES": es,
    "fr-FR": fr,
    "ja-JP": ja,
    "nl-NL": nl,
    "pt-BR": ptBR,
    "pt-PT": pt,
    "zh-Hans": zhCN,
    "ru-RU": ru,
};
function convertLocale(locale) {
    return convertedLocales[locale];
}
var DateRangePickerComponent = /** @class */ (function (_super) {
    __extends(DateRangePickerComponent, _super);
    function DateRangePickerComponent(props) {
        var _this = _super.call(this, props) || this;
        _this.dateRangePickerInputFrom = React.createRef();
        _this.dateRangePickerInputTo = React.createRef();
        _this.dateRangePickerContainer = React.createRef();
        _this.handleRangeSelect = function (_range, selectedDate) {
            var calculatedFrom;
            var calculatedTo;
            // it is better to use selectedDate property as _range is not working correctly in corner cases
            if (_this.state.selectedInput == "from") {
                calculatedFrom = _this.setTimeForDate(selectedDate, _this.state.inputFromValue);
                calculatedTo = _this.state.inputToValue;
            }
            else {
                calculatedFrom = _this.state.inputFromValue;
                calculatedTo = _this.setTimeForDate(selectedDate, _this.state.inputToValue);
            }
            _this.setState({
                inputFromValue: calculatedFrom,
                inputToValue: calculatedTo,
                selectedRange: { from: calculatedFrom, to: calculatedTo },
                isOpen: false,
            }, function () {
                _this.updateRange(calculatedFrom, calculatedTo);
            });
        };
        _this.updateRange = function (from, to) {
            _this.props.onRangeChange({ from: from, to: to });
        };
        _this.handleFromDayClick = function () {
            _this.setState({
                selectedInput: "from",
                isOpen: true,
                monthDate: _this.props.range.from,
            });
        };
        _this.handleToDayClick = function () {
            _this.setState({
                selectedInput: "to",
                isOpen: true,
                monthDate: _this.props.range.to,
            });
        };
        _this.handleFromChange = function (date) {
            if (date) {
                _this.setState({ inputFromValue: date });
            }
            _this.setState({
                selectedRange: { from: date, to: _this.state.selectedRange.to },
                monthDate: date,
            }, function () {
                _this.updateRange(date, _this.state.selectedRange.to);
            });
        };
        _this.handleToChange = function (date) {
            if (date) {
                _this.setState({ inputToValue: date });
            }
            _this.setState({
                selectedRange: { from: _this.state.selectedRange.from, to: date },
                monthDate: date,
            }, function () {
                _this.updateRange(_this.state.selectedRange.from, date);
            });
        };
        _this.state = {
            isOpen: false,
            inputFromValue: _this.props.range.from,
            inputToValue: _this.props.range.to,
            selectedRange: { from: _this.props.range.from, to: _this.props.range.to },
            monthDate: null,
            selectedInput: null,
        };
        _this.handleMonthChanged = _this.handleMonthChanged.bind(_this);
        _this.handleClickOutside = _this.handleClickOutside.bind(_this);
        _this.handleMonthChanged = _this.handleMonthChanged.bind(_this);
        _this.handleRangeSelect = _this.handleRangeSelect.bind(_this);
        _this.handleFromDayClick = _this.handleFromDayClick.bind(_this);
        _this.handleToDayClick = _this.handleToDayClick.bind(_this);
        _this.handleFromChange = _this.handleFromChange.bind(_this);
        _this.handleToChange = _this.handleToChange.bind(_this);
        _this.onKeyDown = _this.onKeyDown.bind(_this);
        return _this;
    }
    DateRangePickerComponent.prototype.componentDidMount = function () {
        document.addEventListener("mousedown", this.handleClickOutside);
    };
    DateRangePickerComponent.prototype.componentWillUnmount = function () {
        document.removeEventListener("mousedown", this.handleClickOutside);
    };
    DateRangePickerComponent.prototype.render = function () {
        var _a = this.props, dateFormat = _a.dateFormat, _b = _a.range, from = _b.from, to = _b.to, dayPickerProps = _a.dayPickerProps, intl = _a.intl, isMobile = _a.isMobile, _c = _a.errors, _d = _c === void 0 ? { from: undefined, to: undefined } : _c, errorFrom = _d.from, errorTo = _d.to, isTimeEnabled = _a.isTimeEnabled;
        var defaultDayPickerProps = {
            mode: "range",
            showOutsideDays: true,
            modifiers: { start: from, end: to },
            selected: { from: from, to: to },
            locale: convertLocale(intl.locale),
        };
        var dayPickerPropsWithDefaults = mergeDayPickerProps(defaultDayPickerProps, dayPickerProps);
        var classNameProps = {
            root: "gd-date-range-picker-picker s-date-range-calendar-" + this.state.selectedInput,
        };
        var DatePicker = (React.createElement("div", { className: "gd-date-range-picker-wrapper", ref: this.dateRangePickerContainer },
            React.createElement(DayPicker, __assign({}, dayPickerPropsWithDefaults, { onSelect: this.handleRangeSelect, selected: this.state.selectedRange, month: this.state.monthDate, classNames: classNameProps, onMonthChange: this.handleMonthChanged }))));
        var FromField = (React.createElement(DateTimePickerWithInt, { onKeyDown: this.onKeyDown, ref: this.dateRangePickerInputFrom, placeholderDate: intl.formatMessage({ id: "filters.from" }), onChange: this.handleFromChange, value: this.state.inputFromValue, dateFormat: dateFormat, isMobile: isMobile, handleDayClick: this.handleFromDayClick, isTimeEnabled: isTimeEnabled, className: cx("s-date-range-picker-from", "gd-date-range-picker-from"), error: typeof errorFrom !== "undefined" }));
        var ToField = (React.createElement(DateTimePickerWithInt, { onKeyDown: this.onKeyDown, ref: this.dateRangePickerInputTo, placeholderDate: intl.formatMessage({ id: "filters.to" }), onChange: this.handleToChange, value: this.state.inputToValue, dateFormat: dateFormat, isMobile: isMobile, handleDayClick: this.handleToDayClick, isTimeEnabled: isTimeEnabled, className: cx("s-date-range-picker-to", "gd-date-range-picker-to"), defaultTime: DAY_END_TIME, error: typeof errorTo !== "undefined" }));
        var isFromInputDatePickerOpen = this.state.selectedInput === "from" && this.state.isOpen;
        var isToInputDatePickerOpen = this.state.selectedInput === "to" && this.state.isOpen;
        return (React.createElement(React.Fragment, null,
            isTimeEnabled ? (React.createElement("div", { className: "gd-date-range-picker datetime s-date-range-picker" },
                React.createElement("label", null, intl.formatMessage({ id: "filters.from" })),
                FromField,
                isFromInputDatePickerOpen ? DatePicker : null,
                React.createElement("label", null, intl.formatMessage({ id: "filters.to" })),
                ToField,
                isToInputDatePickerOpen ? DatePicker : null)) : (React.createElement(React.Fragment, null,
                React.createElement("div", { className: "gd-date-range-picker gd-flex-row s-date-range-picker" },
                    FromField,
                    React.createElement("span", { className: "gd-date-range-picker-dash" }, "\u2013"),
                    ToField),
                this.state.isOpen ? DatePicker : null)),
            errorFrom || errorTo ? (React.createElement(DateRangePickerError, { dateFormat: dateFormat, errorId: 
                // This means that when both inputs are invalid, error is shown only for "from"
                errorFrom || errorTo })) : null));
    };
    DateRangePickerComponent.prototype.onKeyDown = function (e) {
        if (e.key === "Escape" || e.key === "Tab") {
            this.setState({ isOpen: false });
        }
    };
    DateRangePickerComponent.prototype.handleMonthChanged = function (month) {
        this.setState({ monthDate: month });
    };
    // get new date object composed from the date of the first argument
    // and the time of the date provided as the second argument
    DateRangePickerComponent.prototype.setTimeForDate = function (date, time) {
        var result = new Date(date);
        result.setHours(time.getHours());
        result.setMinutes(time.getMinutes());
        return result;
    };
    DateRangePickerComponent.prototype.handleClickOutside = function (event) {
        if (this.dateRangePickerContainer.current &&
            !this.dateRangePickerContainer.current.contains(event.target) &&
            this.dateRangePickerInputFrom &&
            !this.dateRangePickerInputFrom.current.contains(event.target) &&
            this.dateRangePickerInputTo &&
            !this.dateRangePickerInputTo.current.contains(event.target)) {
            this.setState({ isOpen: false });
        }
    };
    return DateRangePickerComponent;
}(React.Component));
export var DateRangePicker = injectIntl(DateRangePickerComponent);
//# sourceMappingURL=DateRangePicker.js.map