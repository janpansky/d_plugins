// (C) 2022 GoodData Corporation
import { useEffect, useRef, useState, useCallback } from "react";
import isEqual from "lodash/isEqual";
import { usePrevious } from "@gooddata/sdk-ui";
import { filterObjRef } from "@gooddata/sdk-model";
import { newAttributeFilterHandler } from "../../AttributeFilterHandler";
/**
 * Hook for retrieving AttributeFilterHandler {@link IMultiSelectAttributeFilterHandler} Core API for Attribute Filter components.
 * This hook is responsible for initialization of the AttributeFilterHandler.
 * @beta
 */
export var useAttributeFilterHandler = function (props) {
    var backend = props.backend, workspace = props.workspace, filter = props.filter, hiddenElements = props.hiddenElements, staticElements = props.staticElements;
    var _a = useState(0), setInvalidate = _a[1];
    var invalidate = function () {
        setInvalidate(function (s) { return s + 1; });
    };
    var handlerRef = useRef();
    var createNewHandler = useCallback(function () {
        var newHandler = newAttributeFilterHandler(backend.withTelemetry("AttributeFilter", { workspace: workspace, filter: filter, hiddenElements: hiddenElements, staticElements: staticElements }), workspace, filter, {
            selectionMode: "multi",
            hiddenElements: hiddenElements,
            staticElements: staticElements,
        });
        handlerRef.current = newHandler;
    }, [backend, workspace, filter, hiddenElements, staticElements]);
    if (!handlerRef.current) {
        createNewHandler();
    }
    var handler = handlerRef.current;
    var prevProps = usePrevious(props);
    useEffect(function () {
        var unsubscribe = handler.onUpdate(function () {
            invalidate();
        });
        if (backend !== prevProps.backend ||
            workspace !== prevProps.workspace ||
            !isEqual(filterObjRef(filter), filterObjRef(handler.getFilter())) ||
            !isEqual(staticElements, prevProps.staticElements) ||
            !isEqual(hiddenElements, prevProps.hiddenElements)) {
            createNewHandler();
            invalidate();
        }
        return function () {
            unsubscribe();
        };
    }, [backend, workspace, filter, staticElements, hiddenElements, prevProps, handler, createNewHandler]);
    return handler;
};
//# sourceMappingURL=useAttributeFilterHandler.js.map