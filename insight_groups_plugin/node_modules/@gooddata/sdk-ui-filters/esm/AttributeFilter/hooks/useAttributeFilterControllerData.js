// (C) 2022 GoodData Corporation
import { useState, useEffect } from "react";
import { isLimitingAttributeFiltersEmpty } from "../utils";
import { useAttributeFilterHandlerState } from "./useAttributeFilterHandlerState";
import { MAX_SELECTION_SIZE, PARENT_FILTERS_CORRELATION } from "./constants";
import { filterObjRef } from "@gooddata/sdk-model";
/**
 * @internal
 */
export function useAttributeFilterControllerData(handler) {
    var _a;
    var handlerState = useAttributeFilterHandlerState(handler);
    var initStatus = handlerState.initialization.status;
    var initError = handlerState.initialization.error;
    var isInitializing = initStatus === "loading";
    var attribute = handlerState.attribute.data;
    var initialElementsPageStatus = handlerState.elements.initialPageLoad.status;
    var initialElementsPageError = handlerState.elements.initialPageLoad.error;
    var isLoadingInitialElementsPage = initialElementsPageStatus === "loading";
    var nextElementsPageStatus = handlerState.elements.nextPageLoad.status;
    var nextElementsPageError = handlerState.elements.nextPageLoad.error;
    var isLoadingNextElementsPage = nextElementsPageStatus === "loading";
    var elements = handlerState.elements.data;
    var totalElementsCount = handlerState.elements.totalCount;
    var totalElementsCountWithCurrentSettings = handlerState.elements.totalCountWithCurrentSettings;
    var isWorkingSelectionChanged = handlerState.selection.working.isChanged;
    var isWorkingSelectionEmpty = handlerState.selection.working.isEmpty;
    var isWorkingSelectionInverted = handlerState.selection.working.isInverted;
    var workingSelectionElements = handlerState.selection.working.elements;
    var isCommittedSelectionInverted = handlerState.selection.committed.isInverted;
    var committedSelectionElements = handlerState.selection.committed.elements;
    var searchString = handlerState.elements.options.search;
    var limit = handlerState.elements.options.limit;
    var limitingAttributeFilters = handlerState.elements.options.limitingAttributeFilters;
    var hasNextElementsPage = elements.length < totalElementsCountWithCurrentSettings;
    var nextElementsPageSize = hasNextElementsPage
        ? Math.min(limit, totalElementsCountWithCurrentSettings - elements.length)
        : 0;
    var isApplyDisabled = workingSelectionElements.length > MAX_SELECTION_SIZE ||
        !isWorkingSelectionChanged ||
        (!isWorkingSelectionInverted && isWorkingSelectionEmpty);
    var isParentFiltersEmpty = isLimitingAttributeFiltersEmpty(limitingAttributeFilters);
    var isFilteredByParentFilters = initialElementsPageStatus === "success" && !isParentFiltersEmpty;
    var isFiltering = useIsFiltering(handler);
    var parentFilterAttributes = handler.getLimitingAttributeFiltersAttributes();
    var displayForms = (_a = attribute === null || attribute === void 0 ? void 0 : attribute.displayForms) !== null && _a !== void 0 ? _a : [];
    var currentDisplayFormRef = filterObjRef(handlerState.attributeFilter);
    var offset = handlerState.elements.options.offset;
    return {
        attribute: attribute,
        offset: offset,
        limit: limit,
        isFiltering: isFiltering,
        isInitializing: isInitializing,
        initError: initError,
        isLoadingInitialElementsPage: isLoadingInitialElementsPage,
        initialElementsPageError: initialElementsPageError,
        isLoadingNextElementsPage: isLoadingNextElementsPage,
        nextElementsPageError: nextElementsPageError,
        nextElementsPageSize: nextElementsPageSize,
        elements: elements,
        totalElementsCount: totalElementsCount,
        totalElementsCountWithCurrentSettings: totalElementsCountWithCurrentSettings,
        isApplyDisabled: isApplyDisabled,
        isWorkingSelectionInverted: isWorkingSelectionInverted,
        workingSelectionElements: workingSelectionElements,
        isCommittedSelectionInverted: isCommittedSelectionInverted,
        committedSelectionElements: committedSelectionElements,
        searchString: searchString,
        isFilteredByParentFilters: isFilteredByParentFilters,
        parentFilterAttributes: parentFilterAttributes,
        displayForms: displayForms,
        currentDisplayFormRef: currentDisplayFormRef,
    };
}
function useIsFiltering(handler) {
    var _a = useState(false), isFiltering = _a[0], setIsFiltering = _a[1];
    useEffect(function () {
        var callbackUnsubscribeFunctions = [
            handler.onLoadInitialElementsPageStart(handleFilteringStart),
            handler.onLoadInitialElementsPageSuccess(handleFilteringEnd),
            handler.onLoadInitialElementsPageError(handleFilteringEnd),
            handler.onLoadInitialElementsPageCancel(handleFilteringEnd),
            handler.onInitStart(handleFilteringStart),
            handler.onInitSuccess(handleFilteringEnd),
            handler.onInitError(handleFilteringEnd),
            handler.onInitCancel(handleFilteringEnd),
        ];
        function handleFilteringStart(payload) {
            if (payload.correlation === PARENT_FILTERS_CORRELATION) {
                setIsFiltering(true);
            }
        }
        function handleFilteringEnd(payload) {
            if (payload.correlation === PARENT_FILTERS_CORRELATION) {
                setIsFiltering(false);
            }
        }
        return function () {
            callbackUnsubscribeFunctions.forEach(function (unsubscribe) {
                unsubscribe();
            });
        };
    }, [handler]);
    return isFiltering;
}
//# sourceMappingURL=useAttributeFilterControllerData.js.map