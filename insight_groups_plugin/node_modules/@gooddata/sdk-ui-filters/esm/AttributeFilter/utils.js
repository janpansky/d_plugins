// (C) 2022 GoodData Corporation
import { UnexpectedSdkError } from "@gooddata/sdk-ui";
import invariant from "ts-invariant";
import isEmpty from "lodash/isEmpty";
import { attributeElementsIsEmpty, filterAttributeElements, isNegativeAttributeFilter, } from "@gooddata/sdk-model";
/**
 * @internal
 */
export var ThrowMissingComponentError = function (componentName, providerName) { return function () {
    throw new UnexpectedSdkError("Component: " + componentName + " is missing in the " + providerName + ".");
}; };
/**
 * @internal
 */
export var throwMissingCallbackError = function (callbackName, providerName) {
    return function () {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
        throw new UnexpectedSdkError("Callback: " + callbackName + " is missing in the " + providerName + ".");
    };
};
/**
 * @internal
 */
export function isLimitingAttributeFiltersEmpty(limitingAttributeFilters) {
    return (isEmpty(limitingAttributeFilters) ||
        limitingAttributeFilters.every(function (limitingAttributeFilter) {
            return isNegativeAttributeFilter(limitingAttributeFilter.attributeFilter)
                ? attributeElementsIsEmpty(filterAttributeElements(limitingAttributeFilter.attributeFilter))
                : false;
        }));
}
/**
 * @internal
 */
export function getElementTitle(element, intl) {
    return element.formattedTitle || element.title || "(" + intl.formatMessage({ id: "empty_value" }) + ")";
}
/**
 * @internal
 */
export function getElementTitles(elements, intl) {
    return elements.map(function (el) { return getElementTitle(el, intl); }).join(", ");
}
/**
 * @internal
 */
export function getElementKey(element) {
    return element.uri;
}
/**
 * @internal
 */
export function validateAttributeFilterProps(props) {
    var _a, _b;
    var connectToPlaceholder = props.connectToPlaceholder, filter = props.filter, identifier = props.identifier, onApply = props.onApply, parentFilters = props.parentFilters, hiddenElements = props.hiddenElements, staticElements = props.staticElements, backend = props.backend;
    invariant(!(filter && connectToPlaceholder), "It's not possible to combine 'filter' property with 'connectToPlaceholder' property. Either provide a filter, or a placeholer.");
    invariant(!(filter && !onApply), "It's not possible to use 'filter' property without 'onApply' property. Either provide 'onApply' callback or use placeholders.");
    //deprecated identifier check
    invariant(!(filter && identifier), "It's not possible to combine 'identifier' property with 'filter' property. Either provide an identifier, or a filter.");
    invariant(!(identifier && !onApply), "It's not possible to use 'identifier' property without 'onApply' property. Either provide 'onApply' callback or use placeholders.");
    invariant(!(identifier && connectToPlaceholder), "It's not possible to combine 'identifier' property with 'connectToPlaceholder' property. Either provide a idenfifier, or a placeholder.");
    invariant(identifier || filter || connectToPlaceholder, "No identifier, filter or placeholer provided. Provide one of the properties: 'filter', 'connectToPlaceholder' or 'identifier' (note that identifier is deprecated).");
    invariant(!(!((_a = backend === null || backend === void 0 ? void 0 : backend.capabilities) === null || _a === void 0 ? void 0 : _a.supportsElementsQueryParentFiltering) && !isEmpty(parentFilters)), "Parent filtering is not supported by the current backend implementation.");
    invariant(!(!((_b = backend === null || backend === void 0 ? void 0 : backend.capabilities) === null || _b === void 0 ? void 0 : _b.supportsElementsQueryParentFiltering) &&
        !isEmpty(hiddenElements) &&
        isEmpty(staticElements)), "Hidden elements are not supported by the current backend implementation.");
    if (identifier) {
        console.warn("Definition of an attribute display form using 'identifier' is deprecated, use 'filter' property instead. Please see the documentation of [AttributeFilter component](https://sdk.gooddata.com/gooddata-ui/docs/attribute_filter_component.html) for further details.");
    }
}
//# sourceMappingURL=utils.js.map