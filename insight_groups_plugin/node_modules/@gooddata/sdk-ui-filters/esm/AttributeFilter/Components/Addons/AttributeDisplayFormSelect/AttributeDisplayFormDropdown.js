// (C) 2021-2022 GoodData Corporation
import React, { useMemo } from "react";
import { areObjRefsEqual } from "@gooddata/sdk-model";
import { Dropdown, DropdownList } from "@gooddata/sdk-ui-kit";
import { AttributeDisplayFormDropdownButton } from "./AttributeDisplayFormDropdownButton";
import { AttributeDisplayFormSelectItem } from "./AttributeDisplayFormSelectItem";
var ITEM_HEIGHT = 23;
var ALIGN_POINTS = [
    {
        align: "bl tl",
        offset: { x: 0, y: 1 },
    },
    {
        align: "tl bl",
        offset: { x: 0, y: -1 },
    },
];
/**
 * @internal
 */
export var AttributeDisplayFormDropdown = function (props) {
    var displayForms = props.displayForms, selectedDisplayForm = props.selectedDisplayForm, onSelect = props.onSelect, alignPoints = props.alignPoints;
    var buttonTitle = useMemo(function () {
        var _a;
        return (_a = displayForms.find(function (displayForm) { return areObjRefsEqual(displayForm.ref, selectedDisplayForm); })) === null || _a === void 0 ? void 0 : _a.title;
    }, [displayForms, selectedDisplayForm]);
    return (React.createElement(Dropdown, { className: "gd-attribute-display-form-dropdown", alignPoints: alignPoints !== null && alignPoints !== void 0 ? alignPoints : ALIGN_POINTS, closeOnMouseDrag: true, closeOnParentScroll: true, renderButton: function (_a) {
            var isOpen = _a.isOpen, toggleDropdown = _a.toggleDropdown;
            return (React.createElement(AttributeDisplayFormDropdownButton, { text: buttonTitle, isOpened: isOpen, toggleDropdown: toggleDropdown }));
        }, renderBody: function (_a) {
            var closeDropdown = _a.closeDropdown;
            return (React.createElement(DropdownList, { className: "gd-attribute-display-form-dropdown-body s-attribute-display-form-dropdown-body", items: displayForms, itemHeight: ITEM_HEIGHT, renderItem: function (_a) {
                    var item = _a.item;
                    var selected = areObjRefsEqual(item.ref, selectedDisplayForm);
                    var onClick = function (displayForm) {
                        closeDropdown();
                        if (!selected) {
                            onSelect(displayForm);
                        }
                    };
                    return (React.createElement(AttributeDisplayFormSelectItem, { key: item.id, displayForm: item, onClick: onClick, selected: selected }));
                } }));
        } }));
};
//# sourceMappingURL=AttributeDisplayFormDropdown.js.map