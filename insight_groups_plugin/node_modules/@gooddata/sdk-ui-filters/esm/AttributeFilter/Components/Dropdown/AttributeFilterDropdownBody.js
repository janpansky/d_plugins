// (C) 2022 GoodData Corporation
import React, { useMemo } from "react";
import { useMediaQuery } from "@gooddata/sdk-ui-kit";
import { useAttributeFilterComponentsContext } from "../../Context/AttributeFilterComponentsContext";
import { useAttributeFilterContext } from "../../Context/AttributeFilterContext";
import { DEFAULT_DROPDOWN_BODY_WIDTH } from "../../constants";
/**
 * Component showing a list of elements and controls for manipulating the selection.
 *
 * @remarks
 * It uses a component using the {@link IAttributeFilterElementsSelectProps} props for search and manipulation of filter selection
 * and a component using the {@link IAttributeFilterDropdownActionsProps} props to confirm or cancel changes.
 *
 * @beta
 */
export var AttributeFilterDropdownBody = function (props) {
    var onApplyButtonClick = props.onApplyButtonClick, onCancelButtonClick = props.onCancelButtonClick, _a = props.width, width = _a === void 0 ? DEFAULT_DROPDOWN_BODY_WIDTH : _a;
    var _b = useAttributeFilterComponentsContext(), DropdownActionsComponent = _b.DropdownActionsComponent, ElementsSelectComponent = _b.ElementsSelectComponent;
    var isMobile = useMediaQuery("mobileDevice");
    var _c = useAttributeFilterContext(), initialElementsPageError = _c.initialElementsPageError, nextElementsPageError = _c.nextElementsPageError, isApplyDisabled = _c.isApplyDisabled, isWorkingSelectionInverted = _c.isWorkingSelectionInverted, isLoadingInitialElementsPage = _c.isLoadingInitialElementsPage, isLoadingNextElementsPage = _c.isLoadingNextElementsPage, onLoadNextElementsPage = _c.onLoadNextElementsPage, elements = _c.elements, onSearch = _c.onSearch, onSelect = _c.onSelect, nextElementsPageSize = _c.nextElementsPageSize, searchString = _c.searchString, totalElementsCount = _c.totalElementsCount, totalElementsCountWithCurrentSettings = _c.totalElementsCountWithCurrentSettings, workingSelectionElements = _c.workingSelectionElements, parentFilterAttributes = _c.parentFilterAttributes, isFilteredByParentFilters = _c.isFilteredByParentFilters, fullscreenOnMobile = _c.fullscreenOnMobile;
    var parentFilterTitles = useMemo(function () {
        return parentFilterAttributes.map(function (attr) { return attr.title; });
    }, [parentFilterAttributes]);
    var usedWidth = isMobile && fullscreenOnMobile ? "100%" : width;
    var style = { width: usedWidth };
    return (React.createElement("div", { className: "gd-attribute-filter-dropdown-body__next", style: style },
        React.createElement(ElementsSelectComponent, { isInverted: isWorkingSelectionInverted, isLoading: isLoadingInitialElementsPage, isLoadingNextPage: isLoadingNextElementsPage, items: elements, onLoadNextPage: onLoadNextElementsPage, onSearch: onSearch, onSelect: onSelect, nextPageSize: nextElementsPageSize, searchString: searchString, selectedItems: workingSelectionElements, totalItemsCount: totalElementsCount, totalItemsCountWithCurrentSettings: totalElementsCountWithCurrentSettings, parentFilterTitles: parentFilterTitles, isFilteredByParentFilters: isFilteredByParentFilters, error: initialElementsPageError !== null && initialElementsPageError !== void 0 ? initialElementsPageError : nextElementsPageError }),
        React.createElement(DropdownActionsComponent, { onApplyButtonClick: onApplyButtonClick, onCancelButtonClick: onCancelButtonClick, isApplyDisabled: isApplyDisabled })));
};
//# sourceMappingURL=AttributeFilterDropdownBody.js.map