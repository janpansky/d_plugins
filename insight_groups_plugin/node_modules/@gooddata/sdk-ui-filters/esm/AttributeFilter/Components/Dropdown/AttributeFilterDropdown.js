// (C) 2022 GoodData Corporation
import React from "react";
import { Dropdown, useMediaQuery } from "@gooddata/sdk-ui-kit";
import cx from "classnames";
import { useAttributeFilterComponentsContext } from "../../Context/AttributeFilterComponentsContext";
import { useAttributeFilterContext } from "../../Context/AttributeFilterContext";
import { useResolveAttributeFilterSubtitle } from "../../hooks/useResolveAttributeFilterSubtitle";
var ALIGN_POINTS = [
    { align: "bl tl" },
    { align: "tr tl" },
    { align: "br tr", offset: { x: -11 } },
    { align: "tl bl", offset: { x: 0, y: 0 } },
    { align: "tr tl", offset: { x: 0, y: -50 } },
    { align: "tr tl", offset: { x: 0, y: -100 } },
    { align: "tr tl", offset: { x: 0, y: -200 } },
    { align: "tr tl", offset: { x: 0, y: -300 } },
    { align: "tr tl", offset: { x: 0, y: -400 } },
];
/**
 * @internal
 */
export var AttributeFilterDropdown = function () {
    var _a = useAttributeFilterComponentsContext(), DropdownButtonComponent = _a.DropdownButtonComponent, DropdownBodyComponent = _a.DropdownBodyComponent;
    var _b = useAttributeFilterContext(), title = _b.title, isInitializing = _b.isInitializing, initError = _b.initError, isFiltering = _b.isFiltering, committedSelectionElements = _b.committedSelectionElements, onReset = _b.onReset, onApply = _b.onApply, fullscreenOnMobile = _b.fullscreenOnMobile, isCommittedSelectionInverted = _b.isCommittedSelectionInverted;
    var isMobile = useMediaQuery("mobileDevice");
    var subtitle = useResolveAttributeFilterSubtitle(isCommittedSelectionInverted, committedSelectionElements);
    return (React.createElement(Dropdown, { className: "gd-attribute-filter__next", closeOnParentScroll: true, closeOnMouseDrag: true, closeOnOutsideClick: true, enableEventPropagation: true, alignPoints: ALIGN_POINTS, fullscreenOnMobile: fullscreenOnMobile, renderButton: function (_a) {
            var toggleDropdown = _a.toggleDropdown, isOpen = _a.isOpen;
            return (React.createElement("div", { className: cx({ "gd-is-mobile": fullscreenOnMobile && isMobile && isOpen }) },
                React.createElement(DropdownButtonComponent, { title: title, subtitle: subtitle, isFiltering: isFiltering, isLoaded: !isInitializing && !initError, isLoading: isInitializing, isOpen: isOpen, selectedItemsCount: committedSelectionElements.length, onClick: toggleDropdown })));
        }, onOpenStateChanged: function (isOpen) {
            if (!isOpen) {
                onReset();
            }
        }, renderBody: function (_a) {
            var closeDropdown = _a.closeDropdown;
            return (React.createElement("div", { className: cx({ "gd-is-mobile": fullscreenOnMobile && isMobile }), style: { height: fullscreenOnMobile && isMobile ? "100%" : "auto" } },
                React.createElement(DropdownBodyComponent, { onApplyButtonClick: function () {
                        onApply();
                        closeDropdown();
                    }, onCancelButtonClick: closeDropdown })));
        } }));
};
//# sourceMappingURL=AttributeFilterDropdown.js.map