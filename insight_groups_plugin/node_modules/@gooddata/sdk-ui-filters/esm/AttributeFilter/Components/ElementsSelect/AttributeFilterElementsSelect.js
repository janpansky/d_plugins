import { __assign } from "tslib";
// (C) 2019-2022 GoodData Corporation
import React, { useMemo } from "react";
import { useIntl } from "react-intl";
import { InvertableSelect, useMediaQuery } from "@gooddata/sdk-ui-kit";
import { useAttributeFilterComponentsContext } from "../../Context/AttributeFilterComponentsContext";
import { getElementTitle, getElementKey } from "../../utils";
import { usePrevious } from "@gooddata/sdk-ui";
import { useAttributeFilterContext } from "../../Context/AttributeFilterContext";
import { MAX_SELECTION_SIZE } from "../../hooks/constants";
var ITEM_HEIGHT = 28;
var MOBILE_LIST_ITEM_HEIGHT = 40;
var VISIBLE_ITEMS_COUNT = 10;
/**
 * This component allows users to search Attribute Filter elements.
 * It manipulates selection.
 * It displays statues like loading, filtering etc.
 * It allows paging.
 * It displays selection status like number of elements and selected elements labels.
 * It displays messages when elements are filtered out by parent filters or the result of search is empty.
 *
 * @beta
 */
export var AttributeFilterElementsSelect = function (props) {
    var items = props.items, totalItemsCount = props.totalItemsCount, totalItemsCountWithCurrentSettings = props.totalItemsCountWithCurrentSettings, isInverted = props.isInverted, selectedItems = props.selectedItems, onSelect = props.onSelect, searchString = props.searchString, onSearch = props.onSearch, isLoading = props.isLoading, isLoadingNextPage = props.isLoadingNextPage, nextPageSize = props.nextPageSize, onLoadNextPage = props.onLoadNextPage, error = props.error, isFilteredByParentFilters = props.isFilteredByParentFilters, parentFilterTitles = props.parentFilterTitles;
    var intl = useIntl();
    var isMobile = useMediaQuery("mobileDevice");
    var fullscreenOnMobile = useAttributeFilterContext().fullscreenOnMobile;
    var _a = useAttributeFilterComponentsContext(), ElementsSelectLoadingComponent = _a.ElementsSelectLoadingComponent, ElementsSelectItemComponent = _a.ElementsSelectItemComponent, ElementsSelectErrorComponent = _a.ElementsSelectErrorComponent, EmptyResultComponent = _a.EmptyResultComponent, ElementsSearchBarComponent = _a.ElementsSearchBarComponent, ElementsSelectActionsComponent = _a.ElementsSelectActionsComponent, StatusBarComponent = _a.StatusBarComponent;
    var itemHeight = fullscreenOnMobile && isMobile ? MOBILE_LIST_ITEM_HEIGHT : ITEM_HEIGHT;
    var isAdaptiveHeight = isMobile && fullscreenOnMobile;
    var previousItemsCount = usePrevious(totalItemsCountWithCurrentSettings);
    var loadingHeight = useMemo(function () {
        return Math.max((Math.min(previousItemsCount, VISIBLE_ITEMS_COUNT) || 1) * itemHeight, 20) + 32;
    }, [previousItemsCount, itemHeight]);
    return (React.createElement(React.Fragment, null,
        React.createElement(InvertableSelect, { className: "gd-attribute-filter-elements-select__next", adaptiveWidth: true, adaptiveHeight: isAdaptiveHeight, items: items, totalItemsCount: totalItemsCountWithCurrentSettings, itemHeight: itemHeight, getItemKey: getElementKey, getItemTitle: function (item) {
                return getElementTitle(item, intl);
            }, isInverted: isInverted, selectedItems: selectedItems, selectedItemsLimit: MAX_SELECTION_SIZE, onSelect: onSelect, searchString: searchString, onSearch: onSearch, isLoading: isLoading, error: error, isLoadingNextPage: isLoadingNextPage, nextPageItemPlaceholdersCount: nextPageSize, onLoadNextPage: onLoadNextPage, renderItem: function (props) {
                return React.createElement(ElementsSelectItemComponent, __assign({}, props));
            }, renderError: function () {
                return React.createElement(ElementsSelectErrorComponent, { error: error });
            }, renderLoading: function () {
                return React.createElement(ElementsSelectLoadingComponent, { height: loadingHeight });
            }, renderNoData: function (_a) {
                var height = _a.height;
                return (React.createElement(EmptyResultComponent, { height: height, isFilteredByParentFilters: isFilteredByParentFilters, searchString: searchString, totalItemsCount: totalItemsCount, parentFilterTitles: parentFilterTitles }));
            }, renderSearchBar: function (_a) {
                var onSearch = _a.onSearch, searchString = _a.searchString;
                return (React.createElement(ElementsSearchBarComponent, { onSearch: onSearch, searchString: searchString, isSmall: !(isMobile && fullscreenOnMobile) }));
            }, renderStatusBar: function (_a) {
                var getItemTitle = _a.getItemTitle, isInverted = _a.isInverted, selectedItems = _a.selectedItems, selectedItemsLimit = _a.selectedItemsLimit;
                return (React.createElement(StatusBarComponent, { getItemTitle: getItemTitle, isFilteredByParentFilters: isFilteredByParentFilters, isInverted: isInverted, parentFilterTitles: parentFilterTitles, selectedItems: selectedItems, totalElementsCountWithCurrentSettings: totalItemsCountWithCurrentSettings, selectedItemsLimit: selectedItemsLimit }));
            }, renderActions: function (_a) {
                var checked = _a.checked, onChange = _a.onChange, onToggle = _a.onToggle, isFiltered = _a.isFiltered, totalItemsCount = _a.totalItemsCount, isPartialSelection = _a.isPartialSelection, isVisible = _a.isVisible;
                return (React.createElement(ElementsSelectActionsComponent, { isVisible: isVisible, checked: checked, onChange: onChange, onToggle: onToggle, isFiltered: isFiltered, totalItemsCount: totalItemsCount, isPartialSelection: isPartialSelection }));
            } })));
};
//# sourceMappingURL=AttributeFilterElementsSelect.js.map