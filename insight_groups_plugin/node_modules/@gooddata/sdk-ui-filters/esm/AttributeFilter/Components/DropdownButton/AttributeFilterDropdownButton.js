// (C) 2022 GoodData Corporation
import React, { useEffect, useRef, useState } from "react";
import { useIntl } from "react-intl";
import { stringUtils } from "@gooddata/util";
import cx from "classnames";
import { ShortenedText } from "@gooddata/sdk-ui-kit";
export var ALIGN_POINT = [
    { align: "tc bc", offset: { x: 0, y: -2 } },
    { align: "cc tc", offset: { x: 0, y: 10 } },
    { align: "bl tr", offset: { x: -2, y: -8 } },
];
/**
 * Dropdown button for the AttributeFilter.
 *
 * @remarks
 * This component implements the {@link IAttributeFilterDropdownButtonProps} interface.
 * It displays AttributeFilterDropdownButton in the GoodData look and feel.
 * It displays the name of the related attribute filter as a title and the state of the selection as a subtitle.
 * It displays loading and filtering statuses.
 * It supports setting a left icon and dragging icons.
 *
 * @beta
 */
export var AttributeFilterDropdownButton = function (props) {
    var isOpen = props.isOpen, title = props.title, selectedItemsCount = props.selectedItemsCount, subtitle = props.subtitle, isFiltering = props.isFiltering, isLoading = props.isLoading, isLoaded = props.isLoaded, isDraggable = props.isDraggable, icon = props.icon, onClick = props.onClick;
    var intl = useIntl();
    var subtitleSelectedItemsRef = useRef(null);
    var _a = useState(false), displayItemCount = _a[0], setDisplayItemCount = _a[1];
    useEffect(function () {
        var element = subtitleSelectedItemsRef.current;
        if (!element) {
            return;
        }
        var roundedWidth = Math.ceil(element.getBoundingClientRect().width);
        var displayItemCount = roundedWidth < element.scrollWidth;
        setDisplayItemCount(displayItemCount);
    }, [subtitle]);
    var buttonTitle = title;
    var buttonSubtitle = subtitle;
    if (isLoading) {
        buttonTitle = intl.formatMessage({ id: "loading" });
        buttonSubtitle = intl.formatMessage({ id: "loading" });
    }
    else if (isFiltering) {
        buttonSubtitle = intl.formatMessage({ id: "filtering" });
    }
    return (React.createElement("div", { className: cx("gd-attribute-filter-dropdown-button__next", "s-attribute-filter", "s-" + stringUtils.simplifyText(title), {
            "gd-is-filtering": isFiltering,
            "gd-is-active": isOpen,
            "gd-is-loaded": isLoaded,
            "gd-is-draggable": isDraggable,
        }), onClick: onClick },
        icon ? React.createElement("div", { className: "gd-attribute-filter-dropdown-button-icon__next" }, icon) : null,
        React.createElement("div", { className: "gd-attribute-filter-dropdown-button-content__next" },
            React.createElement("div", { className: "gd-attribute-filter-dropdown-button-title__next" },
                React.createElement(ShortenedText, { tooltipAlignPoints: ALIGN_POINT, className: "s-attribute-filter-button-title" }, "" + buttonTitle + (!isLoading && !isFiltering ? ":" : ""))),
            React.createElement("div", { className: "gd-attribute-filter-dropdown-button-subtitle__next" },
                React.createElement("span", { className: "gd-attribute-filter-dropdown-button-selected-items__next s-attribute-filter-button-subtitle", ref: subtitleSelectedItemsRef }, buttonSubtitle),
                displayItemCount ? (React.createElement("span", { className: "gd-attribute-filter-dropdown-button-selected-items-count__next" }, "(" + selectedItemsCount + ")")) : null))));
};
//# sourceMappingURL=AttributeFilterDropdownButton.js.map