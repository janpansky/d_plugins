// (C) 2019-2022 GoodData Corporation
/* eslint-disable @typescript-eslint/no-empty-interface, import/namespace */
import * as m from "@gooddata/sdk-model";
/**
 * Type-guard testing whether the provided object is an instance of {@link IDashboardAttributeFilter}.
 * @deprecated Use {@link @gooddata/sdk-model#isDashboardAttributeFilter}
 * @alpha
 */
export var isDashboardAttributeFilter = m.isDashboardAttributeFilter;
/**
 * Type-guard testing whether the provided object is an instance of {@link IDashboardDateFilter}.
 * @deprecated Use {@link @gooddata/sdk-model#isDashboardDateFilter}
 * @alpha
 */
export var isDashboardDateFilter = m.isDashboardDateFilter;
/**
 * Creates a new relative dashboard date filter.
 * @param granularity - granularity of the filters (month, year, etc.)
 * @param from - start of the interval – negative numbers mean the past, zero means today, positive numbers mean the future
 * @param to - end of the interval – negative numbers mean the past, zero means today, positive numbers mean the future
 * @deprecated Use {@link @gooddata/sdk-model#newRelativeDashboardDateFilter}
 * @alpha
 */
export var newRelativeDashboardDateFilter = m.newRelativeDashboardDateFilter;
/**
 * Creates a new absolute dashboard date filter.
 * @param from - start of the interval in ISO-8601 calendar date format
 * @param to - end of the interval in ISO-8601 calendar date format
 * @deprecated Use {@link @gooddata/sdk-model#newAbsoluteDashboardDateFilter}
 * @alpha
 */
export var newAbsoluteDashboardDateFilter = m.newAbsoluteDashboardDateFilter;
/**
 * Creates a new all time date filter. This filter is used to indicate that there should be no filtering on the dates.
 * @deprecated Use {@link @gooddata/sdk-model#newAllTimeDashboardDateFilter}
 * @alpha
 */
export var newAllTimeDashboardDateFilter = m.newAllTimeDashboardDateFilter;
/**
 * Type-guard testing whether the provided object is an All time dashboard date filter.
 * @deprecated Use {@link @gooddata/sdk-model#isAllTimeDashboardDateFilter}
 * @alpha
 */
export var isAllTimeDashboardDateFilter = m.isAllTimeDashboardDateFilter;
/**
 * Type-guard testing whether the provided object is an instance of {@link IFilterContextDefinition}.
 * @deprecated Use {@link @gooddata/sdk-model#isFilterContextDefinition}
 * @alpha
 */
export var isFilterContextDefinition = m.isFilterContextDefinition;
/**
 * Type-guard testing whether the provided object is an instance of {@link IFilterContext}.
 * @deprecated Use {@link @gooddata/sdk-model#isFilterContext}
 * @alpha
 */
export var isFilterContext = m.isFilterContext;
/**
 * Type-guard testing whether the provided object is an instance of {@link ITempFilterContext}.
 * @deprecated Use {@link @gooddata/sdk-model#isTempFilterContext}
 * @alpha
 */
export var isTempFilterContext = m.isTempFilterContext;
/**
 * Type-guard testing whether the provided object is an instance of {@link IDashboardDateFilterReference}.
 * @deprecated Use {@link @gooddata/sdk-model#isDashboardDateFilterReference}
 * @alpha
 */
export var isDashboardDateFilterReference = m.isDashboardDateFilterReference;
/**
 * Type-guard testing whether the provided object is an instance of {@link IDashboardAttributeFilterReference}.
 * @deprecated Use {@link @gooddata/sdk-model#isDashboardAttributeFilterReference}
 * @alpha
 */
export var isDashboardAttributeFilterReference = m.isDashboardAttributeFilterReference;
/**
 * Gets reference to object being used for filtering. For attribute filters, this will be reference to the display
 * form. For date filters this will be reference to the data set.
 * @deprecated Use {@link @gooddata/sdk-model#dashboardFilterReferenceObjRef}
 * @alpha
 */
export var dashboardFilterReferenceObjRef = m.dashboardFilterReferenceObjRef;
//# sourceMappingURL=filterContext.js.map